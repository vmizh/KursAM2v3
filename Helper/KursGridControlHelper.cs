using System;
using DevExpress.Xpf.Editors.Settings;
using DevExpress.Xpf.Grid;

namespace Helper
{
    public class KursGridControlHelper
    {
        private readonly GridControl myGridControl;

        public KursGridControlHelper(GridControl grid)
        {
            myGridControl = grid;
        }

        public GridColumn GenerateColumn(string colName, string header, string fieldName, bool isReadOnly)
        {
            var col = new GridColumn
            {
                Name = colName,
                Header = header,
                FieldName = fieldName,
                ReadOnly = isReadOnly
            };
            myGridControl.Columns.Add(col);
            return col;
        }

        public GridColumn GenerateNumericColumn(string colName, string header, 
            string fieldName, bool isReadOnly, int precision)
        {
            var col = GenerateColumn(colName, header, fieldName, isReadOnly);
            var editor = new CalcEditSettings
            {
                Precision = precision,
                DisplayFormat = "n2",
                MaskUseAsDisplayFormat = true
            };
            col.EditSettings = editor;

            return col;
        }

        public static void DefaultAutoGeneratingColumn(ColumnBase col)
        {
            col.Name = col.FieldName;
            if (ColumnFieldTypeCheckDecimal(col.FieldType))
                col.EditSettings = new CalcEditSettings
                {
                    DisplayFormat = "n2",
                    Name = col.FieldName + "Calc"
                };

        }

        public static void DefaultAutoGeneratedColumns(GridColumnCollection cols)
        {
            foreach (var c in cols)
            {
                if (c.EditSettings == null)
                    c.EditSettings = new TextEditSettings
                    {
                        SelectAllOnMouseUp = true
                    };
            }
        }

        public static bool ColumnFieldTypeCheckDecimal(Type type)
        {
            return type == typeof(decimal) || type == typeof(decimal?)
                                           || type == typeof(double) ||
                                           type == typeof(double?)
                                           || type == typeof(float) ||
                                           type == typeof(float?);
        }
    }
}