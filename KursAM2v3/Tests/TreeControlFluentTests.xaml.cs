using System.Collections.ObjectModel;
using System.Windows;
using Core.EntityViewModel.CommonReferences;
using Core.ViewModel.Base;
using DevExpress.Xpf.Core;
using DevExpress.Xpf.Editors.Settings;
using DevExpress.Xpf.Grid;
using KursAM2.View.Management;
using KursDomain.Documents.CommonReferences;
using KursDomain.References;
using LayoutManager;

namespace KursAM2.Tests
{
    /// <summary>
    ///     Interaction logic for TreeControlFluentTests.xaml
    /// </summary>
    public partial class TreeControlFluentTests : ILayout
    {
        public TreeControlFluentTests()
        {
            InitializeComponent(); 
        }

        public LayoutManager.LayoutManager LayoutManager { get; set; }
        public string LayoutManagerName { get; set; }

        public void SaveLayout()
        {
            LayoutManager.Save();
        }

        private void GridProjects_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
        }

        private void GridProjects_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            foreach (var c in gridProjects.Columns)
                if (c.EditSettings == null)
                    c.EditSettings = new TextEditSettings
                    {
                        SelectAllOnMouseUp = true
                    };
        }

        private void ButtonBase_OnClick(object sender, RoutedEventArgs e)
        {
            var dtx = DataContext as TestContext;
            dtx?.RefreshData(null);
        }
    }


    public class TestContext : RSWindowViewModelBase
    {
        private Project myCurrentPeriod;

        public TestContext()
        {
            Periods.Add(new Project());
        }

        public ObservableCollection<Project> Periods { set; get; } =
            new ObservableCollection<Project>();

        public Project CurrentPeriod
        {
            get => myCurrentPeriod;
            set
            {
                if (Equals(myCurrentPeriod,value)) return;
                myCurrentPeriod = value;
                if (myCurrentPeriod == null) return;
                // ReSharper disable once UnusedVariable
                var frm = Form as ProjectsView;
                RaisePropertyChanged();
            }
        }

        public override void RefreshData(object obj)
        {
            base.RefreshData(obj);
            Periods.Clear();
        }
    }
}
