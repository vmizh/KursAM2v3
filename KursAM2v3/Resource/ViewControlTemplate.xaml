<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
                    xmlns:dxi="http://schemas.devexpress.com/winfx/2008/xaml/core/internal"
                    xmlns:themes="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys"
                    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:dxgt="http://schemas.devexpress.com/winfx/2008/xaml/grid/themekeys"
                    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
                    xmlns:themes1="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys">
    <dx:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
    <DataTemplate x:Key="summaryTemplate" DataType="dxg:GridSummaryItem">
        <ContentControl>
            <dxg:GridSummaryItem
                FieldName="{Binding Path=(dxi:DependencyObjectExtensions.DataContext).FieldName, Mode=OneWay, RelativeSource={RelativeSource Self}}"
                SummaryType="{Binding Path=(dxi:DependencyObjectExtensions.DataContext).Type, Mode=OneWay,RelativeSource={RelativeSource Self}}"
                DisplayFormat="{Binding Path=(dxi:DependencyObjectExtensions.DataContext).DisplayFormat, Mode=OneWay,RelativeSource={RelativeSource Self}}"
                Tag="{Binding Path=(dxi:DependencyObjectExtensions.DataContext).Key, Mode=OneWay,RelativeSource={RelativeSource Self}}" />
        </ContentControl>
    </DataTemplate>
    <ControlTemplate TargetType="{x:Type ButtonBase}"
                     x:Key="{themes:ButtonsThemeKey ResourceKey=ButtonTemplate, ThemeName=MetropolisLight}">
        <Grid>
            <Grid.Resources>
                <Style x:Key="PressedElementStyle" TargetType="{x:Type ContentControl}">
                    <Setter Property="dx:FocusHelper2.Focusable" Value="False" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ContentControl}">
                                <Border Background="#FFB9B9B9" BorderBrush="#FFB9B9B9" BorderThickness="1" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="HoverState"
                                             Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="pressed1"
                                             Storyboard.TargetProperty="Opacity" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="Glyph"
                                             Storyboard.TargetProperty="Opacity" To="0.25" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="CheckStates">
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="pressed2"
                                                           Storyboard.TargetProperty="Visibility">
                                <ObjectAnimationUsingKeyFrames.KeyFrames>
                                    <DiscreteObjectKeyFrame KeyTime="0">
                                        <DiscreteObjectKeyFrame.Value>
                                            <Visibility>Visible</Visibility>
                                        </DiscreteObjectKeyFrame.Value>
                                    </DiscreteObjectKeyFrame>
                                </ObjectAnimationUsingKeyFrames.KeyFrames>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Unchecked" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto">
                    <!--BEGIN WPF-->
                    <ColumnDefinition.SharedSizeGroup>
                        <system:String>ComboBoxButton</system:String>
                    </ColumnDefinition.SharedSizeGroup>
                    <!--END WPF-->
                </ColumnDefinition>
            </Grid.ColumnDefinitions>
            <Border x:Name="DefaultState" Background="Transparent" BorderBrush="Transparent" BorderThickness="0,0,0,0"
                    Grid.ColumnSpan="1" />
            <Border x:Name="HoverState" Background="#FFB9B9B9" Grid.Column="0" Opacity="0" />
            <ContentControl Grid.Column="0" x:Name="pressed1" Style="{StaticResource PressedElementStyle}" Opacity="0" />
            <ContentControl Grid.Column="0" x:Name="pressed2" Style="{StaticResource PressedElementStyle}"
                            Visibility="Collapsed" />
            <Grid x:Name="Arrow" VerticalAlignment="Center" HorizontalAlignment="Center"
                  Grid.Column="0"
                  SnapsToDevicePixels="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="0.7*" />
                    <ColumnDefinition Width="0.3*" MinWidth="18" />
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Glyph" Grid.ColumnSpan="2"
                                  Style="{DynamicResource {themes:ButtonsThemeKey ResourceKey=ButtonInfoContentStyle}}" />
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=GlyphKind}" Value="User">
                <Setter TargetName="Glyph" Property="Style"
                        Value="{DynamicResource {themes:ButtonsThemeKey ResourceKey=UserButtonInfoContentStyle}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=GlyphKind}" Value="None">
                <Setter TargetName="Glyph" Property="Style"
                        Value="{DynamicResource {themes:ButtonsThemeKey ResourceKey=NoneButtonInfoContentStyle}}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxgt:TableViewThemeKey ResourceKey=DataPresenterTemplate, IsThemeIndependent=True}"
                     TargetType="{x:Type dxg:DataPresenter}">
        <Border Background="#FFFFFFFF">
            <Grid>
                <ContentPresenter />
                <TextBlock Text="Ничего не найдено" 
                           x:Name="PART_NoData" Visibility="Collapsed" 
                           VerticalAlignment="Center" 
                           HorizontalAlignment="Center" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxg:DataControlBase.ActiveView).Grid.ItemsSource.Count, RelativeSource={RelativeSource Self}}" Value="0">
                <Setter TargetName="PART_NoData" Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="dxg:TableView">
        <Setter Property = "EnableImmediatePosting" Value="True"/>
        <Setter Property = "ShowAutoFilterRow" Value="True"/>
    </Style>
    <Style TargetType="dxg:TreeListView">
        <Setter Property = "EnableImmediatePosting" Value="True"/>
    </Style>
    <Style x:Key="FocusedColumnStyle" TargetType="dxg:LightweightCellEditor" 
               BasedOn="{StaticResource {dxgt:GridRowThemeKey ResourceKey=LightweightCellStyle}}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Column.Tag}" Value="True">
                <Setter Property="Background" Value="Gainsboro" />
            </DataTrigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Background" Value="LightBlue" />
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="dxg:LightweightCellEditor" 
           BasedOn="{StaticResource {dxgt:GridRowThemeKey ResourceKey=LightweightCellStyle}}">
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Background" Value="LightBlue" />
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <ControlTemplate x:Key="CustomComboBoxEditTemplate" TargetType="{x:Type dxe:ComboBoxEdit}">
            <Border Name="PART_ErrorBorder">
                <ContentControl Template="{TemplateBinding ActualBorderTemplate}">
                    <!--<dxe:EditorControl x:Name="PART_Content" SnapsToDevicePixels="True" Template="{TemplateBinding ActualEditorControlTemplate}"/>-->
                    <Grid x:Name="ButtonEditGrid" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <!--<dxe:ErrorControl x:Name="PART_ErrorPresenter" />-->
                        <dxe:ButtonsControl x:Name="PART_LeftButtons" Grid.Column="1" ItemsSource="{TemplateBinding LeftButtons}" Visibility="{Binding ShowEditorButtons, Converter={StaticResource BoolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <dxe:EditorControl x:Name="PART_Content" VerticalAlignment="Stretch" Grid.Column="2" dx:FocusHelper2.Focusable="False" Template="{TemplateBinding ActualEditorControlTemplate}" />
                        <dxe:ButtonsControl x:Name="PART_RightButtons" Grid.Column="3" ItemsSource="{TemplateBinding RightButtons}" Visibility="{Binding ShowEditorButtons, Converter={StaticResource BoolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}"
                />
                    </Grid>
                </ContentControl>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="HasValidationError" Value="True">
                    <Setter TargetName="PART_ErrorBorder" Property="BorderThickness" Value="1"/>
                </Trigger>
                <DataTrigger Binding="{Binding Path=ValidationError.ErrorType, RelativeSource={RelativeSource Self}}" Value="Critical">
                    <Setter TargetName="PART_ErrorBorder" Property="BorderBrush" Value="Black"/>
                </DataTrigger>
            </ControlTemplate.Triggers>
     </ControlTemplate>
    <ControlTemplate x:Key="CustomLookUpEditTemplate" TargetType="{x:Type dxg:LookUpEdit}">
            <Border Name="PART_ErrorBorder">
                <ContentControl Template="{TemplateBinding ActualBorderTemplate}">
                    <!--<dxe:EditorControl x:Name="PART_Content" SnapsToDevicePixels="True" Template="{TemplateBinding ActualEditorControlTemplate}"/>-->
                    <Grid x:Name="ButtonEditGrid" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <!--<dxe:ErrorControl x:Name="PART_ErrorPresenter" />-->
                        <dxe:ButtonsControl x:Name="PART_LeftButtons" Grid.Column="1" ItemsSource="{TemplateBinding LeftButtons}" Visibility="{Binding ShowEditorButtons, Converter={StaticResource BoolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <dxe:EditorControl x:Name="PART_Content" VerticalAlignment="Stretch" Grid.Column="2" dx:FocusHelper2.Focusable="False" Template="{TemplateBinding ActualEditorControlTemplate}" />
                        <dxe:ButtonsControl x:Name="PART_RightButtons" Grid.Column="3" ItemsSource="{TemplateBinding RightButtons}" Visibility="{Binding ShowEditorButtons, Converter={StaticResource BoolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}"
                />
                    </Grid>
                </ContentControl>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="HasValidationError" Value="True">
                    <Setter TargetName="PART_ErrorBorder" Property="BorderThickness" Value="1"/>
                </Trigger>
                <DataTrigger Binding="{Binding Path=ValidationError.ErrorType, RelativeSource={RelativeSource Self}}" Value="Critical">
                    <Setter TargetName="PART_ErrorBorder" Property="BorderBrush" Value="Black"/>
                </DataTrigger>
            </ControlTemplate.Triggers>
     </ControlTemplate>
    <ControlTemplate x:Key="CustomButtonEditTemplate" TargetType="{x:Type dxe:ButtonEdit}">
            <Border Name="PART_ErrorBorder">
                <ContentControl Template="{TemplateBinding ActualBorderTemplate}">
                    <!--<dxe:EditorControl x:Name="PART_Content" SnapsToDevicePixels="True" Template="{TemplateBinding ActualEditorControlTemplate}"/>-->
                    <Grid x:Name="ButtonEditGrid" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <!--<dxe:ErrorControl x:Name="PART_ErrorPresenter" />-->
                        <dxe:ButtonsControl x:Name="PART_LeftButtons" Grid.Column="1" ItemsSource="{TemplateBinding LeftButtons}" Visibility="{Binding ShowEditorButtons, Converter={StaticResource BoolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <dxe:EditorControl x:Name="PART_Content" VerticalAlignment="Stretch" Grid.Column="2" dx:FocusHelper2.Focusable="False" Template="{TemplateBinding ActualEditorControlTemplate}" />
                        <dxe:ButtonsControl x:Name="PART_RightButtons" Grid.Column="3" ItemsSource="{TemplateBinding RightButtons}" Visibility="{Binding ShowEditorButtons, Converter={StaticResource BoolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}"
                />
                    </Grid>
                </ContentControl>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="HasValidationError" Value="True">
                    <Setter TargetName="PART_ErrorBorder" Property="BorderThickness" Value="1"/>
                </Trigger>
                <DataTrigger Binding="{Binding Path=ValidationError.ErrorType, RelativeSource={RelativeSource Self}}" Value="Critical">
                    <Setter TargetName="PART_ErrorBorder" Property="BorderBrush" Value="Black"/>
                </DataTrigger>
            </ControlTemplate.Triggers>
     </ControlTemplate>
    <ControlTemplate x:Key="CustomTextEditTemplate" TargetType="{x:Type dxe:TextEdit}">
            <Border Name="PART_ErrorBorder">
                <ContentControl Template="{TemplateBinding ActualBorderTemplate}">
                    <!--<dxe:EditorControl x:Name="PART_Content" SnapsToDevicePixels="True" Template="{TemplateBinding ActualEditorControlTemplate}"/>-->
                    <Grid x:Name="ButtonEditGrid" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <!--<dxe:ErrorControl x:Name="PART_ErrorPresenter" />-->
                    </Grid>
                </ContentControl>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="HasValidationError" Value="True">
                    <Setter TargetName="PART_ErrorBorder" Property="BorderThickness" Value="1"/>
                </Trigger>
                <DataTrigger Binding="{Binding Path=ValidationError.ErrorType, RelativeSource={RelativeSource Self}}" Value="Critical">
                    <Setter TargetName="PART_ErrorBorder" Property="BorderBrush" Value="Black"/>
                </DataTrigger>
            </ControlTemplate.Triggers>
     </ControlTemplate>
    <Style x:Key="ComboBoxEditWithError" TargetType="{x:Type dxe:ComboBoxEdit}">
        <Setter Property="ValidationErrorTemplate">
            <Setter.Value>
                <DataTemplate>  
                    <Image
                        Source="pack://siteoforigin:,,,/Images/DeleteBlack.png"  
                        Width="12" Height="12"/> 
                </DataTemplate>  
            </Setter.Value>
        </Setter>
        <Setter Property="Template" Value="{StaticResource CustomComboBoxEditTemplate}"/>
    </Style>
    <Style x:Key="ButtonEditWithError" TargetType="{x:Type dxe:ButtonEdit}">
        <Setter Property="ValidationErrorTemplate">
            <Setter.Value>
                <DataTemplate>  
                    <Image
                        Source="pack://siteoforigin:,,,/Images/DeleteBlack.png"  
                        Width="12" Height="12"/> 
                </DataTemplate>  
            </Setter.Value>
        </Setter>
        <Setter Property="Template" Value="{StaticResource CustomButtonEditTemplate}"/>
    </Style>
    <Style x:Key ="TextEditWithErrorTemplate" TargetType="{x:Type dxe:TextEdit}">
        <Setter Property="ValidationErrorTemplate">
            <Setter.Value>
                <DataTemplate>  
                    <Image
                        Source="pack://siteoforigin:,,,/Images/DeleteBlack.png"  
                        HorizontalAlignment="Right" 
                        Width="12" Height="12"/> 
                </DataTemplate>  
            </Setter.Value>
        </Setter>
        <Setter Property="Template" Value="{StaticResource CustomTextEditTemplate}"/>
    </Style>
    <Style TargetType="{x:Type dxe:TextEdit}">
        <Setter Property="ValidationErrorTemplate">
            <Setter.Value>
                <DataTemplate>  
                    <Image
                        Source="{x:Null}"  
                        HorizontalAlignment="Right" 
                        Width="1" Height="1"/> 
                </DataTemplate>  
            </Setter.Value>
        </Setter>  
        <Setter Property="BorderTemplate">
            <Setter.Value>  
                <ControlTemplate TargetType="{x:Type ContentControl}">  
                    <Border Name="border" BorderBrush="LightGray" BorderThickness="1">  
                        <ContentPresenter />  
                    </Border>  
                    <ControlTemplate.Triggers>  
                        <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.HasValidationError), RelativeSource={RelativeSource TemplatedParent}}" Value="True">  
                            <Setter TargetName="border" Property="BorderBrush" Value="Black"/>
                            <Setter TargetName="border" Property="BorderThickness" Value="2"/>
                        </DataTrigger>  
                    </ControlTemplate.Triggers>  
                </ControlTemplate>  
            </Setter.Value>  
        </Setter>  
    </Style>
    <Style TargetType="{x:Type dxe:TextEditSettings}">
        <Setter Property="ValidationErrorTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <Border Name="PART_ValidationBorder" BorderThickness="2" BorderBrush="Black" 
                                Visibility="Collapsed" />
                        <dxe:InplaceBaseEdit Name="PART_Editor" />
                    </Grid>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding (dxe:BaseEdit.HasValidationError)}" Value="True">
                            <Setter TargetName="PART_ValidationBorder" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--<Style TargetType="dxg:RowControl">
            <Style.Triggers>
                <Trigger Property="dxg:DataViewBase.IsFocusedRow" Value="True">
                    <Setter Property="Background" Value="Gray" />
                    <Setter Property="Foreground" Value="White" />
                </Trigger>
            </Style.Triggers>
    </Style>-->
    <!--<Style TargetType="dxg:RowControl">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Gainsboro"/>
            </Trigger>
            <Trigger Property="IsFocused" Value ="True">
                <Setter Property="Background" Value="Gray" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>-->

    <ControlTemplate x:Key="{themes1:ListBoxThemeKey ResourceKey=ItemContainerTemplate, IsThemeIndependent=True}" 
                             TargetType="{x:Type ListBoxItem}">
                <Grid>
                    <Rectangle x:Name="FocusVisual" StrokeThickness="1" 
                               Stroke="#FF000000" StrokeDashArray="1 2" SnapsToDevicePixels="True" Opacity="0" />
                    <Border x:Name="Hovered" CornerRadius="2" Opacity="0">
                        <Border.Background>                            
                            <LinearGradientBrush EndPoint="0.5,0" StartPoint="0.5,1">
                                <GradientStop Color="Orange" Offset="0" />
                                <GradientStop Color="Orange" Offset="1" />
                            </LinearGradientBrush>
                        </Border.Background>
                    </Border>
                    <Border x:Name="Selected" CornerRadius="2" Opacity="0">
                        <Border.Background>
                            <SolidColorBrush Color="Orange"/>
                            <!--<LinearGradientBrush EndPoint="0.5,0" StartPoint="0.5,1">
                                <GradientStop Color="#FF4B6FA5" Offset="0" />
                                <GradientStop Color="#FF5E81B4" Offset="1" />
                            </LinearGradientBrush>-->
                        </Border.Background>
                    </Border>
                    <ContentPresenter x:Name="contentPresenter" Margin="3,2,3,2" 
                                      VerticalAlignment="Center" Width="Auto" Height="Auto" 
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter TargetName="contentPresenter" Property="Opacity" Value="0.35"/>
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Opacity" TargetName="Hovered" Value="1" />
                        <Setter Property="Opacity" TargetName="Selected" Value="0" />
                        <Setter Property="Opacity" TargetName="FocusVisual" Value="0" />                        
                    </Trigger>
                    <Trigger Property="Selector.IsSelected" Value="True">
                        <Setter Property="Opacity" TargetName="Hovered" Value="1" />
                        <Setter Property="Opacity" TargetName="Selected" Value="0" />
                        <Setter Property="Opacity" TargetName="FocusVisual" Value="0" />
                        <Setter Property="Foreground" Value="Black" />                        
                    </Trigger>
                    <Trigger Property="IsKeyboardFocused" Value="True">
                        <Setter Property="Opacity" TargetName="Hovered" Value="0" />
                        <Setter Property="Opacity" TargetName="Selected" Value="0" />
                        <Setter Property="Opacity" TargetName="FocusVisual" Value="1" />                        
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsKeyboardFocused" Value="True"/>
                            <Condition Property="Selector.IsSelected" Value="True"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="Opacity" TargetName="Hovered" Value="0" />
                        <Setter Property="Opacity" TargetName="Selected" Value="1" />
                        <Setter Property="Opacity" TargetName="FocusVisual" Value="0" />                        
                        <Setter Property="Foreground" Value="Black" />                        
                    </MultiTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
    <Style x:Key="ItemContainerStyle" TargetType="{x:Type ListBoxItem}">
        <!--<Setter Property="FocusVisualStyle" Value="{x:Null}"/>-->
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Template" Value="{DynamicResource {themes1:ListBoxThemeKey ResourceKey=ItemContainerTemplate}}" />
    </Style>
     
</ResourceDictionary>