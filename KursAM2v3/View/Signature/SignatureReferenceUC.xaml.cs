using System.Windows;
using DevExpress.Xpf.Core;
using DevExpress.Xpf.Editors.Settings;
using DevExpress.Xpf.Grid;
using KursAM2.ViewModel.Signatures;

namespace KursAM2.View.Signature
{
    /// <summary>
    ///     Interaction logic for SignatureReferenceUC.xaml
    /// </summary>
    public partial class SignatureReferenceUC
    {
        public SignatureReferenceUC()
        {
            InitializeComponent(); 
            
        }

        private void gridSignatures_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            switch (e.Column.FieldName)
            {
                case "DataSource":
                    e.Column.Visible = false;
                    break;
            }
        }

        private void gridSignatures_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            
        }

        private void gridUsersForSignatures_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
        }

        private void gridUsersForSignatures_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            
        }

        private void gridDocTypeSignatures_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
        }

        private void gridDocTypeSignatures_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            
        }

        private void TreeSchemaSignatures_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            var dtx = DataContext as SignaturesWindowViewModel;
            e.Column.Name = e.Column.FieldName;
            switch (e.Column.FieldName)
            {
                case "SignatureType":
                    if (dtx != null)
                    {
                        e.Column.EditSettings = new ComboBoxEditSettings
                        {
                            ItemsSource = dtx.Signatures,
                            ValidateOnTextInput = true,
                            ValidateOnEnterKeyPressed = true,
                        };
                    }

                    break;
                case "Note":
                    e.Column.EditSettings = new TextEditSettings
                    {
                        TextWrapping = TextWrapping.Wrap,
                        AcceptsReturn = true,
                    };
                    break;
            }
        }
    }
}
