using System.Diagnostics.CodeAnalysis;
using System.Windows;
using DevExpress.Xpf.Core;
using DevExpress.Xpf.Grid;
using DevExpress.Xpf.Grid.LookUp;
using KursAM2.ViewModel.Reference.Kontragent;
using KursDomain;
using KursDomain.Documents.CommonReferences.Kontragent;
using LayoutManager;

namespace KursAM2.View.KursReferences.KontragentControls
{
    /// <summary>
    ///     Interaction logic for KontragentBankUserControl.xaml
    /// </summary>
    [SuppressMessage("ReSharper", "UnassignedGetOnlyAutoProperty")]
    public partial class KontragentBankUserControl : ILayout
    {
        public KontragentBankUserControl()
        {
            InitializeComponent();
            ApplicationThemeHelper.ApplicationThemeName = Theme.MetropolisLightName;
            LayoutManager = new LayoutManager.LayoutManager(GlobalOptions.KursSystem(),GetType().Name, bankGridControl);
            Loaded += MutualAccountingSearchView_Loaded;
            Unloaded += MutualAccountingSearchView_Unloaded;
        }

        public LayoutManagerBase LayoutManager { get; set; }

        public Rect ClipBounds { get; }
        public bool Visible { get; }
        public Rect Bounds { get; }
        public Rect[] ClipRects { get; }
        public Size Size { get; }
        public Point Location { get; }
        public double Angle { get; }
        public string LayoutManagerName { get; set; }

        public void SaveLayout()
        {
            //throw new System.NotImplementedException();
        }

        LayoutManager.LayoutManager ILayout.LayoutManager { get; set; }

        private void MutualAccountingSearchView_Unloaded(object sender, RoutedEventArgs e)
        {
            LayoutManager.Save();
        }

        private void MutualAccountingSearchView_Loaded(object sender, RoutedEventArgs e)
        {
            LayoutManager.Load();
        }

        private void GridViewBase_OnCellValueChanged(object sender, CellValueChangedEventArgs e)
        {
            if (e.Column.FieldName == "IsForPrint")
                if ((bool) e.Value && DataContext is KontragentCardWindowViewModel ctx)
                    foreach (var b in ctx.BankAndAccounts)
                        if (((KontragentBank) e.Row).Code != b.Code)
                            b.IsForPrint = false;
        }

        private void BankGridControl_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            var dtx = DataContext as KontragentCardWindowViewModel;
            foreach (var col in bankGridControl.Columns)
                switch (col.FieldName)
                {
                    case "Bank":
                        if (dtx != null)
                            col.EditSettings = new LookUpEditSettings
                            {
                                DisplayMember = "BANK_NAME",
                                ItemsSource = dtx.AllBanks,
                                AutoPopulateColumns = true
                            };
                        break;
                }
        }

        private void BankGridControl_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
        }
    }
}
