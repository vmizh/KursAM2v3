using System;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using Core;
using Core.EntityViewModel.Bank;
using Core.EntityViewModel.Cash;
using Core.Invoices.EntityViewModel;
using Core.WindowsManager;
using DevExpress.Xpf.Core;
using DevExpress.Xpf.Editors.Settings;
using DevExpress.Xpf.Grid;
using DevExpress.Xpf.LayoutControl;
using Helper;
using KursAM2.Dialogs;
using KursAM2.ViewModel.Reference;
using LayoutManager;

namespace KursAM2.View.KursReferences
{
    /// <summary>
    ///     Interaction logic for CashAndBanksReferenceView.xaml
    /// </summary>
    public partial class CashAndBanksReferenceView : ILayout
    {
        private readonly LayoutManagerGridAutoGenerationColumns gridBankLayout;
        private readonly LayoutManagerGridAutoGenerationColumns gridCashLayout;

        public CashAndBanksReferenceView()
        {
            InitializeComponent(); ApplicationThemeHelper.ApplicationThemeName = Theme.MetropolisLightName;
            LayoutManager = new LayoutManager.LayoutManager(GetType().Name, this, mainLayoutControl);
            gridCashLayout = new LayoutManagerGridAutoGenerationColumns(GetType().Name, gridCash);
            gridBankLayout = new LayoutManagerGridAutoGenerationColumns(GetType().Name, gridBank);
            Closing += CashAndBanksReferenceView_Closing;
            Loaded += CashAndBanksReferenceView_Loaded;
        }

        public LayoutManager.LayoutManager LayoutManager { get; set; }
        public string LayoutManagerName { get; set; }
        public void SaveLayout()
        {
            LayoutManager.Save();
        }

        private void CashAndBanksReferenceView_Loaded(object sender, RoutedEventArgs e)
        {
            gridBankLayout.Save();
            gridCashLayout.Save();
            LayoutManager.Load();
        }

        private void CashAndBanksReferenceView_Closing(object sender, CancelEventArgs e)
        {
            LayoutManager.Save();
            gridCashLayout.Save();
            gridBankLayout.Save();
        }

        private void GridCash_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            if (KursGridControlHelper.ColumnFieldTypeCheckDecimal(e.Column.FieldType))
                e.Column.EditSettings = new CalcEditSettings
                {
                    DisplayFormat = "n2",
                    Name = e.Column.FieldName + "Calc"
                };
            var row = new CashReference();
            // ReSharper disable once LocalNameCapturedOnly
            // ReSharper disable once RedundantAssignment
            switch (e.Column.Name)
            {
                case nameof(row.DefaultCurrency):
                    e.Column.EditSettings = new ComboBoxEditSettings
                    {
                        ItemsSource = MainReferences.Currencies.Values.ToList(),
                        DisplayMember = "Name",
                        AutoComplete = true
                    };
                    break;
                case nameof(row.CO):
                    e.Column.EditSettings = new ComboBoxEditSettings
                    {
                        ItemsSource = MainReferences.COList.Values.ToList(),
                        DisplayMember = "Name",
                        AutoComplete = true
                    };
                    break;
            }
            ViewFluentHelper.SetModeUpdateProperties(row, e.Column, e.Column.FieldName);
        }

        private void GridCash_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            var columnsInfo = gridCashLayout.Load();
            gridCash.TotalSummary.Clear();
            foreach (var col in gridCash.Columns)
                gridCashLayout.AutoGeneratedColumnSetProperties(columnsInfo.ColumnsInfo, col);
        }

        private void GridBank_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            if (KursGridControlHelper.ColumnFieldTypeCheckDecimal(e.Column.FieldType))
                e.Column.EditSettings = new CalcEditSettings
                {
                    DisplayFormat = "n2",
                    Name = e.Column.FieldName + "Calc"
                };
            // ReSharper disable once RedundantAssignment
            // ReSharper disable once LocalNameCapturedOnly
            var row = new BankAccountReference();
            // ReSharper disable once LocalNameCapturedOnly
            // ReSharper disable once RedundantAssignment
            switch (e.Column.Name)
            {
                case nameof(row.CO):
                    e.Column.EditSettings = new ComboBoxEditSettings
                    {
                        ItemsSource = MainReferences.COList.Values.ToList(),
                        DisplayMember = "Name",
                        AutoComplete = true
                    };
                    break;
                case nameof(row.Currency):
                    e.Column.EditSettings = new ComboBoxEditSettings
                    {
                        ItemsSource = MainReferences.Currencies.Values.ToList(),
                        DisplayMember = "Name",
                        AutoComplete = true
                    };
                    break;
                case nameof(row.Bank):
                    var btnES = new ButtonEditSettings
                    {
                        TextWrapping = TextWrapping.Wrap,
                        IsTextEditable = false
                    };
                    btnES.DefaultButtonClick += BtnES_DefaultButtonClick;
                    e.Column.EditSettings = btnES;
                    break;
            }
        }

        private void BtnES_DefaultButtonClick(object sender, RoutedEventArgs e)
        {
            var dtx = DataContext as BankAndCashReferenceViewModel;
            var cur = dtx?.CurrentBank;
            if (cur == null) return;
            var bank = StandartDialogs.SelectBank();
            if (bank == null) return;
            cur.Bank = bank;
        }

        private void GridBank_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            var columnsInfo = gridBankLayout.Load();
            gridBank.TotalSummary.Clear();
            foreach (var col in gridBank.Columns)
                gridBankLayout.AutoGeneratedColumnSetProperties(columnsInfo.ColumnsInfo, col);
        }

        private void BankCash_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
        }

        private void BankCash_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
        }

        private void gridUsers_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
        }

        private void gridUsers_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
        }

        private void MainLayoutControl2_OnSelectedTabChildChanged(object sender,
            ValueChangedEventArgs<FrameworkElement> e)
        {
            var grp = e.NewValue as LayoutGroup;
            if (grp == null) return;
            if (grp.Name == "mainLayoutControl5")
            {
                var dtx = DataContext as BankAndCashReferenceViewModel;
                if (dtx == null) return;
                dtx.BankCash.Clear();
                dtx.SelectedUsers.Clear();
                if (!dtx.IsCanUserRight) return;
                try
                {
                    using (var ctx = GlobalOptions.GetEntities())
                    {
                        var cashs = ctx.SD_22.ToList();
                        var banks = ctx.SD_114.ToList();
                        foreach (var c in cashs)
                            dtx.BankCash.Add(new BankCashItem
                            {
                                DocCode = c.DOC_CODE,
                                TypeItem = "Касса",
                                Name = c.CA_NAME
                            });
                        foreach (var b in banks)
                            dtx.BankCash.Add(new BankCashItem
                            {
                                DocCode = b.DOC_CODE,
                                TypeItem = "Банк",
                                Name = b.BA_ACC_SHORTNAME
                            });
                    }
                }
                catch (Exception ex)
                {
                    WindowManager.ShowError(this, ex);
                }
            }
        }

        private void TableViewUsers_OnCellValueChanged(object sender, CellValueChangedEventArgs e)
        {
            var dtx = DataContext as BankAndCashReferenceViewModel;
            if (dtx == null) return;
            try
            {
                using (var ctx = GlobalOptions.GetEntities())
                {
                    switch (dtx.CurrentBankCash.TypeItem)
                    {
                        case "Касса":
                            ctx.Database.ExecuteSqlCommand(
                                dtx.CurrentUser.IsSelected
                                    ? "INSERT INTO HD_22 (DOC_CODE,USR_ID) VALUES({0},{1}) "
                                    : "DELETE FROM HD_22 WHERE DOC_CODE = {0} AND USR_ID = {1} ",
                                dtx.CurrentBankCash.DocCode, dtx.CurrentUser.UserId);
                            break;
                        case "Банк":
                            ctx.Database.ExecuteSqlCommand(
                                dtx.CurrentUser.IsSelected
                                    ? "INSERT INTO HD_114 (DOC_CODE,USR_ID) VALUES({0},{1}) "
                                    : "DELETE FROM HD_114 WHERE DOC_CODE = {0} AND USR_ID = {1} ",
                                dtx.CurrentBankCash.DocCode, dtx.CurrentUser.UserId);
                            break;
                    }
                }
            }
            catch (Exception ex)
            {
                WindowManager.ShowError(this, ex);
            }
        }
    }
}