using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using DevExpress.Xpf.Core;
using DevExpress.Xpf.Editors;
using DevExpress.Xpf.Grid;
using DevExpress.Xpf.LayoutControl;
using KursAM2.ViewModel.Logistiks.NomenklReturn;


namespace KursAM2.View.Logistiks.NomenklReturn
{
    /// <summary>
    /// Interaction logic for NomenklReturnToProviderView.xaml
    /// </summary>
    public partial class NomenklReturnToProviderView : ThemedWindow
    {
        public NomenklReturnToProviderView()
        {
            InitializeComponent();
        }
         private void LayoutItems_OnAutoGeneratingItem(object sender, DataLayoutControlAutoGeneratingItemEventArgs e)
        {
            var dtx = DataContext as NomenklReturnToProviderWindowViewModel;
            if (e.Item.Content is BaseEdit ed)
            {
                ed.EditValuePostDelay = 0;
                ed.EditValuePostMode = PostMode.Immediate;
            }

            switch (e.PropertyName)
            {
                case "Kontragent":
                    var oldContent = e.Item.Content as BaseEdit;
                    var newContent = new ButtonEdit
                    {
                        AllowDefaultButton = false,
                        IsTextEditable = false
                    };
                    newContent.Buttons.Add(new ButtonInfo
                    {
                        Command = dtx?.KontragentSelectCommad,
                        ButtonKind = ButtonKind.Simple,
                        GlyphKind = GlyphKind.Regular
                    });
                    e.Item.Content = newContent;
                    CopyBinding(oldContent, newContent, BaseEdit.EditValueProperty);
                    break;
                case "Warehouse":
                    var oldWareContent = e.Item.Content as BaseEdit;
                    var newWareContent = new ButtonEdit
                    {
                        AllowDefaultButton = false,
                        IsTextEditable = false
                    };
                    newWareContent.Buttons.Add(new ButtonInfo
                    {
                        Command = dtx?.WarehouseSelectCommand,
                        ButtonKind = ButtonKind.Simple,
                        GlyphKind = GlyphKind.Regular
                    });
                    e.Item.Content = newWareContent;
                    CopyBinding(oldWareContent, newWareContent, BaseEdit.EditValueProperty);
                    break;
                case "Currency":
                case "State":
                    ((BaseEdit)e.Item.Content).IsReadOnly = true;
                    if (e.Item.Content is ComboBoxEdit ed1)
                    {
                        ed1.AllowDefaultButton = false;
                        ed1.IsEnabled = false;
                    }

                    break;
                case "Note":
                    var oldNoteContent = e.Item.Content as BaseEdit;
                    var newNoteContent = new TextEdit
                    {
                        TextWrapping = TextWrapping.Wrap,
                        AcceptsReturn = true,
                        AcceptsTab = true,
                        MinHeight = 40,
                        VerticalContentAlignment = VerticalAlignment.Top,
                        HorizontalContentAlignment = HorizontalAlignment.Left
                    };
                    e.Item.Content = newNoteContent;
                    CopyBinding(oldNoteContent, newNoteContent, BaseEdit.EditValueProperty);
                    break;
            }
        }

        private static void CopyBinding(BaseEdit oldContent, BaseEdit newContent, DependencyProperty property)
        {
            var binding = oldContent.GetBindingExpression(property)?.ParentBinding;
            newContent.SetBinding(property, binding);
        }

        private void LayoutItems_OnAutoGeneratedUI(object sender, EventArgs e)
        {
            //throw new NotImplementedException();
        }

        private void GridRows_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            switch (e.Column.Name)
            {
                case "State":
                    e.Column.Header = "Статус";
                    e.Column.ReadOnly = true;
                    e.Column.Visible = false;
                    break;
            }
        }

        private void GridRows_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            //throw new NotImplementedException();
        }
    }
}
