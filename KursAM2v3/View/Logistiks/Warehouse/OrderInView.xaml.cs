using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Entity;
using System.Linq;
using System.Windows;
using Core;
using Core.EntityViewModel;
using Core.ViewModel.Base;
using Core.WindowsManager;
using DevExpress.Data;
using DevExpress.Xpf.Editors;
using DevExpress.Xpf.Editors.Settings;
using DevExpress.Xpf.Grid;
using DevExpress.Xpf.LayoutControl;
using Helper;
using KursAM2.Dialogs;
using KursAM2.Managers;
using KursAM2.View.Base;
using KursAM2.View.Logistiks.UC;
using KursAM2.ViewModel.Logistiks.Warehouse;
using LayoutManager;

namespace KursAM2.View.Logistiks.Warehouse
{
    /// <summary>
    ///     Interaction logic for OrderInView.xaml
    /// </summary>
    public partial class OrderInView : ILayout
    {
        private readonly LayoutManagerGridAutoGenerationColumns gridRowsLayout;
        private readonly WindowManager winManager = new WindowManager();
        public ButtonEdit schetEdit;
#pragma warning disable 649
        private ButtonEdit senderEdit;
#pragma warning restore 649
        public ComboBoxEdit warehouseTypeComboBoxEdit;

        public OrderInView()
        {
            InitializeComponent();
            gridRowsLayout = new LayoutManagerGridAutoGenerationColumns(GetType().Name, gridRows);
            LayoutManager = new LayoutManager.LayoutManager(GetType().Name, this, null);
            Closing += OrderIn_Closing;
            Loaded += OrderIn_Loaded;
        }

        public LayoutManager.LayoutManager LayoutManager { get; set; }
        public string LayoutManagerName { get; set; }

        private void OrderIn_Loaded(object sender, RoutedEventArgs e)
        {
            LayoutManager.Load();
        }

        private void OrderIn_Closing(object sender, CancelEventArgs e)
        {
            LayoutManager.Save();
            gridRowsLayout.Save();
        }

        private void GridRows_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            if (KursGridControlHelper.ColumnFieldTypeCheckDecimal(e.Column.FieldType))
                e.Column.EditSettings = new CalcEditSettings
                {
                    DisplayFormat = "n2",
                    Name = e.Column.FieldName + "Calc"
                };
            var ctx = DataContext as OrderInWindowViewModel;
            var doc = ctx?.Document;
            if (doc == null)
                return;
            // ReSharper disable once LocalNameCapturedOnly
            // ReSharper disable once RedundantAssignment
            var inv = new WarehouseOrderInRow();
            switch (e.Column.Name)
            {
                case nameof(inv.NomNomenkl):
                    e.Column.ReadOnly = true;
                    e.Column.EditSettings = new TextEditSettings
                    {
                        HorizontalContentAlignment = EditSettingsHorizontalAlignment.Center
                    };
                    break;
                case nameof(inv.Nomenkl):
                    var nomenklEdit = new ButtonEditSettings
                    {
                        TextWrapping = TextWrapping.Wrap,
                        IsTextEditable = false
                    };
                    nomenklEdit.DefaultButtonClick += Nomenkl_DefaultButtonClick;
                    e.Column.EditSettings = nomenklEdit;
                    break;
                case nameof(inv.Note):
                    e.Column.EditSettings = new MemoEditSettings
                    {
                        ShowIcon = false
                    };
                    break;
                case nameof(inv.SDRSchet):
                    e.Column.EditSettings = new ComboBoxEditSettings
                    {
                        ItemsSource = MainReferences.SDRSchets.Values,
                        DisplayMember = "Name",
                        AutoComplete = true
                    };
                    break;
                case nameof(inv.InvoiceProvider):
                    e.Column.EditSettings = new MemoEditSettings
                    {
                        ShowIcon = false,
                        MemoTextWrapping = TextWrapping.Wrap
                    };
                    break;
            }
        }

        private void GridRows_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            if (gridRows.Bands != null && gridRows.Bands.Count > 0)
            {
                var bandid = 1;
                foreach (var b in gridRows.Bands)
                {
                    b.Name = "band" + bandid;
                    bandid++;
                }
            }

            gridRows.TotalSummary.Clear();
            foreach (var col in gridRows.Columns)
                if (KursGridControlHelper.ColumnFieldTypeCheckDecimal(col.FieldType))
                {
                    var summary = new GridSummaryItem
                    {
                        SummaryType = SummaryItemType.Sum,
                        ShowInColumn = col.FieldName,
                        DisplayFormat = "{0:n2}",
                        FieldName = col.FieldName
                    };
                    gridRows.TotalSummary.Add(summary);
                }

            var columnsInfo = gridRowsLayout.Load();
            gridRows.TotalSummary.Clear();
            foreach (var col in gridRows.Columns)
                gridRowsLayout.AutoGeneratedColumnSetProperties(columnsInfo.ColumnsInfo, col);
        }

        private void LayoutItems_OnAutoGeneratingItem(object sender, DataLayoutControlAutoGeneratingItemEventArgs e)
        {
            var ctx = DataContext as OrderInWindowViewModel;
            var doc = ctx?.Document;
            if (doc == null)
                return;
            var oldContent = e.Item.Content as BaseEdit;
            if (e.PropertyType == typeof(decimal) || e.PropertyType == typeof(decimal?))
            {
                var newContent = new PopupCalcEdit
                {
                    DisplayFormatString = "n2",
                    MaskUseAsDisplayFormat = true
                };
                BindingHelper.CopyBinding(oldContent, newContent, BaseEdit.EditValueProperty);
                e.Item.Content = newContent;
            }

            switch (e.PropertyName)
            {
                case nameof(doc.DD_IN_NUM):
                    e.Item.IsReadOnly = true;
                    e.Item.Width = 250;
                    break;
                case nameof(doc.DD_EXT_NUM):
                    e.Item.Width = 350;
                    break;
                case nameof(doc.DD_DATE):
                    e.Item.Width = 150;
                    break;
                case nameof(doc.WarehouseSenderType):
                    e.Item.Name = "WarehouseTypeName";
                    warehouseTypeComboBoxEdit = e.Item.Content as ComboBoxEdit;
                    if (doc.Sender != null)
                        if (warehouseTypeComboBoxEdit != null)
                            warehouseTypeComboBoxEdit.IsEnabled = false;
                    e.Item.Width = 300;
                    break;
                case nameof(doc.Sender):
                    senderEdit = new ButtonEdit
                    {
                        TextWrapping = TextWrapping.Wrap,
                        IsTextEditable = false
                    };
                    senderEdit.DefaultButtonClick += Sender_DefaultButtonClick;
                    BindingHelper.CopyBinding(oldContent, senderEdit, BaseEdit.EditValueProperty);
                    e.Item.Content = senderEdit;
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    e.Item.MinWidth = 600;
                    if (doc.DD_SPOST_DC != null)
                        senderEdit.AllowDefaultButton = false;
                    break;
                case nameof(doc.DD_SCHET):
                    schetEdit = new ButtonEdit
                    {
                        TextWrapping = TextWrapping.Wrap,
                        IsTextEditable = false,
                        AllowDefaultButton = false
                    };
                    var addSchet = new ButtonInfo
                    {
                        GlyphKind = GlyphKind.Regular,
                        ToolTip = "Установить связь со счетом",
                        Tag = "Add"
                    };
                    if (ctx.Document.DD_SPOST_DC != null)
                        addSchet.IsEnabled = false;
                    addSchet.Click += Schet_DefaultButtonClick;
                    var delSchet = new ButtonInfo
                    {
                        GlyphKind = GlyphKind.Cancel,
                        ToolTip = "Удалить связь со счетом",
                        Tag = "Del"
                    };
                    if (ctx.Document.DD_SPOST_DC == null)
                        delSchet.IsEnabled = false;
                    delSchet.Click += DelSchet_Click;
                    var openSchet = new ButtonInfo
                    {
                        GlyphKind = GlyphKind.Edit,
                        ToolTip = "Открыть счет",
                        Tag = "Open"
                    };
                    if (ctx.Document.DD_SPOST_DC == null)
                        openSchet.IsEnabled = false;
                    openSchet.Click += OpenSchet_Click;
                    schetEdit.Buttons.Add(addSchet);
                    schetEdit.Buttons.Add(delSchet);
                    schetEdit.Buttons.Add(openSchet);
                    BindingHelper.CopyBinding(oldContent, schetEdit, BaseEdit.EditValueProperty);
                    e.Item.Content = schetEdit;
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    e.Item.MinWidth = 600;
                    break;
                case nameof(doc.WarehouseIn):
                    var wInCB = ViewFluentHelper.SetComboBoxEdit(e.Item, doc.WarehouseIn, "WarehouseIn",
                        MainReferences.Warehouses.Values.ToList().OrderBy(_ => _.Name));
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    e.Item.HorizontalContentAlignment = HorizontalAlignment.Left;
                    wInCB.EditValueChanged += WInCB_EditValueChanged;
                    break;
                case nameof(doc.CREATOR):
                    e.Item.IsReadOnly = true;
                    e.Item.HorizontalAlignment = HorizontalAlignment.Right;
                    break;
                case "State":
                    e.Item.IsReadOnly = true;
                    if (e.Item.Content is ComboBoxEdit cbState) cbState.IsEnabled = false;
                    e.Item.HorizontalAlignment = HorizontalAlignment.Right;
                    break;
                case nameof(doc.Note):
                    ViewFluentHelper.SetDefaultMemoEdit(e.Item);
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    e.Item.MinWidth = 300;
                    break;
            }

            ViewFluentHelper.SetModeUpdateProperties(doc, e.Item, e.PropertyName);
        }

        private void OpenSchet_Click(object sender, RoutedEventArgs e)
        {
            var dtx = DataContext as OrderInWindowViewModel;
            if (dtx == null || dtx.Document == null || dtx.Document.DD_SPOST_DC == null) return;
            DocumentsOpenManager.Open(DocumentType.InvoiceProvider, (decimal) dtx.Document.DD_SPOST_DC);
        }

        private void DelSchet_Click(object sender, RoutedEventArgs e)
        {
            if (winManager.ShowWinUIMessageBox(this,
                "Вы хотите удалить счет и связанные с ним строки?",
                "Запрос", MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.No) return;
            var dtx = DataContext as OrderInWindowViewModel;
            if (dtx == null) return;
            var delList =
                new List<WarehouseOrderInRow>(dtx.Document.Rows.Where(_ => _.DDT_SPOST_DC == dtx.Document.DD_SPOST_DC));
            foreach (var r in delList)
            {
                if (r.State != RowStatus.NewRow) dtx.Document.DeletedRows.Add(r);
                dtx.Document.Rows.Remove(r);
            }

            dtx.Document.DD_SPOST_DC = null;
            dtx.Document.DD_SCHET = null;
            var delBtn = schetEdit.Buttons.FirstOrDefault(_ => (string) _.Tag == "Del");
            if (delBtn != null) delBtn.IsEnabled = false;
            var addBtn = schetEdit.Buttons.FirstOrDefault(_ => (string) _.Tag == "Add");
            if (addBtn != null) addBtn.IsEnabled = true;
            var openBtn = schetEdit.Buttons.FirstOrDefault(_ => (string) _.Tag == "Open");
            if (openBtn != null) openBtn.IsEnabled = false;
        }

        private void WInCB_EditValueChanged(object sender, EditValueChangedEventArgs e)
        {
            var ctx = DataContext as OrderInWindowViewModel;
            var doc = ctx?.Document;
            if (doc == null)
                return;
            var win = new WindowManager();
            // ReSharper disable once PossibleUnintendedReferenceComparison
            if (doc.WarehouseIn == doc.WarehouseOut)
            {
                win.ShowWinUIMessageBox("Отправитель и получатель не могут совпадать.", "Предупреждение",
                    MessageBoxButton.OK, MessageBoxImage.Warning, MessageBoxResult.OK, MessageBoxOptions.None);
                doc.WarehouseIn = null;
                return;
            }

            doc.Kladovshik = doc.WarehouseIn.Employee;
        }

        private void Schet_DefaultButtonClick(object sender, RoutedEventArgs e)
        {
            var dtx = DataContext as OrderInWindowViewModel;
            if (dtx == null) return;
            switch (dtx.Document.WarehouseSenderType)
            {
                case WarehouseSenderType.Kontragent:
                    SelectSchet();
                    break;
                case WarehouseSenderType.Store:
                    SelectRashOrder();
                    break;
            }
        }

        private void SelectRashOrder()
        {
        }

        private void SelectSchet()
        {
            var dtx = DataContext as OrderInWindowViewModel;
            if (dtx == null) return;
            if (dtx.Document.WarehouseIn == null)
            {
                winManager.ShowWinUIMessageBox(this, "Не выбран склад.", "Ошибка", MessageBoxButton.OK,
                    MessageBoxImage.Error);
                return;
            }

            var ctx = new AddNomenklFromInvoiceProviderViewModel(dtx.Document.WarehouseIn,
                dtx.Document.KontragentSender);
            var dlg = new SelectDialogView {DataContext = ctx};
            ctx.Form = dlg;
            if (dlg.ShowDialog() == false) return;
            if (dtx.Document.KontragentSender == null)
            {
                dtx.Document.KontragentSender = ctx.CurrentInvoice.Kontragent;
                senderEdit.AllowDefaultButton = false;
            }

            using (var dbctx = GlobalOptions.GetEntities())
            {
                foreach (var r in ctx.Nomenkls.Where(_ => _.IsChecked && _.Quantity > 0).ToList())
                {
                    var old = dtx.Document.Rows.FirstOrDefault(_ => _.DDT_NOMENKL_DC == r.Nomenkl.DocCode);
                    if (old != null) continue;
                    var invRow = dbctx.TD_26
                        .Include(_ => _.SD_26).FirstOrDefault(_ => _.DOC_CODE == r.DocCode && _.CODE == r.Code);
                    var schetRow = invRow != null ? new InvoiceProviderRow(invRow) : null;
                    dtx.Document.Rows.Add(new WarehouseOrderInRow
                    {
                        DocCode = -1,
                        Nomenkl = r.Nomenkl,
                        DDT_KOL_PRIHOD = r.Quantity,
                        Unit = r.Nomenkl.Unit,
                        DDT_SPOST_DC = r.DocCode,
                        LinkInvoice = schetRow,
                        DDT_SPOST_ROW_CODE = r.Code,
                        DDT_CRS_DC = r.Nomenkl.Currency.DocCode,
                        State = RowStatus.NewRow
                    });
                }
            }

            if (dtx.Document.DD_SPOST_DC == null)
                using (var context = GlobalOptions.GetEntities())
                {
                    var s26 = context.SD_26.FirstOrDefault(_ => _.DOC_CODE == ctx.CurrentInvoice.DocCode);
                    if (s26 != null)
                    {
                        dtx.Document.DD_SCHET =
                            $"№{s26.SF_POSTAV_NUM}/{s26.SF_IN_NUM} " +
                            $"от {s26.SF_POSTAV_DATE.ToShortDateString()} ";
                        dtx.Document.DD_SPOST_DC = ctx.CurrentInvoice.DocCode;
                    }
                }

            var delBtn = schetEdit.Buttons.FirstOrDefault(_ => (string) _.Tag == "Del");
            if (delBtn != null) delBtn.IsEnabled = true;
            var addBtn = schetEdit.Buttons.FirstOrDefault(_ => (string) _.Tag == "Add");
            if (addBtn != null) addBtn.IsEnabled = false;
            var openBtn = schetEdit.Buttons.FirstOrDefault(_ => (string) _.Tag == "Open");
            if (openBtn != null) openBtn.IsEnabled = true;
            dtx.RaisePropertyChanged("IsCanSaveData");
            if (dtx.Document.State != RowStatus.NewRow)
                dtx.Document.myState = RowStatus.Edited;
            dtx.RaisePropertyChanged("Document");
            gridRows.RefreshData();
        }

        private void Sender_DefaultButtonClick(object sender, RoutedEventArgs e)
        {
            var ctx = DataContext as OrderInWindowViewModel;
            var doc = ctx?.Document;
            if (doc == null)
                return;
            switch (ctx.Document?.WarehouseSenderType)
            {
                case WarehouseSenderType.Kontragent:
                    var kontr = StandartDialogs.SelectKontragent();
                    if (kontr == null) return;
                    ctx.Document.KontragentSender = kontr;
                    warehouseTypeComboBoxEdit.IsEnabled = false;
                    ctx.RaisePropertyChanged("Document");
                    break;
                case WarehouseSenderType.Store:
                    var warehouse = StandartDialogs.SelectWarehouseDialog();
                    if (warehouse == null) return;
                    ctx.Document.WarehouseOut = warehouse;
                    var win = new WindowManager();
                    // ReSharper disable once PossibleUnintendedReferenceComparison
                    if (doc.WarehouseIn == doc.WarehouseOut)
                    {
                        win.ShowWinUIMessageBox("Отправитель и получатель не могут совпадать.", "Предупреждение",
                            MessageBoxButton.OK, MessageBoxImage.Warning, MessageBoxResult.OK, MessageBoxOptions.None);
                        doc.WarehouseOut = null;
                        return;
                    }

                    warehouseTypeComboBoxEdit.IsEnabled = false;
                    break;
            }
        }

        private void LayoutItems_OnAutoGeneratedUI(object sender, EventArgs e)
        {
            foreach (var item in WindowHelper.GetLogicalChildCollection<MemoEdit>(layoutHeaderItems))
                if (item.EditValue != null && !string.IsNullOrWhiteSpace((string) item.EditValue))
                    item.Height = 80;
        }

        private void Nomenkl_DefaultButtonClick(object sender, RoutedEventArgs e)
        {
            var ctx = DataContext as OrderInWindowViewModel;
            var doc = ctx?.Document;
            if (doc == null)
                return;
            var nomenkls = StandartDialogs.SelectNomenkls();
            if (nomenkls == null || nomenkls.Count <= 0) return;
            ctx.CurrentRow.Nomenkl = nomenkls.First();
        }
    }
}