using System;
using System.Linq;
using System.Windows;
using Core.WindowsManager;
using DevExpress.Data;
using DevExpress.Xpf.Editors;
using DevExpress.Xpf.Editors.Settings;
using DevExpress.Xpf.Grid;
using DevExpress.Xpf.LayoutControl;
using Helper;
using KursAM2.ViewModel.Logistiks.Warehouse;
using KursDomain;
using KursDomain.ICommon;
using KursDomain.References;
using LayoutManager;

namespace KursAM2.View.Logistiks.Warehouse
{
    /// <summary>
    ///     Interaction logic for OrderInView.xaml
    /// </summary>
    public partial class OrderOutView2 : ILayout
    {
        public DateEdit docDateEditor;
        public ComboBoxEdit comboWarehouseOut;
        public ComboBoxEdit comboWarehouseIn;

        public OrderOutView2()
        {
            InitializeComponent();
        }

        public LayoutManager.LayoutManager LayoutManager { get; set; }
        public string LayoutManagerName { get; set; }

        public void SaveLayout()
        {
            LayoutManager.Save();
        }

        private void GridRows_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            if (KursGridControlHelper.ColumnFieldTypeCheckDecimal(e.Column.FieldType))
                e.Column.EditSettings = new CalcEditSettings
                {
                    DisplayFormat = "n2",
                    Name = e.Column.FieldName + "Calc"
                };
            var ctx = DataContext as OrderOutWindowViewModel2;
            var doc = ctx?.Document;
            if (doc == null)
                // ReSharper disable once RedundantJumpStatement
                return;
            switch (e.Column.Name)
            {
                case "SHPZ":
                    e.Column.EditSettings = new ComboBoxEditSettings
                    {
                        ItemsSource = GlobalOptions.ReferencesCache.GetSDRSchetAll().Cast<SDRSchet>()
                            .OrderBy(_ => _.Name).ToList(),
                        DisplayMember = "Name",
                        AutoComplete = true
                    };
                    break;
            }
        }

        private void GridRows_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            if (gridRows.Bands != null && gridRows.Bands.Count > 0)
            {
                var bandid = 1;
                foreach (var b in gridRows.Bands)
                {
                    b.Name = "band" + bandid;
                    bandid++;
                }
            }

            gridRows.TotalSummary.Clear();
            foreach (var col in gridRows.Columns)
                if (KursGridControlHelper.ColumnFieldTypeCheckDecimal(col.FieldType))
                {
                    var summary = new GridSummaryItem
                    {
                        SummaryType = SummaryItemType.Sum,
                        ShowInColumn = col.FieldName,
                        DisplayFormat = "{0:n2}",
                        FieldName = col.FieldName
                    };
                    gridRows.TotalSummary.Add(summary);
                }

            LayoutManager = new LayoutManager.LayoutManager(GlobalOptions.KursSystem(), GetType().Name, this, gridRows);
        }

        private void LayoutItems_OnAutoGeneratingItem(object sender, DataLayoutControlAutoGeneratingItemEventArgs e)
        {
            try
            {
                var ctx = DataContext as OrderOutWindowViewModel2;
                var doc = ctx?.Document;
                if (doc == null)
                    return;
                var oldContent = e.Item.Content as BaseEdit;
                if (e.PropertyType == typeof(decimal) || e.PropertyType == typeof(decimal?))
                {
                    var newContent = new PopupCalcEdit
                    {
                        DisplayFormatString = "n2",
                        MaskUseAsDisplayFormat = true
                    };
                    BindingHelper.CopyBinding(oldContent, newContent, BaseEdit.EditValueProperty);
                    e.Item.Content = newContent;
                }

                switch (e.PropertyName)
                {
                    case nameof(doc.DocNum):
                        e.Item.IsReadOnly = true;
                        e.Item.Width = 250;
                        break;
                    case nameof(doc.DocExtNum):
                        e.Item.Width = 350;
                        break;
                    case nameof(doc.DocDate):
                        e.Item.Width = 158;
                        docDateEditor = e.Item.Content as DateEdit;
                        break;
                    case nameof(doc.WarehouseIn):
                        comboWarehouseIn= ViewFluentHelper.SetComboBoxEdit(e.Item, doc.WarehouseIn, "WarehouseIn",
                            GlobalOptions.ReferencesCache.GetWarehousesAll().Cast<KursDomain.References.Warehouse>()
                                .OrderBy(_ => _.Name).ToList());
                        e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                        e.Item.HorizontalContentAlignment = HorizontalAlignment.Left;
                        comboWarehouseIn.EditValueChanged += WInCB_EditValueChanged;
                        break;
                    case nameof(doc.WarehouseOut):
                        comboWarehouseOut = ViewFluentHelper.SetComboBoxEdit(e.Item, doc.WarehouseOut, "WarehouseOut",
                            GlobalOptions.ReferencesCache.GetWarehousesAll().Cast<KursDomain.References.Warehouse>()
                                .OrderBy(_ => _.Name).ToList());
                        e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                        e.Item.HorizontalContentAlignment = HorizontalAlignment.Left;
                        comboWarehouseOut.EditValueChanged += WOutCB_EditValueChanged;
                        break;
                    case nameof(doc.Creator):
                        e.Item.IsReadOnly = true;
                        e.Item.HorizontalAlignment = HorizontalAlignment.Right;
                        break;
                    case nameof(doc.State):
                        e.Item.IsReadOnly = true;
                        e.Item.Visibility = Visibility.Visible;
                        if (e.Item.Content is ComboBoxEdit cbState) cbState.AllowDefaultButton = false;
                        e.Item.HorizontalAlignment = HorizontalAlignment.Right;
                        break;
                    case nameof(doc.Note):
                        ViewFluentHelper.SetDefaultMemoEdit(e.Item);
                        e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                        e.Item.MinWidth = 300;
                        break;
                }

                ViewFluentHelper.SetModeUpdateProperties(doc, e.Item, e.PropertyName);
            }
            catch (Exception ex)
            {
                WindowManager.ShowError(ex);
            }
        }

        private void WOutCB_EditValueChanged(object sender, EditValueChangedEventArgs e)
        {
            var ctx = DataContext as OrderOutWindowViewModel2;
            var doc = ctx?.Document;
            if (doc == null)
                return;
            var win = new WindowManager();
            // ReSharper disable once PossibleUnintendedReferenceComparison
            if (doc.WarehouseIn == doc.WarehouseOut)
            {
                win.ShowWinUIMessageBox("Отправитель и получатель не могут совпадать.", "Предупреждение",
                    MessageBoxButton.OK, MessageBoxImage.Warning, MessageBoxResult.OK, MessageBoxOptions.None);
                doc.WarehouseOut = null;
            }
            doc.Model.DD_KLADOV_TN =
                doc.WarehouseOut?.StoreKeeper?.TabelNumber;
            doc.RaisePropertyChanged(nameof(doc.StoreKeeper));
        }

        private void WInCB_EditValueChanged(object sender, EditValueChangedEventArgs e)
        {
            var ctx = DataContext as OrderOutWindowViewModel2;
            var doc = ctx?.Document;
            if (doc == null)
                return;
            var win = new WindowManager();
            // ReSharper disable once PossibleUnintendedReferenceComparison
            if (doc.WarehouseIn == doc.WarehouseOut)
            {
                win.ShowWinUIMessageBox("Отправитель и получатель не могут совпадать.", "Предупреждение",
                    MessageBoxButton.OK, MessageBoxImage.Warning, MessageBoxResult.OK, MessageBoxOptions.None);
                doc.WarehouseIn = null;
            }

           
        }

        private void LayoutItems_OnAutoGeneratedUI(object sender, EventArgs e)
        {
        }

        private void TableViewRows_OnCellValueChanged(object sender, CellValueChangedEventArgs e)
        {
            var dtx = DataContext as OrderOutWindowViewModel2;
            if (dtx == null) return;
            if (e.Column.FieldName == "QuantityOut")
                if (dtx.CurrentRow.QuantityOut > dtx.CurrentRow.MaxQuantity)
                {
                    WindowManager.ShowMessage("Кол-во отгрузки первышает кол-ва на складе",
                        "Ошибка", MessageBoxImage.Stop);
                    dtx.CurrentRow.QuantityOut = (decimal)e.OldValue;
                }
        }

        private void gridRows_ItemsSourceChanged(object sender, DevExpress.Xpf.Grid.ItemsSourceChangedEventArgs e)
        {

        }
    }
}
