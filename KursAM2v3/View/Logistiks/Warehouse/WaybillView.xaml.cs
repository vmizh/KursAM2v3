using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using System.Windows.Data;
using Core;
using Core.EntityViewModel;
using Core.ViewModel.Base;
using Core.WindowsManager;
using DevExpress.Data;
using DevExpress.Xpf.Editors;
using DevExpress.Xpf.Editors.Settings;
using DevExpress.Xpf.Grid;
using DevExpress.Xpf.LayoutControl;
using Helper;
using KursAM2.Managers;
using KursAM2.ViewModel.Logistiks.Warehouse;
using LayoutManager;

namespace KursAM2.View.Logistiks.Warehouse
{
    /// <summary>
    ///     Расходная накладная для клиентов
    /// </summary>
    public partial class WaybillView : ILayout
    {
        private readonly LayoutManagerGridAutoGenerationColumns gridRowsLayout;
        private readonly WindowManager winManager = new WindowManager();
        public ButtonEdit SchetEdit;

        public WaybillView()
        {
            InitializeComponent();
            gridRowsLayout = new LayoutManagerGridAutoGenerationColumns(GetType().Name, gridRows);
            LayoutManager = new LayoutManager.LayoutManager(GetType().Name, this, null);
            Loaded += WaybillClientView_Loaded;
            Closing += WaybillClientView_Closing;
        }

        public LayoutManager.LayoutManager LayoutManager { get; set; }
        public string LayoutManagerName { get; set; }

        private void WaybillClientView_Closing(object sender, CancelEventArgs e)
        {
            LayoutManager.Save();
        }

        private void WaybillClientView_Loaded(object sender, RoutedEventArgs e)
        {
            LayoutManager.Load();
            gridRowsLayout.Save();
        }

        private void gridRows_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            if (KursGridControlHelper.ColumnFieldTypeCheckDecimal(e.Column.FieldType))
                e.Column.EditSettings = new CalcEditSettings
                {
                    DisplayFormat = "n2",
                    Name = e.Column.FieldName + "Calc"
                };
            var ctx = DataContext as WaybillWindowViewModel;
            var doc = ctx?.Document;
            if (doc == null)
                return;
            // ReSharper disable once LocalNameCapturedOnly
            // ReSharper disable once RedundantAssignment
            var row = new WaybillRow();
            switch (e.Column.Name)
            {
                case nameof(row.IsUsluga):
                    break;
            }
        }

        private void gridRows_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            gridRows.TotalSummary.Clear();
            foreach (var col in gridRows.Columns)
                if (col.FieldType == typeof(decimal) || col.FieldType == typeof(decimal?))
                {
                    col.EditSettings = new CalcEditSettings
                    {
                        AllowDefaultButton = true,
                        DisplayFormat = "n2"
                    };
                    var summary = new GridSummaryItem
                    {
                        SummaryType = SummaryItemType.Sum,
                        ShowInColumn = col.FieldName,
                        DisplayFormat = "{0:n2}",
                        FieldName = col.FieldName
                    };
                    gridRows.TotalSummary.Add(summary);
                }

            var columnsInfo = gridRowsLayout.Load();
            gridRows.TotalSummary.Clear();
            foreach (var col in gridRows.Columns)
                gridRowsLayout.AutoGeneratedColumnSetProperties(columnsInfo.ColumnsInfo, col);
            var dtx = DataContext as WaybillWindowViewModel;
            if (dtx?.Document == null) return;
            var delBtn = SchetEdit.Buttons.FirstOrDefault(_ => (string) _.Tag == "Del");
            var addBtn = SchetEdit.Buttons.FirstOrDefault(_ => (string) _.Tag == "Add");
            var openBtn = SchetEdit.Buttons.FirstOrDefault(_ => (string) _.Tag == "Open");
            if (dtx.Document.DD_SFACT_DC == null)
            {
                if (delBtn != null) delBtn.IsEnabled = false;
                if (addBtn != null) addBtn.IsEnabled = true;
                if (openBtn != null) openBtn.IsEnabled = false;
            }
            else
            {
                if (delBtn != null) delBtn.IsEnabled = true;
                if (addBtn != null) addBtn.IsEnabled = false;
                if (openBtn != null) openBtn.IsEnabled = true;
            }
        }

        private void LayoutItems_OnAutoGeneratingItem(object sender, DataLayoutControlAutoGeneratingItemEventArgs e)
        {
            var ctx = DataContext as WaybillWindowViewModel;
            var doc = ctx?.Document;
            if (doc == null)
                return;
            var oldContent = e.Item.Content as BaseEdit;
            if (e.PropertyType == typeof(decimal) || e.PropertyType == typeof(decimal?))
            {
                var newContent = new PopupCalcEdit
                {
                    DisplayFormatString = "n2",
                    MaskUseAsDisplayFormat = true
                };
                BindingHelper.CopyBinding(oldContent, newContent, BaseEdit.EditValueProperty);
                e.Item.Content = newContent;
            }

            switch (e.PropertyName)
            {
                case nameof(doc.Client):
                    var kontrEdit = new ButtonEdit
                    {
                        TextWrapping = TextWrapping.Wrap,
                        IsTextEditable = false,
                        Tag = e.PropertyName
                    };
                    kontrEdit.DefaultButtonClick += Client_DefaultButtonClick;
                    BindingHelper.CopyBinding(oldContent, kontrEdit, BaseEdit.EditValueProperty);
                    e.Item.Content = kontrEdit;
                    e.Item.MinWidth = 500;
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    break;
                case nameof(doc.DD_IN_NUM):
                    e.Item.IsReadOnly = true;
                    e.Item.Width = 250;
                    break;
                case nameof(doc.DD_DATE):
                    e.Item.Width = 150;
                    break;
                case nameof(doc.CREATOR):
                    e.Item.IsReadOnly = true;
                    e.Item.HorizontalAlignment = HorizontalAlignment.Right;
                    break;
                case "State":
                    e.Item.IsReadOnly = true;
                    if (e.Item.Content is ComboBoxEdit cbState) cbState.IsEnabled = false;
                    e.Item.HorizontalAlignment = HorizontalAlignment.Right;
                    break;
                case nameof(doc.InvoiceClient):
                    SchetEdit = new ButtonEdit
                    {
                        TextWrapping = TextWrapping.Wrap,
                        IsTextEditable = false,
                        AllowDefaultButton = false
                    };
                    var addSchet = new ButtonInfo
                    {
                        GlyphKind = GlyphKind.Regular,
                        ToolTip = "Установить связь со счетом",
                        Tag = "Add",
                        IsEnabled = false
                    };
                    if (ctx.Document.DD_SFACT_DC != null)
                        addSchet.IsEnabled = false;
                    addSchet.Click += Schet_DefaultButtonClick;
                    var delSchet = new ButtonInfo
                    {
                        GlyphKind = GlyphKind.Cancel,
                        ToolTip = "Удалить связь со счетом",
                        Tag = "Del",
                        IsEnabled = false
                    };
                    if (ctx.Document.DD_SFACT_DC == null)
                        delSchet.IsEnabled = false;
                    delSchet.Click += DelSchet_Click;
                    var openSchet = new ButtonInfo
                    {
                        GlyphKind = GlyphKind.Edit,
                        ToolTip = "Открыть счет",
                        Tag = "Open",
                        IsEnabled = false
                    };
                    openSchet.Click += OpenSchet_Click;
                    SchetEdit.Buttons.Add(addSchet);
                    SchetEdit.Buttons.Add(delSchet);
                    SchetEdit.Buttons.Add(openSchet);
                    BindingHelper.CopyBinding(oldContent, SchetEdit, BaseEdit.EditValueProperty);
                    e.Item.Content = SchetEdit;
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    e.Item.MinWidth = 600;
                    break;
                case nameof(doc.DD_NOTES):
                    ViewFluentHelper.SetDefaultMemoEdit(e.Item);
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    e.Item.MinWidth = 300;
                    break;
                case nameof(doc.WarehouseOut):
                    ViewFluentHelper.SetComboBoxEdit(e.Item, doc.WarehouseOut, "WarehouseOut",
                        MainReferences.Warehouses.Values.ToList().OrderBy(_ => _.Name));
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    e.Item.HorizontalContentAlignment = HorizontalAlignment.Left;
                    break;
                case nameof(doc.DD_KOMU_PEREDANO):
                    var cbp = new ComboBoxEdit
                    {
                        EditValue = doc.DD_KOMU_PEREDANO,
                        ItemsSource = ctx.ByWhomLicoList
                    };
                    cbp.SetBinding(LookUpEditBase.SelectedItemProperty,
                        new Binding {Path = new PropertyPath("DD_KOMU_PEREDANO")});
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    e.Item.HorizontalContentAlignment = HorizontalAlignment.Left;
                    e.Item.Content = cbp;
                    break;
            }

            ViewFluentHelper.SetModeUpdateProperties(doc, e.Item, e.PropertyName);
        }

        private void Client_DefaultButtonClick(object sender, RoutedEventArgs e)
        {
            if (!(DataContext is WaybillWindowViewModel dtx)) return;
            dtx.SelectKontragent(null);
        }

        private void Schet_DefaultButtonClick(object sender, RoutedEventArgs e)
        {
            if (!(DataContext is WaybillWindowViewModel dtx)) return;
            dtx.SFClientSelect(null);
        }

        private void LayoutItems_OnAutoGeneratedUI(object sender, EventArgs eventArgs)
        {
            foreach (var item in WindowHelper.GetLogicalChildCollection<MemoEdit>(layoutHeaderItems))
                if (item.EditValue != null && !string.IsNullOrWhiteSpace((string) item.EditValue))
                    item.Height = 80;
        }

        private void DelSchet_Click(object sender, RoutedEventArgs e)
        {
            if (winManager.ShowWinUIMessageBox(this,
                "Вы хотите удалить счет и связанные с ним строки?",
                "Запрос", MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.No) return;
            var dtx = DataContext as WaybillWindowViewModel;
            if (dtx == null) return;
            var delList =
                new List<WaybillRow>(dtx.Document.Rows.Where(_ => _.DDT_SFACT_DC == dtx.Document.DD_SFACT_DC));
            foreach (var r in delList)
            {
                if (r.State != RowStatus.NewRow) dtx.Document.DeletedRows.Add(r);
                dtx.Document.Rows.Remove(r);
            }

            dtx.Document.DD_SFACT_DC = null;
            dtx.Document.DD_SCHET = null;
            var delBtn = SchetEdit.Buttons.FirstOrDefault(_ => (string) _.Tag == "Del");
            if (delBtn != null) delBtn.IsEnabled = false;
            var addBtn = SchetEdit.Buttons.FirstOrDefault(_ => (string) _.Tag == "Add");
            if (addBtn != null) addBtn.IsEnabled = true;
            var openBtn = SchetEdit.Buttons.FirstOrDefault(_ => (string) _.Tag == "Open");
            if (openBtn != null) openBtn.IsEnabled = false;
        }

        private void OpenSchet_Click(object sender, RoutedEventArgs e)
        {
            var dtx = DataContext as WaybillWindowViewModel;
            if (dtx?.Document != null && dtx.Document.DD_SFACT_DC != null)
                // ReSharper disable once PossibleInvalidOperationException
                DocumentsOpenManager.Open(DocumentType.InvoiceClient, (decimal) dtx.Document.DD_SFACT_DC);
        }
    }
}