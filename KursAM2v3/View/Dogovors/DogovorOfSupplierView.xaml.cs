using System.Windows;
using DevExpress.Data;
using DevExpress.Xpf.Core;
using DevExpress.Xpf.Editors.Settings;
using DevExpress.Xpf.Grid;

namespace KursAM2.View.Dogovors
{
    /// <summary>
    ///     Interaction logic for DogovorOfSupplierView.xaml
    /// </summary>
    public partial class DogovorOfSupplierView
    {
        public DogovorOfSupplierView()
        {
            InitializeComponent(); 
            ApplicationThemeHelper.ApplicationThemeName = Theme.MetropolisLightName;
        }

        private void GridRows_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            switch (e.Column.FieldName)
            {
                case"Note":
                    e.Column.EditSettings = new TextEditSettings
                    {
                        AcceptsReturn = true,
                        TextWrapping = TextWrapping.Wrap
                    };
                    break;
                case"Price":
                case"Summa":
                    e.Column.EditSettings = new CalcEditSettings
                    {
                        DisplayFormat = "n2",
                        MaskUseAsDisplayFormat = true
                    };
                    break;
                case"NDSPercent":
                    e.Column.EditSettings = new CalcEditSettings
                    {
                        DisplayFormat = "n0",
                        MaskUseAsDisplayFormat = true
                    };
                    break;
                case"Quantity":
                    e.Column.EditSettings = new CalcEditSettings
                    {
                        DisplayFormat = "n1",
                        MaskUseAsDisplayFormat = true
                    };
                    break;
            }
        }

        private void GridRows_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            gridRows.TotalSummary.Clear();
            gridRows.TotalSummary.Add(new GridSummaryItem
            {
                SummaryType = SummaryItemType.Sum,
                DisplayFormat = "n2",
                FieldName = "Summa",
                ShowInColumn = "Summa"
            });
            gridRows.TotalSummary.Add(new GridSummaryItem
            {
                SummaryType = SummaryItemType.Sum,
                DisplayFormat = "n1",
                FieldName = "Quantity",
                ShowInColumn = "Quantity"
            });
            gridRows.TotalSummary.Add(new GridSummaryItem
            {
                SummaryType = SummaryItemType.Count,
                DisplayFormat = "n0",
                FieldName = "Nomenkl",
                ShowInColumn = "Nomenkl"
            });
        }

        private void GridFacts_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            e.Column.ReadOnly = true;
        }

        private void GridFacts_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            
        }

        private void GridDocs_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            e.Column.ReadOnly = true;
            switch (e.Column.Name)
            {
                case "Note":
                    e.Column.EditSettings = new TextEditSettings
                    {
                        AcceptsReturn = true,
                        TextWrapping = TextWrapping.Wrap
                    };
                    break;
            }
        }

        private void GridDocs_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            
        }

        private void GridPays_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            e.Column.ReadOnly = true;
        }

        private void GridPays_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            
        }

        private void GridResults_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            
        }

        private void GridResults_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            
        }
    }
}
