using System.Linq;
using System.Windows;
using DevExpress.Data;
using DevExpress.Xpf.Core;
using DevExpress.Xpf.Editors;
using DevExpress.Xpf.Editors.Settings;
using DevExpress.Xpf.Grid;
using KursAM2.ViewModel.Dogovora;

namespace KursAM2.View.Dogovors
{
    /// <summary>
    ///     Interaction logic for DogovorClientView.xaml
    /// </summary>
    public partial class DogovorClientView
    {
        public DogovorClientView()
        {
            InitializeComponent(); 
            
            EventManager.RegisterClassHandler(typeof(TextEdit), GotFocusEvent,
                new RoutedEventHandler((s, e) =>
                {
                    var editor = (TextEdit) s;
                    editor.Dispatcher.BeginInvoke(new SimpleDelegate(editor.SelectAll));
                }));
            EventManager.RegisterClassHandler(typeof(CalcEditSettings), GotFocusEvent,
                new RoutedEventHandler((s, e) =>
                {
                    var editor = (TextEdit) s;
                    editor.Dispatcher.BeginInvoke(new SimpleDelegate(editor.SelectAll));
                }));
        }

        private void GridRows_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            switch (e.Column.FieldName)
            {
               case "Nomenkl":
                    var nomenklEdit = new ComboBoxEditSettings
                    {
                        Name = "PART_Editor",
                        TextWrapping = TextWrapping.Wrap,
                        IsTextEditable = false
                    };
                    e.Column.EditSettings = nomenklEdit;
                    break;
                case "Summa":
                case "NDSSumma":
                case "Quantity":
                case "Price":
                    e.Column.EditSettings = new CalcEditSettings
                    {
                        DisplayFormat = "n2",
                        MaskUseAsDisplayFormat = true
                    };
                    break;
            }
        }

        private void GridRows_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            gridRows.TotalSummary.Clear();
            gridRows.TotalSummary.Add(new GridSummaryItem
            {
                SummaryType = SummaryItemType.Sum,
                ShowInColumn = "Summa",
                DisplayFormat = "{0:n2}",
                FieldName = "Summa"
            });
            gridRows.TotalSummary.Add(new GridSummaryItem
            {
                SummaryType = SummaryItemType.Sum,
                ShowInColumn = "NDSSumma",
                DisplayFormat = "{0:n2}",
                FieldName = "NDSSumma"
            });
            gridRows.TotalSummary.Add(new GridSummaryItem
            {
                SummaryType = SummaryItemType.Sum,
                ShowInColumn = "Quantity",
                DisplayFormat = "{0:n4}",
                FieldName = "Quantity"
            });
            gridRows.TotalSummary.Add(new GridSummaryItem
            {
                SummaryType = SummaryItemType.Count,
                ShowInColumn = "Nomenkl",
                DisplayFormat = "{0:n0}",
                FieldName = "Nomenkl"
            });
        }

        private void SetVisual()
        {
            var dtx = DataContext as DogovorClientWindowViewModel;
            if (dtx == null || dtx.CurrentRow == null) return;
            var colPrice = gridRows.Columns.First(_ => _.FieldName == "Price");
            var colSumma = gridRows.Columns.First(_ => _.FieldName == "Summa");
            if (dtx.CurrentRow.IsCalcBack)
            {
                colPrice.ReadOnly = true;
                colSumma.ReadOnly = false;
            }
            else
            {
                colPrice.ReadOnly = false;
                colSumma.ReadOnly = true;
            }
        }

        private void CheckEdit_EditValueChanged(object sender, EditValueChangedEventArgs e)
        {
            SetVisual();
        }

        private void tableViewRows_CellValueChanged(object sender, CellValueChangedEventArgs e)
        {
            switch (e.Column.FieldName)
            {
                case "IsCalcBack":
                    SetVisual();
                    break;
            }

            gridRows.UpdateTotalSummary();
            if (DataContext is DogovorClientWindowViewModel dtx) dtx.RaisePropertyChanged("WindowName");
        }

        private void GridRows_OnCurrentItemChanged(object sender, CurrentItemChangedEventArgs e)
        {
            SetVisual();
        }

        private void GridFacts_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            e.Column.ReadOnly = true;
            switch (e.Column.FieldName)
            {
                case "Summa":
                case "Quantity":
                case "Price":
                    e.Column.EditSettings = new CalcEditSettings
                    {
                        DisplayFormat = "n2",
                        MaskUseAsDisplayFormat = true,
                        AllowDefaultButton = false
                    };
                    break;
            }
        }

        private void GridFacts_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            gridFacts.TotalSummary.Clear();
            gridFacts.TotalSummary.Add(new GridSummaryItem
            {
                SummaryType = SummaryItemType.Sum,
                ShowInColumn = "Summa",
                DisplayFormat = "{0:n2}",
                FieldName = "Summa"
            });
            gridFacts.TotalSummary.Add(new GridSummaryItem
            {
                SummaryType = SummaryItemType.Sum,
                ShowInColumn = "Quantity",
                DisplayFormat = "{0:n4}",
                FieldName = "Quantity"
            });
            gridFacts.TotalSummary.Add(new GridSummaryItem
            {
                SummaryType = SummaryItemType.Count,
                ShowInColumn = "Nomenkl",
                DisplayFormat = "{n0}",
                FieldName = "Nomenkl"
            });
        }

        private void GridDocs_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            e.Column.ReadOnly = true;
            switch (e.Column.FieldName)
            {
                case "Summa":
                    e.Column.EditSettings = new CalcEditSettings
                    {
                        DisplayFormat = "n2",
                        MaskUseAsDisplayFormat = true,
                        AllowDefaultButton = false
                    };
                    break;
            }
        }

        private void GridDocs_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            gridFacts.TotalSummary.Clear();
            gridFacts.TotalSummary.Add(new GridSummaryItem
            {
                SummaryType = SummaryItemType.Sum,
                ShowInColumn = "Summa",
                DisplayFormat = "{0:n2}",
                FieldName = "Summa"
            });
        }

        private void tableViewFacts_CellValueChanged(object sender, CellValueChangedEventArgs e)
        {
            gridFacts.UpdateTotalSummary();
            if (DataContext is DogovorClientWindowViewModel dtx) dtx.RaisePropertyChanged("WindowName");
        }

        private void tableViewDocs_CellValueChanged(object sender, CellValueChangedEventArgs e)
        {
            gridDocuments.UpdateTotalSummary();
        }

        private void GridPays_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            e.Column.ReadOnly = true;
            switch (e.Column.FieldName)
            {
                case "Summa":
                    e.Column.EditSettings = new CalcEditSettings
                    {
                        DisplayFormat = "n2",
                        MaskUseAsDisplayFormat = true,
                        AllowDefaultButton = false
                    };
                    break;
            }
        }

        private void GridPays_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            gridFacts.TotalSummary.Clear();
            gridFacts.TotalSummary.Add(new GridSummaryItem
            {
                SummaryType = SummaryItemType.Sum,
                ShowInColumn = "Summa",
                DisplayFormat = "{0:n2}",
                FieldName = "Summa"
            });
        }

        private void tableViewPays_CellValueChanged(object sender, CellValueChangedEventArgs e)
        {
            gridPays.UpdateTotalSummary();
            if (DataContext is DogovorClientWindowViewModel dtx) dtx.RaisePropertyChanged("WindowName");
        }

        private delegate void SimpleDelegate();
        
        private void GridResults_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            e.Column.ReadOnly = true;
            switch (e.Column.FieldName)
            {
                case "DogSumma":
                case "SummaFact":
                case "Result":
                case "ResultWithNaklad":
                case "Cost":
                case "CostWithNaklad":
                case "DogPrice":
                case "PriceFact":
                    e.Column.EditSettings = new CalcEditSettings
                    {
                        DisplayFormat = "n2",
                        MaskUseAsDisplayFormat = true,
                        AllowDefaultButton = false
                    };
                    break;
                case "QuantityDog":
                case "QuantityFact":
                    e.Column.EditSettings = new CalcEditSettings
                    {
                        DisplayFormat = "n4",
                        MaskUseAsDisplayFormat = true,
                        AllowDefaultButton = false
                    };
                    break;
            }
        }

        private void GridResults_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            gridResults.TotalSummary.Clear();
            gridResults.TotalSummary.Add(new GridSummaryItem
            {
                SummaryType = SummaryItemType.Sum,
                ShowInColumn = "DogSumma",
                DisplayFormat = "{0:n2}",
                FieldName = "DogSumma"
            });
            gridResults.TotalSummary.Add(new GridSummaryItem
            {
                SummaryType = SummaryItemType.Sum,
                ShowInColumn = "SummaFact",
                DisplayFormat = "{0:n2}",
                FieldName = "SummaFact"
            });
            gridResults.TotalSummary.Add(new GridSummaryItem
            {
                SummaryType = SummaryItemType.Sum,
                ShowInColumn = "Result",
                DisplayFormat = "{0:n2}",
                FieldName = "Result"
            });
            gridResults.TotalSummary.Add(new GridSummaryItem
            {
                SummaryType = SummaryItemType.Sum,
                ShowInColumn = "ResultWithNaklad",
                DisplayFormat = "{0:n2}",
                FieldName = "ResultWithNaklad"
            });
            gridResults.TotalSummary.Add(new GridSummaryItem
            {
                SummaryType = SummaryItemType.Sum,
                ShowInColumn = "Nomenkl",
                DisplayFormat = "{0:n0}",
                FieldName = "Nomenkl"
            });
        }

        private void tableViewResults_CellValueChanged(object sender, CellValueChangedEventArgs e)
        {
            gridResults.UpdateTotalSummary();
        }
    }
}
