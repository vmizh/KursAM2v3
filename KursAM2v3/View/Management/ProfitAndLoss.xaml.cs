using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Media;
using DevExpress.Data;
using DevExpress.Xpf.Core;
using DevExpress.Xpf.Grid;
using Helper;
using KursAM2.ViewModel.Management;

namespace KursAM2.View.Management
{
    /// <summary>
    ///     Interaction logic for ProfitAndLoss.xaml
    /// </summary>
    public partial class ProfitAndLoss : ThemedWindow
    {
        public ProfitAndLoss()
        {
            InitializeComponent();
        }

        private void LayoutTabs_OnSelectedTabChildChanged(object sender, ValueChangedEventArgs<FrameworkElement> e)
        {
            if (!(DataContext is ProfitAndLossesWindowViewModel2 ctx)) return;
            switch (e.NewValue.Name)
            {
                case "LayoutGroupBalans":
                    ctx.UpdateExtend();
                    dateStartBorder.BorderThickness = new Thickness(1, 1, 1, 1);
                    dateEndBorder.BorderThickness = new Thickness(1, 1, 1, 1);
                    dateStartBorder.BorderBrush = Brushes.Black;
                    dateEndBorder.BorderBrush = Brushes.Black;
                    break;
                case "LayoutGroupFact":
                    ctx.UpdateExtend2();
                    dateStartBorder.BorderThickness = new Thickness(2, 2, 2, 2);
                    dateEndBorder.BorderThickness = new Thickness(2, 2, 2, 2);
                    dateStartBorder.BorderBrush = Brushes.Red;
                    dateEndBorder.BorderBrush = Brushes.Red;
                    break;
            }
        }

        private void TreeList_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            e.Column.ReadOnly = true;
        }

        private void TreeList_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            var i = 0;
            foreach (var b in treeListMain.Bands)
            {
                b.Name = "Band_" + i;
                i++;
            }

            var j = 0;
            foreach (var b in treeListMainNach1.Bands)
            {
                b.Name = "Band_" + j;
                j++;
            }
        }

        private void GridControlVzaimozachetExtend_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            e.Column.ReadOnly = true;
        }

        private void GridControlVzaimozachetExtend_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            var i = 0;
            foreach (var b in GridControlVzaimozachetExtend.Bands)
            {
                b.Name = "Band_" + i;
                i++;
            }
        }

        private void GridControlCurrencyConvert_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            e.Column.ReadOnly = true;
        }

        private void GridControlCurrencyConvert_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            var i = 0;
            foreach (var b in GridControlCurrencyConvert.Bands)
            {
                b.Name = "Band_" + i;
                i++;
            }
            
            var sums = GridControlCurrencyConvert.TotalSummary.GetForName("Rate");
            if (sums.Any() )
                GridControlCurrencyConvert.TotalSummary.Remove(sums.First());
        }

        private void GridControlBaseExtend_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            e.Column.ReadOnly = true;
        }

        private void GridControlBaseExtend_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            var i = 0;
            foreach (var b in GridControlBaseExtend.Bands)
            {
                b.Name = "Band_" + i;
                i++;
            }

            var cols = GridControlBaseExtend.Columns
                .Where(col => col.FieldName == "AktZachetResult").ToList();
            foreach (var col in cols) col.Visible = false;
        }
    }
}
