using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Linq;
using System.Windows;
using System.Windows.Data;
using System.Windows.Markup;
using System.Windows.Media;
using Core;
using DevExpress.Xpf.Core;
using DevExpress.Xpf.Grid;
using KursAM2.ViewModel.Management.BreakEven;
using LayoutManager;

namespace KursAM2.View.Management
{
    /// <summary>
    ///     Interaction logic for BreakEvenForm.xaml
    /// </summary>
    public partial class BreakEvenForm : ILayout
    {

        public BreakEvenForm()
        {
            InitializeComponent();
            NomGroup = new BreakEvenNomGroupViewModel();
            LayoutManager = new LayoutManager.LayoutManager(GetType().Name, this, mainLayoutControl);
            Closing += BreakEvenForm_Closing;
            Loaded += BreakEvenForm_Loaded;
            Title = "Рентабельность. База данных " + GlobalOptions.DataBaseName;
        }

        public BreakEvenNomGroupViewModel NomGroup { set; get; }


        public LayoutManagerBase LayoutManager { get; set; }

        private void BreakEvenForm_Loaded(object sender, RoutedEventArgs e)
        {
            LayoutManager.Load();
        }

        private void BreakEvenForm_Closing(object sender, CancelEventArgs e)
        {
            LayoutManager.Save();
        }

        private void NomenklTableView_FocusedRowChanged(object sender,
            SelectedItemChangedEventArgs selectedItemChangedEventArgs)
        {
            var ctx = DataContext as BreakEvenWindowViewModel;
            if (ctx == null) return;
            var row = selectedItemChangedEventArgs.NewItem as BreakEvenNomGroupViewModel;
            if (row == null) return;
            ctx.UpdateDocForNomenkl(row.NomenklNumber);
            gridDocument.RefreshData();
            gridCurrencyDocument.RefreshData();
        }

        private void COTableView_FocusedRowChanged(object sender,
            SelectedItemChangedEventArgs selectedItemChangedEventArgs)
        {
            var ctx = DataContext as BreakEvenWindowViewModel;
            if (ctx == null) return;
            var row = selectedItemChangedEventArgs.NewItem as CommonRow;
            if (row == null) return;
            ctx.DocumentGroup.Clear();
            ctx.DocumentCurrencyGroup.Clear();
            foreach (var d in ctx.DataAll.Where(t => t.CentrOfResponsibility.Name == row.Name))
            {
                ctx.DocumentGroup.Add(new DocumentRow
                {
                    COName = d.CentrOfResponsibility.Name,
                    Date = d.Date,
                    DilerName = d.Diler,
                    DilerSumma = d.DilerSumma,
                    IsUsluga = d.IsUsluga,
                    KontragentName = d.Kontragent,
                    KontrSummaCrs = d.KontrSummaCrs,
                    Price = d.Price,
                    KontrSumma = d.KontrSumma,
                    ManagerName = d.Manager,
                    Naklad = d.Naklad,
                    NomenklViewModel = MainReferences.GetNomenkl(d.NomenklViewModel.DocCode),
                    NomenklSumWOReva = Math.Round(d.KontrSummaCrs - d.SummaNomenkl - d.DilerSumma, 2),
                    OperCrsName = d.OperCrsName,
                    Quantity = d.Quantity,
                    Schet = d.Schet,
                    SummaNomenkl = d.SummaNomenkl,
                    SummaNomenklCrs = d.SummaNomenklCrs
                });
                ctx.DocumentCurrencyGroup.Add(new DocumentRow
                {
                    COName = d.CentrOfResponsibility.Name,
                    Date = d.Date,
                    DilerName = d.Diler,
                    DilerSumma = d.DilerSumma,
                    IsUsluga = d.IsUsluga,
                    KontragentName = d.Kontragent,
                    KontrSummaCrs = d.KontrSummaCrs,
                    Price = d.Price,
                    KontrSumma = d.KontrSumma,
                    ManagerName = d.Manager,
                    Naklad = d.Naklad,
                    NomenklViewModel = d.NomenklViewModel,
                    NomenklSumWOReva = Math.Round(d.KontrSummaCrs - d.SummaNomenkl - d.DilerSumma, 2),
                    OperCrsName = d.OperCrsName,
                    Quantity = d.Quantity,
                    Schet = d.Schet,
                    SummaNomenkl = d.SummaNomenkl,
                    SummaNomenklCrs = d.SummaNomenklCrs,
                    SummaOperNomenkl = d.SummaOperNomenkl,
                    KontrOperSummaCrs = d.KontrOperSummaCrs,
                    SummaOperNomenklCrs = d.SummaOperNomenklCrs,
                    ResultEUR =
                        d.OperCurrency.Name == "EUR"
                            ? Math.Round(d.KontrSumma - d.SummaOperNomenklCrs - d.DilerSumma, 2)
                            : 0,
                    ResultRUB =
                        (d.OperCurrency.Name == "RUB") || (d.OperCurrency.Name == "RUR")
                            ? Math.Round(d.KontrSumma - d.SummaOperNomenklCrs - d.DilerSumma, 2)
                            : 0,
                    ResultUSD =
                        d.OperCurrency.Name == "USD"
                            ? Math.Round(d.KontrSumma - d.SummaOperNomenklCrs - d.DilerSumma, 2)
                            : 0
                });
            }
            gridDocument.RefreshData();
            gridCurrencyDocument.RefreshData();
        }

        private void ManagerTableView_FocusedRowChanged(object sender,
            SelectedItemChangedEventArgs selectedItemChangedEventArgs)
        {
            var ctx = DataContext as BreakEvenWindowViewModel;
            if (ctx == null) return;
            var row = selectedItemChangedEventArgs.NewItem as CommonRow;
            if (row == null) return;
            ctx.DocumentGroup.Clear();
            ctx.DocumentCurrencyGroup.Clear();
            foreach (var d in ctx.DataAll.Where(t => t.Manager == row.Name))
            {
                ctx.DocumentGroup.Add(new DocumentRow
                {
                    COName = d.CentrOfResponsibility.Name,
                    Date = d.Date,
                    DilerName = d.Diler,
                    DilerSumma = d.DilerSumma,
                    IsUsluga = d.IsUsluga,
                    KontragentName = d.Kontragent,
                    KontrSummaCrs = d.KontrSummaCrs,
                    Price = d.Price,
                    KontrSumma = d.KontrSumma,
                    ManagerName = d.Manager,
                    Naklad = d.Naklad,
                    NomenklViewModel = MainReferences.GetNomenkl(d.NomenklViewModel.DocCode),
                    NomenklSumWOReva = Math.Round(d.KontrSummaCrs - d.SummaNomenkl - d.DilerSumma, 2),
                    OperCrsName = d.OperCrsName,
                    Quantity = d.Quantity,
                    Schet = d.Schet,
                    SummaNomenkl = d.SummaNomenkl,
                    SummaNomenklCrs = d.SummaNomenklCrs
                });
                ctx.DocumentCurrencyGroup.Add(new DocumentRow
                {
                    COName = d.CentrOfResponsibility.Name,
                    Date = d.Date,
                    DilerName = d.Diler,
                    DilerSumma = d.DilerSumma,
                    IsUsluga = d.IsUsluga,
                    KontragentName = d.Kontragent,
                    KontrSummaCrs = d.KontrSummaCrs,
                    Price = d.Price,
                    KontrSumma = d.KontrSumma,
                    ManagerName = d.Manager,
                    Naklad = d.Naklad,
                    NomenklViewModel = d.NomenklViewModel,
                    NomenklSumWOReva = Math.Round(d.KontrSummaCrs - d.SummaNomenkl - d.DilerSumma, 2),
                    OperCrsName = d.OperCrsName,
                    Quantity = d.Quantity,
                    Schet = d.Schet,
                    SummaNomenkl = d.SummaNomenkl,
                    SummaNomenklCrs = d.SummaNomenklCrs,
                    SummaOperNomenkl = d.SummaOperNomenkl,
                    KontrOperSummaCrs = d.KontrOperSummaCrs,
                    SummaOperNomenklCrs = d.SummaOperNomenklCrs,
                    ResultEUR =
                        d.OperCurrency.Name == "EUR"
                            ? Math.Round(d.KontrSumma - d.SummaOperNomenklCrs - d.DilerSumma, 2)
                            : 0,
                    ResultRUB =
                        (d.OperCurrency.Name == "RUB") || (d.OperCurrency.Name == "RUR")
                            ? Math.Round(d.KontrSumma - d.SummaOperNomenklCrs - d.DilerSumma, 2)
                            : 0,
                    ResultUSD =
                        d.OperCurrency.Name == "USD"
                            ? Math.Round(d.KontrSumma - d.SummaOperNomenklCrs - d.DilerSumma, 2)
                            : 0
                });
            }
            gridDocument.RefreshData();
            gridCurrencyDocument.RefreshData();
        }

        private void KontrTableView_FocusedRowChanged(object sender,
            SelectedItemChangedEventArgs selectedItemChangedEventArgs)
        {
            var ctx = DataContext as BreakEvenWindowViewModel;
            if (ctx == null) return;
            var row = selectedItemChangedEventArgs.NewItem as CommonRow;
            if (row == null) return;
            ctx.DocumentGroup.Clear();
            foreach (var d in ctx.DataAll.Where(t => t.Kontragent == row.Name))
            {
                ctx.DocumentGroup.Add(new DocumentRow
                {
                    COName = d.CentrOfResponsibility.Name,
                    Date = d.Date,
                    DilerName = d.Diler,
                    DilerSumma = d.DilerSumma,
                    IsUsluga = d.IsUsluga,
                    KontragentName = d.Kontragent,
                    KontrSummaCrs = d.KontrSummaCrs,
                    Price = d.Price,
                    KontrSumma = d.KontrSumma,
                    ManagerName = d.Manager,
                    Naklad = d.Naklad,
                    NomenklViewModel = MainReferences.GetNomenkl(d.NomenklViewModel.DocCode),
                    NomenklSumWOReva = Math.Round(d.KontrSummaCrs - d.SummaNomenkl - d.DilerSumma, 2),
                    OperCrsName = d.OperCrsName,
                    Quantity = d.Quantity,
                    Schet = d.Schet,
                    SummaNomenkl = d.SummaNomenkl,
                    SummaNomenklCrs = d.SummaNomenklCrs
                });
                ctx.DocumentCurrencyGroup.Add(new DocumentRow
                {
                    COName = d.CentrOfResponsibility.Name,
                    Date = d.Date,
                    DilerName = d.Diler,
                    DilerSumma = d.DilerSumma,
                    IsUsluga = d.IsUsluga,
                    KontragentName = d.Kontragent,
                    KontrSummaCrs = d.KontrSummaCrs,
                    Price = d.Price,
                    KontrSumma = d.KontrSumma,
                    ManagerName = d.Manager,
                    Naklad = d.Naklad,
                    NomenklViewModel = d.NomenklViewModel,
                    NomenklSumWOReva = Math.Round(d.KontrSummaCrs - d.NomenklSumWOReval, 2),
                    OperCrsName = d.OperCrsName,
                    Quantity = d.Quantity,
                    Schet = d.Schet,
                    SummaNomenkl = d.SummaNomenkl,
                    SummaNomenklCrs = d.SummaNomenklCrs,
                    SummaOperNomenkl = d.SummaOperNomenkl,
                    KontrOperSummaCrs = d.KontrOperSummaCrs,
                    SummaOperNomenklCrs = d.SummaOperNomenklCrs,
                    ResultEUR = d.OperCurrency.Name == "EUR" ? Math.Round(d.KontrSumma - d.SummaOperNomenklCrs, 2) : 0,
                    ResultRUB =
                        (d.OperCurrency.Name == "RUB") || (d.OperCurrency.Name == "RUR")
                            ? Math.Round(d.KontrSumma - d.SummaOperNomenklCrs, 2)
                            : 0,
                    ResultUSD = d.OperCurrency.Name == "USD" ? Math.Round(d.KontrSumma - d.SummaOperNomenklCrs, 2) : 0
                });
            }
            gridDocument.RefreshData();
        }

        private void tabsView_SelectedTabChildChanged(object sender, ValueChangedEventArgs<FrameworkElement> e)
        {
            var ctx = DataContext as BreakEvenWindowViewModel;
            if (ctx == null) return;
            ctx.DocumentGroup.Clear();
            ctx.DocumentCurrencyGroup.Clear();
            gridDocument.RefreshData();
            gridCurrencyDocument.RefreshData();
        }
    }

    public class DecimalToColorConverter : MarkupExtension, IValueConverter
    {
        public override object ProvideValue(IServiceProvider serviceProvider)
        {
            return this;
        }

        #region IValueConverter Members

        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            var summaryList = (List<GridTotalSummaryData>) value;
            if ((summaryList == null) || (summaryList.Count == 0))
                return null;

            var sumValue = System.Convert.ToInt32(summaryList[0].Value);
            if (sumValue < 0)
                return new SolidColorBrush(Colors.Red);

            return new SolidColorBrush(Colors.Black);
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }

        #endregion
    }
}