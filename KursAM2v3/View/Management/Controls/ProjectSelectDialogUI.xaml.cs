using System.Linq;
using System.Windows;
using System.Windows.Input;
using Core;
using Core.ViewModel.Base;
using DevExpress.Data;
using DevExpress.Xpf.Editors.Settings;
using DevExpress.Xpf.Grid;
using DevExpress.XtraGrid;
using KursAM2.View.DialogUserControl;
using KursAM2.ViewModel.Management.Projects;
using LayoutManager;

namespace KursAM2.View.Management.Controls
{
    /// <summary>
    ///     Interaction logic for ProjectSelectDialogUI.xaml
    /// </summary>
    public partial class ProjectSelectDialogUI : IDataUserControl
    {
        private readonly LayoutManagerGridAutoGenerationColumns gridDocuments;
        public ProjectSelectDialogUI()
        {
            InitializeComponent();
            LayoutManager = new LayoutManager.LayoutManager(GetType().Name, gridDocument);
            LayoutControl = LayoutControl;
            gridDocuments = new LayoutManagerGridAutoGenerationColumns(GetType().Name, gridDocument);
            Loaded += ProjectSelectDialogUI_Loaded;
            Unloaded += ProjectSelectDialogUI_Unloaded;
        }

        public LayoutManagerBase LayoutManager { get; set; }
        public DependencyObject LayoutControl { get; }

        private void ProjectSelectDialogUI_Unloaded(object sender, RoutedEventArgs e)
        {
            gridDocuments.Save();
        }

        private void ProjectSelectDialogUI_Loaded(object sender, RoutedEventArgs e)
        {
            //gridDocuments.Load();
        }

        private void OnColumnsGenerated(object sender, RoutedEventArgs e)
        {
            gridDocument.SelectionMode = MultiSelectMode.Row;
            gridDocument.TotalSummary.Clear();
            foreach (var col in gridDocument.Columns)
            {
                if (col.FieldType != typeof(decimal) && col.FieldType != typeof(decimal?)
                                                     && col.FieldType != typeof(double) &&
                                                     col.FieldType != typeof(double?))
                {
                    if (col.Name != "ConfirmedSum" && col.Name != "Sum")
                    {
                        gridDocument.TotalSummary.Add(new GridSummaryItem
                        {
                            SummaryType = SummaryItemType.Sum,
                            ShowInColumn = col.FieldName,
                            DisplayFormat = "{0:n2}",
                            FieldName = col.FieldName
                        });
                    }
                }
            }
            var columnsInfo = gridDocuments.Load();
            gridDocument.TotalSummary.Clear();
            foreach (var col in gridDocument.Columns)
                gridDocuments.AutoGeneratedColumnSetProperties(columnsInfo.ColumnsInfo, col);

        }

        private void OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            if (e.Column.FieldType != typeof(decimal) && e.Column.FieldType != typeof(decimal?)
                                                      && e.Column.FieldType != typeof(double) &&
                                                      e.Column.FieldType != typeof(double?))
                e.Column.SortMode = ColumnSortMode.DisplayText;
            if (e.Column.FieldType == typeof(decimal) || e.Column.FieldType == typeof(decimal?))
            {
                e.Column.EditSettings = new CalcEditSettings
                {
                    AllowDefaultButton = true,
                    DisplayFormat = "n2"
                };
            }
        }

        private void GridViewProject_OnMouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            var ctx = DataContext as ProjectDocumentSelect;
            if (ctx?.CurrentDocument == null) return;
            ctx.CurrentDocument.IsSelected = !ctx.CurrentDocument.IsSelected;
        }

        private void GridDocument_OnCurrentItemChanged(object sender, CurrentItemChangedEventArgs e)
        {
            if (!(e.NewItem is ProjectDocumentSelectViewModel item)) return;
            if (item.DocType == DocumentType.Bank || item.DocType == DocumentType.CashIn ||
                item.DocType == DocumentType.CashOut)
            {
                var col = gridDocument.Columns.FirstOrDefault(_ => _.FieldName == "ConfirmedSum");
                if (col == null) return;
                col.ReadOnly = false;
            }
            else
            {
                var col = gridDocument.Columns.FirstOrDefault(_ => _.FieldName == "ConfirmedSum");
                if (col == null) return;
                col.ReadOnly = true;
            }
        }
    }
}