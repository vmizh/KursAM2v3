using System;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using System.Windows.Media;
using Core;
using DevExpress.Data;
using DevExpress.Xpf.Core;
using DevExpress.Xpf.Grid;
using KursAM2.ViewModel.Management;
using LayoutManager;

namespace KursAM2.View.Management
{
    /// <summary>
    ///     Interaction logic for ProfitAndLosses.xaml
    /// </summary>
    public partial class ProfitAndLosses : ILayout
    {
        private readonly int maxLengthSumm = 0;

        public ProfitAndLosses()
        {
            InitializeComponent(); ApplicationThemeHelper.ApplicationThemeName = Theme.MetropolisLightName;
            LayoutManager = new LayoutManager.LayoutManager(GetType().Name, this, mainLayoutControl);
            Closing += OnClosing;
            Loaded += ProfitAndLosses_Loaded;
            DataContextChanged += ManagementBalansView_DataContextChanged;
        }

        public LayoutManager.LayoutManager LayoutManager { get; set; }
        public string LayoutManagerName { get; set; }
        public void SaveLayout()
        {
            LayoutManager.Save();
        }

        private void ManagementBalansView_DataContextChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
            if (DataContext is ProfitAndLossesWindowViewModel ctx)
                // ReSharper disable once PossibleNullReferenceException
                Dispatcher.BeginInvoke((Action) (() => rateCrsRecalc.EditValue =
                    ctx.CurrenciesForRecalc.First(_ => _.Name == "RUR" || _.Name == "RUB")));
        }

        private void ProfitAndLosses_Loaded(object sender, RoutedEventArgs e)
        {
            Title = "Прибыли и убытки. База данных " + GlobalOptions.DataBaseName;
            LayoutManager.Load();
        }

        private void OnClosing(object sender, CancelEventArgs cancelEventArgs)
        {
            LayoutManager.Save();
        }

        private void GridControlMain_OnSelectedItemChanged(object sender, SelectedItemChangedEventArgs e)
        {
            if (!(DataContext is ProfitAndLossesWindowViewModel ctx)) return;
            if (e.NewItem is ProfitAndLossesMainRowViewModel v) ctx.UpdateExtend(v.Id);
            if (!(e.NewItem is ProfitAndLossesMainRowViewModel item))
            {
                col124.Visible = false;
                return;
            }
            col124.Visible = item.Name == "Финансовые операции";
            
        }

        private void GridControlMain_OnSelectedItemChanged2(object sender, SelectedItemChangedEventArgs e)
        {
            if (!(DataContext is ProfitAndLossesWindowViewModel ctx)) return;
            if (e.NewItem is ProfitAndLossesMainRowViewModel v) ctx.UpdateExtend2(v.Id);
            if (!(e.NewItem is ProfitAndLossesMainRowViewModel item))
            {
                col124.Visible = false;
                return;
            }
            col124.Visible = item.Name == "Финансовые операции";
        }

        private void LayoutTabs_OnSelectedTabChildChanged(object sender, ValueChangedEventArgs<FrameworkElement> e)
        {
            if (!(DataContext is ProfitAndLossesWindowViewModel ctx)) return;
            if (e.NewValue.Name == "LayoutGroupBalans")
            {
                ctx.UpdateExtend();
                dateStartBorder.BorderThickness = new Thickness(1, 1, 1, 1);
                dateEndBorder.BorderThickness = new Thickness(1, 1, 1, 1);
                dateStartBorder.BorderBrush = Brushes.Black;
                dateEndBorder.BorderBrush = Brushes.Black;
            }
            if (e.NewValue.Name == "LayoutGroupFact")
            {
                ctx.UpdateExtend2();
                dateStartBorder.BorderThickness = new Thickness(2, 2, 2, 2);
                dateEndBorder.BorderThickness = new Thickness(2, 2, 2, 2);
                dateStartBorder.BorderBrush = Brushes.Red;
                dateEndBorder.BorderBrush = Brushes.Red;
            }
        }

        private void GridRate_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
        }

        private void GridControlExtend_OnCustomSummary(object sender, CustomSummaryEventArgs e)
        {
            if (!(DataContext is ProfitAndLossesWindowViewModel ctx)) return;
            var colsum = (GridSummaryItem) e.Item;
            if (colsum == null || colsum.FieldName != "AktZachetResult") return;
            var d = Math.Round(
                ctx.ExtendActual.Where(_ => _.CurrencyName == (string) colsum.Tag)
                    .Sum(_ => _.AktZachetResult) ?? 0, 2);
            var s = "";
            for (var i = 0; i < maxLengthSumm + 1; i++)
                s += " ";
            var ssum = s + $"{d:n2}";
            colsum.Alignment = GridSummaryItemAlignment.Left;
            e.TotalValue = $"{ssum} {colsum.Tag}";
        }
    }
}