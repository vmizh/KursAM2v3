using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Windows;
using System.Windows.Data;
using DevExpress.Mvvm.UI.Interactivity;
using DevExpress.Xpf.Grid;

namespace KursAM2.View.Helper
{
    public class GridLayoutHelper : Behavior<GridControl>
    {
        private readonly List<LayoutChangedType> myLayoutChangedTypes = new List<LayoutChangedType>();
        private bool myIsLocked;
        public List<PropertyChangeNotifier> myPropList;
        private GridControl Grid => AssociatedObject;
        public event EventHandler<MyEventArgs> LayoutChanged;

        protected override void OnAttached()
        {
            base.OnAttached();
            if (Grid.Columns != null)
                SubscribeColumns();
            else
                Grid.Loaded += OnGridLoaded;
            Grid.FilterChanged += OnGridFilterChanged;
            Grid.AutoGeneratedColumns += OnGridColumnsPopulated;
            Grid.SortInfo.CollectionChanged += OnSortInfoChanged;
        }

        protected override void OnDetaching()
        {
            UnSubscribeColumns();
            Grid.SortInfo.CollectionChanged -= OnSortInfoChanged;
            Grid.Loaded -= OnGridLoaded;
            Grid.FilterChanged -= OnGridFilterChanged;
            Grid.AutoGeneratedColumns -= OnGridColumnsPopulated;
            base.OnDetaching();
        }

        private void SubscribeColumns()
        {
            Grid.Columns.CollectionChanged += ColumnsCollectionChanged;
            myPropList = new List<PropertyChangeNotifier>();
            foreach (var column in Grid.Columns)
                SubscribeColumn(column);
        }

        private void UnSubscribeColumns()
        {
            Grid.Columns.CollectionChanged -= ColumnsCollectionChanged;
        }

        private void SubscribeColumn(GridColumn column)
        {
            var actualWidthDescriptor = new PropertyChangeNotifier(column, "ActualWidth");
            actualWidthDescriptor.ValueChanged += OnColumnWidthChanged;
            myPropList.Add(actualWidthDescriptor);
            var visibleIndexDescriptor = new PropertyChangeNotifier(column, "VisibleIndex");
            visibleIndexDescriptor.ValueChanged += OnColumnVisibleIndexChanged;
            myPropList.Add(visibleIndexDescriptor);
            var groupIndexDescriptor = new PropertyChangeNotifier(column, "GroupIndex");
            groupIndexDescriptor.ValueChanged += OnColumnGroupIndexChanged;
            myPropList.Add(groupIndexDescriptor);
            var visibleDescriptor = new PropertyChangeNotifier(column, "Visible");
            visibleDescriptor.ValueChanged += OnColumnVisibleChanged;
            myPropList.Add(visibleDescriptor);
        }

        private void ProcessLayoutChanging(LayoutChangedType type)
        {
            if (!myLayoutChangedTypes.Contains(type))
                myLayoutChangedTypes.Add(type);
            if (myIsLocked)
                return;
            myIsLocked = true;
            // ReSharper disable once PossibleNullReferenceException
            Dispatcher.BeginInvoke(new Action(() =>
            {
                myIsLocked = false;
                LayoutChanged?.Invoke(this, new MyEventArgs {LayoutChangedTypes = myLayoutChangedTypes});
                myLayoutChangedTypes.Clear();
            }));
        }

        private void OnGridLoaded(object sender, RoutedEventArgs e)
        {
            SubscribeColumns();
            Grid.Columns.CollectionChanged += ColumnsCollectionChanged;
        }

        private void OnGridColumnsPopulated(object sender, RoutedEventArgs e)
        {
            ProcessLayoutChanging(LayoutChangedType.ColumnsCollection);
            SubscribeColumns();
        }

        private void ColumnsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null || e.OldItems != null)
                ProcessLayoutChanging(LayoutChangedType.ColumnsCollection);
            if (e.NewItems != null)
                foreach (GridColumn column in e.NewItems)
                    SubscribeColumn(column);
        }

        private void OnGridFilterChanged(object sender, RoutedEventArgs e)
        {
            ProcessLayoutChanging(LayoutChangedType.FilerChanged);
        }

        private void OnColumnWidthChanged(object sender, EventArgs args)
        {
            ProcessLayoutChanging(LayoutChangedType.ColumnWidth);
        }

        private void OnColumnVisibleIndexChanged(object sender, EventArgs args)
        {
            ProcessLayoutChanging(LayoutChangedType.ColumnVisibleIndex);
        }

        private void OnColumnGroupIndexChanged(object sender, EventArgs args)
        {
            ProcessLayoutChanging(LayoutChangedType.ColumnGroupIndex);
        }

        private void OnColumnVisibleChanged(object sender, EventArgs args)
        {
            ProcessLayoutChanging(LayoutChangedType.ColumnVisible);
        }

        private void OnSortInfoChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            ProcessLayoutChanging(LayoutChangedType.SortingChanged);
        }
    }

    public class MyEventArgs : EventArgs
    {
        public List<LayoutChangedType> LayoutChangedTypes { get; set; }
    }

    public enum LayoutChangedType
    {
        ColumnsCollection,
        FilerChanged,
        SortingChanged,
        ColumnGroupIndex,
        ColumnVisibleIndex,
        ColumnWidth,
        ColumnVisible,
        None
    }

    public sealed class PropertyChangeNotifier :
        DependencyObject,
        IDisposable
    {
        #region Member Variables

        private readonly WeakReference _propertySource;

        #endregion // Member Variables

        #region PropertySource

        public DependencyObject PropertySource
        {
            get
            {
                try
                {
                    // note, it is possible that accessing the target property
                    // will result in an exception so i’ve wrapped this check
                    // in a try catch
                    return _propertySource.IsAlive
                        ? _propertySource.Target as DependencyObject
                        : null;
                }
                catch
                {
                    return null;
                }
            }
        }

        #endregion // PropertySource

        #region IDisposable Members

        public void Dispose()
        {
            BindingOperations.ClearBinding(this, ValueProperty);
        }

        #endregion

        #region Events

        public event EventHandler ValueChanged;

        #endregion // Events

        #region Constructor

        public PropertyChangeNotifier(DependencyObject propertySource, string path)
            : this(propertySource, new PropertyPath(path))
        {
        }

        public PropertyChangeNotifier(DependencyObject propertySource, DependencyProperty property)
            : this(propertySource, new PropertyPath(property))
        {
        }

        /*  public PropertyChangeNotifier(GridColumn propertySource, DependencyPropertyDescriptor property)
               : this(propertySource, new PropertyPath(property))
          {
          }*/
        public PropertyChangeNotifier(DependencyObject propertySource, PropertyPath property)
        {
            if (null == propertySource)
                throw new ArgumentNullException(nameof(propertySource));
            if (null == property)
                throw new ArgumentNullException(nameof(property));
            _propertySource = new WeakReference(propertySource);
            var binding = new Binding();
            binding.Path = property;
            binding.Mode = BindingMode.OneWay;
            binding.Source = propertySource;
            BindingOperations.SetBinding(this, ValueProperty, binding);
        }

        #endregion // Constructor

        #region Value

        public static readonly DependencyProperty ValueProperty = DependencyProperty.Register("Value",
            typeof(object), typeof(PropertyChangeNotifier), new FrameworkPropertyMetadata(null, OnPropertyChanged));

        private static void OnPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var notifier = (PropertyChangeNotifier) d;
            if (null != notifier.ValueChanged)
                notifier.ValueChanged(notifier, EventArgs.Empty);
        }

        /// <summary>
        ///     Returns/sets the value of the property
        /// </summary>
        [Description("Returns / sets the value of the property")]
        [Category("“Behavior")]
        [Bindable(true)]
        public object Value
        {
            get => GetValue(ValueProperty);
            set => SetValue(ValueProperty, value);
        }

        #endregion //Value
    }
}