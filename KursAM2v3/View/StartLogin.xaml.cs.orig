using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Windows;
using System.Windows.Forms;
using System.Windows.Interop;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Xml;
using Core;
using Core.ViewModel.Base;
using Core.ViewModel.Common;
using Core.WindowsManager;
using Data;
using DevExpress.Mvvm;
using DevExpress.Xpf.Editors;
using Helper;
using KursAM2.Helper;
using KursAM2.Managers;
using KursAM2.ViewModel.Splash;
using KursAM2.ViewModel.StartLogin;
using SQLite.Base;
using SQLite.Base.Entity;
using Application = System.Windows.Application;
using User = Helper.User;


// ReSharper disable InconsistentNaming

namespace KursAM2.View
{
    /// <summary>
    ///     Interaction logic for StartLogin.xaml
    /// </summary>
<<<<<<< working copy
    public class StartLoginViewModel : RSWindowViewModelBase
    {
        private readonly OpenFileDialog myDialog = new OpenFileDialog();
        private string myCurrentText;

        public StartLoginViewModel(Window formWindow)
        {
            Form = formWindow;
            GetDefault();
        }

        public string CurrentText
        {
            set
            {
                if (myCurrentText == value) return;
                myCurrentText = value;
                RaisePropertiesChanged();
            }
            get => myCurrentText;
        }

        protected ISplashScreenService SplashScreenService => GetService<ISplashScreenService>();

        public void GetDefault()
        {
            using (var ctx = new LocalDbContext())
            {
                var item = ctx.LoginStarts;
                var view = Form as StartLogin;
                if (!item.Any())
                {
                    // ReSharper disable once PossibleNullReferenceException
                    view.AvatarObj.Source = new BitmapImage(new Uri("./../Images/businessman.png", UriKind.Relative));
                }
                else
                {
                    var LastData = ctx.LoginStarts.Max(_ => _.LastDataTime);
                    var firstOrDefault = ctx.LoginStarts.FirstOrDefault(_ => _.LastDataTime == LastData);
                    if (firstOrDefault != null)
                    {
                        // ReSharper disable once PossibleNullReferenceException
                        view.AvatarObj.Source = ImageManager.ByteToImageSource(
                            firstOrDefault.Avatar);
                        CurrentText = firstOrDefault.Login;
                    }
                }
            }
        }

        public void SaveСache(ImageSource data)
        {
            using (var ctx = new LocalDbContext())
            {
                try
                {
                    var item = ctx.LoginStarts.FirstOrDefault(_ => _.Login == CurrentText);
                    if (item != null)
                    {
                        item.Avatar = ImageManager.ImageSourceToBytes(
                            new PngBitmapEncoder(), data);
                        item.LastDataTime = DateTime.Now;
                    }
                    else
                    {
                        var myID = ctx.LoginStarts.Any() ? ctx.LoginStarts.Max(_ => _.Id) + 1 : 1;
                        ctx.LoginStarts.Add(new LoginStart
                        {
                            Id = myID,
                            Avatar = ImageManager.ImageSourceToBytes(
                                new PngBitmapEncoder(), data),
                            LastDataTime = DateTime.Now,
                            Login = CurrentText
                        });
                    }
                    ctx.SaveChanges();
                }
                catch (Exception e)
                {
                    WindowManager.ShowError(e);
                }
            }
        }


        public void SplashLoadBar()
        {
            var vm = new DebitorCreditorCalcKontrSplashViewModel
            {
                Progress = 0,
                MaxProgress = 100,
                Minimum = 0,
                ExtendExtendedTextVisibility = Visibility.Visible
            };
            SplashScreenService.ShowSplashScreen();
            SplashScreenService.SetSplashScreenState(vm);
        }

        public void HideSplash()
        {
            SplashScreenService.HideSplashScreen();
        }
    }

=======
>>>>>>> merge rev
    public partial class StartLogin
    {
<<<<<<< working copy
        private readonly string myLoginInfoFileName =
            $"{(string) Application.Current.Properties["DataPath"]}\\StartLogin.xml";

=======
>>>>>>> merge rev
        private readonly StartLoginViewModel dtx;
        public bool IsConnectSuccess;

        public StartLogin()
        {
            InitializeComponent();
            DataContext = new StartLoginViewModel(this);
<<<<<<< working copy
            dataBaseList = new ObservableCollection<DataSource>();
=======
>>>>>>> merge rev
            pwdText.Focus();
<<<<<<< working copy
            Loaded += StartLogin_Loaded;
            dtx = (StartLoginViewModel) DataContext;
            dtx.GetDefault();
=======
            dtx = (StartLoginViewModel)DataContext;
>>>>>>> merge rev
        }

        public ObservableCollection<DataSource> dataBaseList { set; get; }
        public DataSource SelectedDataSource { set; get; }

        private void MenuItem_OnClick(object sender, RoutedEventArgs e)
        {
            //Не переносить в ViewModel
            using (var form = new OpenFileDialog())
            {
                form.Filter = @"Картинки(*.JPG;*.PNG)|*.JPG;*.PNG";
                form.CheckFileExists = true;
                form.Multiselect = false;
                form.ShowDialog();
                if (!string.IsNullOrEmpty(form.FileName))
                {
                    var source = Image.FromFile(form.FileName);
                    if (source.Height != source.Width)
                    {
                        var cropSource = (Bitmap) source.Crop(new Rectangle(source.Width / 2 - source.Height / 2,
                            0, source.Height, source.Height));
                        var b =
                            Imaging.CreateBitmapSourceFromHBitmap(
                                cropSource.GetHbitmap(),
                                IntPtr.Zero,
                                Int32Rect.Empty,
                                BitmapSizeOptions.FromEmptyOptions());
                        AvatarObj.Source = b;
                    }
                    else
                    {
                        AvatarObj.Source = new BitmapImage(new Uri(form.FileName, UriKind.RelativeOrAbsolute));
                    }
                }
<<<<<<< working copy
            }
        }

        private void bnOk_Click(object sender, RoutedEventArgs e)
        {
            if (userNameText.EditValue == null || userNameText.Text.Trim() == string.Empty ||
                pwdText.Text.Length == 0
                || SelectedDataSource == null)
                WindowManager.ShowMessage(this, "Имя пользователя и пароль должны быть обязательно заполнены.",
                    "Ошибка",
                    MessageBoxImage.Question);
            else
                try
                {
                    dtx.SplashLoadBar();
                    User newUser;
                    if (!CheckAndSetUser(out newUser)) return;
                    using (var ctx = GlobalOptions.GetEntities())
                    {
                        var tileItems = (from item in ctx.MAIN_DOCUMENT_ITEM
                                join d in ctx.USER_FORMS_RIGHT on item.ID equals
                                    d.FORM_ID
                                where Equals(d.USER_NAME.ToUpper(), newUser.NickName.ToUpper())
                                select item).OrderBy(_ => _.ID)
                            .ToList();

                        var tileGrps = new List<MAIN_DOCUMENT_GROUP>();
                        var titems = tileItems.Where(tile => !tileGrps.Contains(tile.MAIN_DOCUMENT_GROUP)).ToList();
                        tileGrps.AddRange(titems.Select(tile => tile.MAIN_DOCUMENT_GROUP));
                        var tileGroups = new List<TileGroup>();
                        foreach (var grp in tileGrps)
                        {
                            var newGrp = new TileGroup
                            {
                                Id = grp.ID,
                                Name = grp.NAME,
                                Notes = grp.NOTES,
                                Picture = ImageManager.ByteToImage(grp.PICTURE)
                            };
                            var grp1 = grp;
                            foreach (var tile in tileItems.Where(t => t.GROUP_ID == grp1.ID))
                                newGrp.TileItems.Add(new TileItem
                                {
                                    Id = tile.ID,
                                    Name = tile.NAME,
                                    Notes = tile.NOTES,
                                    Picture = ImageManager.ByteToImage(tile.PICTURE),
                                    GroupId = tile.GROUP_ID
                                });
                            if (tileGroups.All(g => g.Id != newGrp.Id))
                                tileGroups.Add(newGrp);
                        }
                        newUser.MainTileGroups = tileGroups;
                        newUser.Groups =
                            ctx.EXT_GROUPS.Select(
                                    grp => new UserGroup {Id = grp.GR_ID, Name = grp.GR_NAME})
                                .ToList();
                        GlobalOptions.UserInfo = newUser;
                        GlobalOptions.SystemProfile = new SystemProfile();
                    }
                    SetUserProfile(newUser.NickName.ToUpper());
                    SetGlobalProfile();
                    SaveLoginInfo();
                    IsConnectSuccess = true;
                    DialogResult = true;
                    dtx.SaveСache(AvatarObj.Source);
                    Close();
                }
                catch
                    (Exception ex)
                {
                    dtx.HideSplash();
                    WindowManager.ShowError(this, ex);
                }
        }

        private void LoadDataSources()
        {
            var xmlDoc = new XmlDocument();
            xmlDoc.Load($"{Environment.CurrentDirectory}\\Layout\\DataSources.xml");
            var nodeList = xmlDoc.DocumentElement?.SelectNodes("/DataSources/DataSource");
            if (nodeList == null) return;

            foreach (XmlNode node in nodeList)
            {
                var attrs = node.Attributes;
                var ds = new DataSource();
                if (attrs == null) continue;
                foreach (XmlAttribute attr in attrs)
                    switch (attr.Name)
                    {
                        case "Name":
                            ds.Name = attr.Value;
                            break;
                        case "ShowName":
                            ds.ShowName = attr.Value;
                            break;
                        case "Order":
                            ds.Order = Convert.ToInt32(attr.Value);
                            break;
                        case "Server":
                            ds.Server = attr.Value;
                            break;
                        case "DBName":
                            ds.DBName = attr.Value;
                            break;
                        case "Color":
                            ds.Color = (SolidColorBrush) new BrushConverter().ConvertFromString(attr.Value);
                            break;
                    }
                dataBaseList.Add(ds);
            }
            dataSources.ItemsSource = dataBaseList;
        }

        private void StartLogin_Loaded(object sender, RoutedEventArgs e)
        {
            var vers = new VersionManager();
            var ver = vers.CheckVersion();
            GlobalOptions.Version = $"Версия {ver.Major}.{ver.Minor}.{ver.Ver}";
            version.Content = $"Версия {ver.Major}.{ver.Minor}.{ver.Ver}";
            LoadDataSources();
            //LoadLoginInfo();
=======
            } 
            //
>>>>>>> merge rev
        }
        private void dataSources_EditValueChanged(object sender, EditValueChangedEventArgs e)
        {
            dtx.SelectedDataSource = e.NewValue as DataSource;
        }
<<<<<<< working copy
    }

    [DataContract]
    public class ConnectInfo
    {
        [DataMember]
        public string UserName { set; get; }

        [DataMember]
        public byte[] Picture { set; get; }
=======
>>>>>>> merge rev
    }
}