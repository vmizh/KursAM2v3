using System.ComponentModel;
using System.IO;
using System.Windows;
<<<<<<< working copy
using System.Windows.Input;
using DevExpress.Xpf.Editors.Settings;
=======
>>>>>>> merge rev
using DevExpress.Xpf.Grid;
using LayoutManager;

namespace KursAM2.View.Search
{
    /// <summary>
    ///     Interaction logic for SearchDogovorForClientView.xaml
    /// </summary>
    public partial class SearchSFForClientView : ILayout
    {
        public SearchSFForClientView()
        {
            InitializeComponent();
            LayoutManager = new LayoutManager.LayoutManager(GetType().Name, this, mainLayoutControl);
            Loaded += SearchBaseView_Loaded;
            Closing += SearchBaseView_Closing;
        }

        public LayoutManagerBase LayoutManager { get; set; }

        private void SearchBaseView_Closing(object sender, CancelEventArgs e)
        {
            LayoutManager.Save();
        }

        private void SearchBaseView_Loaded(object sender, RoutedEventArgs e)
        {
            LayoutManager.Load();
        }

        private void PART_GridControlKontragent_Loaded(object sender, RoutedEventArgs e)
        {
            var grid = sender as GridControl;
            if (
                !File.Exists(
                    $"{Application.Current.Properties["DataPath"]}\\{GetType().Name}.KontragentLookUpEdit.xml"))
                return;
            grid?.RestoreLayoutFromXml(
                $"{Application.Current.Properties["DataPath"]}\\{GetType().Name}.KontragentLookUpEdit.xml");
        }

        private void PART_GridControlKontragent_Unloaded(object sender, RoutedEventArgs e)
        {
            var grid = sender as GridControl;
            grid?.SaveLayoutToXml(
                $"{Application.Current.Properties["DataPath"]}\\{GetType().Name}.KontragentLookUpEdit.xml");
        }

        private void PART_GridControlNomenkl_Loaded(object sender, RoutedEventArgs e)
        {
            var grid = sender as GridControl;
            if (grid == null) return;
            var spath = (string) Application.Current.Properties["DataPath"];
            if (!File.Exists($"{spath}\\{GetType().Name}.NomenklLookUpEdit.xml")) return;
            grid.RestoreLayoutFromXml($"{spath}\\{GetType().Name}.NomenklLookUpEdit.xml");
        }

        private void PART_GridControlNomenkl_Unloaded(object sender, RoutedEventArgs e)
        {
            var grid = sender as GridControl;
            var spath = (string) Application.Current.Properties["DataPath"];
            grid?.SaveLayoutToXml($"{spath}\\{GetType().Name}.NomenklLookUpEdit.xml");
        }
<<<<<<< working copy
        private void BankGridControl_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            var dtx = DataContext as SFForClientSearchViewModel;
            foreach (var col in resultGridControl.Columns)
            {
                switch (col.FieldName)
                {
                    case "SummaOtgruz":
                        if (dtx != null)
                        {
                            col.EditSettings = new CalcEditSettings
                            {
                                AllowDefaultButton = false,
                                DisplayFormat = "n2",
                                MaskUseAsDisplayFormat = true
                            };
                        }
                        break;
                    case "SF_DILER_SUMMA":
                        if (dtx != null)
                        {
                            col.EditSettings = new CalcEditSettings
                            {
                                AllowDefaultButton = false,
                                DisplayFormat = "n2",
                                MaskUseAsDisplayFormat = true
                            };
                        }
                        break;
                }
            }

        }

        private void BankGridControl_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
        }
        private void UIElement_OnKeyDown(object sender, KeyEventArgs e)
        {
           var dtx = DataContext as SFForClientSearchViewModel;
           if ( e.Key == Key.Enter )
          dtx.GetSearchDocument(null);
        }
=======
>>>>>>> merge rev
    }
}