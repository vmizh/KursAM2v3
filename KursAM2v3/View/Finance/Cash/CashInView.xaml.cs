using System;
using System.Linq;
using System.Windows;
using System.Windows.Data;
using Core;
using Core.EntityViewModel.Cash;
using Core.Invoices.EntityViewModel;
using Core.ViewModel.Base;
using Core.WindowsManager;
using DevExpress.Mvvm.Native;
using DevExpress.Xpf.Editors;
using DevExpress.Xpf.LayoutControl;
using Helper;
using KursAM2.Dialogs;
using KursAM2.ViewModel.Finance.Cash;
using LayoutManager;

namespace KursAM2.View.Finance.Cash
{
    /// <summary>
    ///     Interaction logic for CashInView.xaml
    /// </summary>
    // ReSharper disable once InheritdocConsiderUsage
    public partial class CashInView : ILayout
    {
        public ButtonEdit KontrSelectButton;
        public DataLayoutItem NCodeItem;
        public DataLayoutItem SFactNameItem;
        public PopupCalcEdit Sumordcont;

        public CashInView()
        {
            InitializeComponent();
            LayoutManager = new LayoutManager.LayoutManager(GetType().Name, this, layoutItems);
            Loaded += CashInView_Loaded;
            Unloaded += CashInView_Unloaded;
            MinWidth = 1000;
        }

        public ComboBoxEdit CurrencyItem { get; set; }
        public LayoutManager.LayoutManager LayoutManager { get; set; }
        public string LayoutManagerName { get; set; }
        public void SaveLayout()
        {
            LayoutManager.Save();
        }

        private void CashInView_Unloaded(object sender, RoutedEventArgs e)
        {
            LayoutManager.Save();
        }

        private void CashInView_Loaded(object sender, RoutedEventArgs e)
        {
            LayoutManager.Load();
            var ctx = DataContext as CashInWindowViewModel;
            if (ctx?.Document != null)
                ctx.Document.State = RowStatus.NotEdited;
        }

        private void LayoutItems_OnAutoGeneratedUI(object sender, EventArgs e)
        {
            foreach (var item in WindowHelper.GetLogicalChildCollection<MemoEdit>(layoutItems))
                if (item.EditValue != null && !string.IsNullOrWhiteSpace((string) item.EditValue))
                    item.Height = 80;
        }

        private void LayoutItems_OnAutoGeneratingItem(object sender, DataLayoutControlAutoGeneratingItemEventArgs e)
        {
            var ctx = DataContext as CashInWindowViewModel;
            var doc = ctx?.Document;
            if (doc == null)
                return;
            var oldContent = e.Item.Content as BaseEdit;
            if (e.PropertyType == typeof(decimal) || e.PropertyType == typeof(decimal?))
            {
                var newContent = new PopupCalcEdit
                {
                    DisplayFormatString = "n2",
                    MaskUseAsDisplayFormat = true
                };
                BindingHelper.CopyBinding(oldContent, newContent, BaseEdit.EditValueProperty);
                e.Item.Content = newContent;
            }
            switch (e.PropertyName)
            {
                case nameof(doc.CREATOR):
                    e.Item.IsReadOnly = true;
                    e.Item.HorizontalAlignment = HorizontalAlignment.Right;
                    break;
                case nameof(doc.Cash):
                    var cb = ViewFluentHelper.SetComboBoxEdit(e.Item, doc.Cash, "Cash",
                        MainReferences.Cashs.Values.Where(_ => _.IsAccessRight).ToList());
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    e.Item.HorizontalContentAlignment = HorizontalAlignment.Left;
                    cb.EditValueChanged += Cb_EditValueChanged;
                    break;
                case nameof(doc.Currency):
                    try
                    {
                        using (var datactx = GlobalOptions.GetEntities())
                        {
                            var crslst = datactx.TD_22.Where(_ => _.DOC_CODE == doc.CA_DC).Select(_ => _.CRS_DC)
                                .ToList();
                            ctx.CurrencyList.Clear();
                            foreach (var dc in crslst)
                                ctx.CurrencyList.Add(
                                    MainReferences.Currencies.Values.FirstOrDefault(_ => _.DocCode == dc));
                        }
                    }
                    catch (Exception ex)
                    {
                        WindowManager.ShowError(ex);
                    }
                    CurrencyItem = ViewFluentHelper.SetComboBoxEdit(e.Item, doc.Currency, "Currency", ctx.CurrencyList,
                        width: 50);
                    e.Item.HorizontalContentAlignment = HorizontalAlignment.Left;
                    if (doc.BANK_RASCH_SCHET_DC != null && doc.RASH_ORDER_FROM_DC != null
                                                        && doc.SFACT_DC != null && doc.State != RowStatus.NewRow)
                        CurrencyItem.IsEnabled = false;
                    break;
                case nameof(doc.DATE_ORD):
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    break;
                case nameof(doc.NCODE):
                    e.Item.IsReadOnly = true;
                    NCodeItem = e.Item;
                    break;
                case "NOTES_ORD":
                    ViewFluentHelper.SetDefaultMemoEdit(e.Item);
                    break;
                case nameof(doc.NUM_ORD):
                    e.Item.IsReadOnly = true;
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    break;
                case "OSN_ORD":
                    ViewFluentHelper.SetDefaultMemoEdit(e.Item);
                    break;
                case "NAME_ORD":
                    ViewFluentHelper.SetDefaultMemoEdit(e.Item);
                    break;
                case "SFactName":
                    var cancelBtn = new ButtonInfo
                    {
                        ButtonKind = ButtonKind.Simple,
                        GlyphKind = GlyphKind.Cancel,
                        ToolTip = @"Удалить связь со счетом"

                        // IsEnabled = doc.SPOST_DC != null,
                    };
                    cancelBtn.Click += CancelBtn_Click;
                    var sdrEdit = new ButtonEdit
                    {
                        TextWrapping = TextWrapping.Wrap,
                        IsTextEditable = false,
                        Buttons = new ButtonInfoCollection
                        {
                            cancelBtn
                        }
                    };
                    sdrEdit.DefaultButtonClick += SFactNamedit_DefaultButtonClick;
                    BindingHelper.CopyBinding(oldContent, sdrEdit, BaseEdit.EditValueProperty);
                    e.Item.Content = sdrEdit;
                    SFactNameItem = e.Item;
                    break;
                case "State":
                    e.Item.IsReadOnly = true;
                    if (e.Item.Content is ComboBoxEdit cbState) cbState.IsEnabled = false;
                    e.Item.HorizontalAlignment = HorizontalAlignment.Right;
                    break;
                case "Kontragent":
                    KontrSelectButton = new ButtonEdit
                    {
                        TextWrapping = TextWrapping.Wrap,
                        IsTextEditable = false
                    };
                    KontrSelectButton.SetBinding(IsEnabledProperty,
                        new Binding {Path = new PropertyPath("IsKontrSelectEnable")});
                    KontrSelectButton.DefaultButtonClick += KontrEdit_DefaultButtonClick;
                    BindingHelper.CopyBinding(oldContent, KontrSelectButton, BaseEdit.EditValueProperty);
                    e.Item.Content = KontrSelectButton;
                    e.Item.Width = 400;
                    break;
                case nameof(doc.SDRSchet):
                    ViewFluentHelper.SetComboBoxEdit(e.Item, doc.SDRSchet, "SDRSchet",
                        MainReferences.SDRSchets.Values.ToList().OrderBy(_ => _.Name));
                    e.Item.HorizontalContentAlignment = HorizontalAlignment.Left;
                    break;
                case nameof(doc.SUMM_ORD):
                    Sumordcont = new PopupCalcEdit
                    {
                        DisplayFormatString = "n2",
                        MaskUseAsDisplayFormat = true
                    };
                    Sumordcont.SetBinding(IsEnabledProperty,
                        new Binding {Path = new PropertyPath("IsSummaEnabled")});
                    Sumordcont.EditValueChanged += Sumordcont1_EditValueChanged;
                    BindingHelper.CopyBinding(oldContent, Sumordcont, BaseEdit.EditValueProperty);
                    e.Item.Content = Sumordcont;
                    e.Item.Width = 250;
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    break;
                case nameof(doc.CRS_SUMMA):
                    var sumordcont1 = new PopupCalcEdit
                    {
                        DisplayFormatString = "n2",
                        MaskUseAsDisplayFormat = true
                    };
                    sumordcont1.SetBinding(IsEnabledProperty,
                        new Binding {Path = new PropertyPath("IsKontrSummaEnabled")});
                    BindingHelper.CopyBinding(oldContent, sumordcont1, BaseEdit.EditValueProperty);
                    e.Item.Content = sumordcont1;
                    e.Item.Width = 250;
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    break;
                case nameof(doc.KONTR_CRS_SUM_CORRECT_PERCENT):
                    e.Item.Width = 100;
                    e.Item.VerticalAlignment = VerticalAlignment.Center;
                    break;
                case nameof(doc.OBRATNY_RASCHET):
                    e.Item.VerticalAlignment = VerticalAlignment.Center;
                    break;
                case nameof(doc.KontragentType):
                    if (e.Item.Content is ComboBoxEdit cbKontragentType)
                        //cbKontrType.SetBinding(IsEnabledProperty,
                        //    new Binding { Path = new PropertyPath("IsKontrTypeEnabled") });
                        cbKontragentType.Width = 100;
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    e.Item.VerticalAlignment = VerticalAlignment.Center;
                    break;
            }
            ViewFluentHelper.SetModeUpdateProperties(doc, e.Item, e.PropertyName);
        }

        private void Sumordcont1_EditValueChanged(object sender, EditValueChangedEventArgs e)
        {
            if (!(DataContext is CashInWindowViewModel ctx)) return;
            var doc = ctx.Document;
            if ((decimal) (e.NewValue ?? 0m) < 0)
            {
                WindowManager.ShowMessage(this, "Сумма ордера не может быть меньше 0!", "Ошибка",
                    MessageBoxImage.Stop);
                doc.SUMM_ORD = 0;
                return;
            }
            if ((decimal) (e.NewValue ?? 0m) > doc.MaxSumma && doc.SFACT_DC != null)
            {
                WindowManager.ShowMessage(this, "Сумма ордера не может быть больше сумму оплаты по счету!", "Ошибка",
                    MessageBoxImage.Stop);
                doc.SUMM_ORD = ctx.OldSumma;
            }
            //ctx.OldSumma = (decimal) e.NewValue;
        }

        private void Cb_EditValueChanged(object sender, EditValueChangedEventArgs e)
        {
            if (!(DataContext is CashInWindowViewModel ctx)) return;
            var doc = ctx.Document;
            if (ctx.Document != null && ctx.Document.State != RowStatus.NotEdited &&
                ctx.Document.State != RowStatus.NewRow &&
                (ctx.Document.RASH_ORDER_FROM_DC != null || ctx.Document.BANK_RASCH_SCHET_DC != null
                                                         || ctx.Document.SFACT_DC != null))
            {
                WindowManager.ShowMessage("Ордер уже проведен. Изменить кассу нельзя",
                    "Предупреждение", MessageBoxImage.Information);
                return;
            }
            ctx.WindowName = $"Приходный кассовый ордер в {doc?.Cash?.Name}";
            if (doc == null || doc.Cash == null) return;
            try
            {
                using (var datactx = GlobalOptions.GetEntities())
                {
                    var crslst = datactx.TD_22.Where(_ => _.DOC_CODE == doc.CA_DC).Select(_ => _.CRS_DC)
                        .ToList();
                    ctx.CurrencyList.Clear();
                    foreach (var dc in crslst)
                        ctx.CurrencyList.Add(MainReferences.Currencies.Values.FirstOrDefault(_ => _.DocCode == dc));
                }
            }
            catch (Exception ex)
            {
                WindowManager.ShowError(ex);
            }
        }

        private void SFactNamedit_DefaultButtonClick(object sender, RoutedEventArgs e)
        {
            var dtx = DataContext as CashInWindowViewModel;
            if (dtx == null) return;
            var doc = dtx.Document;
            var item = StandartDialogs.SelectInvoiceClient(dtx, true, true);
            if (item == null) return;
            var winManager = new WindowManager();
            if (item.DocDate != doc.DATE_ORD)
            {
                var res = winManager.ShowWinUIMessageBox(
                    $"Дата счета {item.DocDate.ToShortDateString()} не совпадает с датой ордера {doc.DATE_ORD}." +
                    "Установить дату ордера равной дате счета?", "Запрос", MessageBoxButton.YesNo,
                    MessageBoxImage.Question);
                if (res == MessageBoxResult.Yes)
                {
                    doc.MaxSumma = (decimal) (item.Summa - item.PaySumma);
                    doc.KONTRAGENT_DC = item.Entity.SF_CLIENT_DC;
                    doc.DATE_ORD = item.DocDate;
                    doc.SUMM_ORD = item.Summa - item.PaySumma;
                    doc.KONTR_CRS_DC = item.Entity.SF_CRS_DC;
                    doc.Currency = MainReferences.Currencies[item.Entity.SF_CRS_DC];
                    doc.SFactName = item.ToString();
                    doc.SFACT_DC = item.DocCode;
                    doc.NOTES_ORD = item.Note;
                }
                else
                {
                    doc.MaxSumma = (decimal) (item.Summa - item.PaySumma);
                    doc.KONTRAGENT_DC = item.Entity.SF_CLIENT_DC;
                    doc.SUMM_ORD = item.Summa;
                    doc.KONTR_CRS_DC = item.Entity.SF_CRS_DC;
                    doc.Currency = MainReferences.Currencies[item.Entity.SF_CRS_DC];
                    doc.SUMM_ORD = item.Summa - item.PaySumma;
                    doc.SFactName = item.ToString();
                    doc.SFACT_DC = item.DocCode;
                    doc.NOTES_ORD = item.Note;
                }
            }
            else
            {
                doc.MaxSumma = (decimal) (item.Summa - item.PaySumma);
                doc.KONTRAGENT_DC = item.Entity.SF_CLIENT_DC;
                doc.SUMM_ORD = item.Summa;
                doc.KONTR_CRS_DC = item.Entity.SF_CRS_DC;
                doc.Currency = MainReferences.Currencies[item.Entity.SF_CRS_DC];
                doc.SUMM_ORD = item.Summa - item.PaySumma;
                doc.SFactName = item.ToString();
                doc.SFACT_DC = item.DocCode;
                doc.NOTES_ORD = item.Note;
            }
        }

        private void KontrEdit_DefaultButtonClick(object sender, RoutedEventArgs e)
        {
            var ctx = DataContext as CashInWindowViewModel;
            var doc = ctx?.Document;
            if (doc == null)
                return;
            if (ctx.Document.State == RowStatus.NewRow)
            {
                // ReSharper disable once PossibleNullReferenceException
                switch (ctx.Document.KontragentType)
                {
                    case CashKontragentType.Kontragent:
                        var kontr = StandartDialogs.SelectKontragent(ctx.Document.Currency);
                        if (kontr == null) return;
                        ctx.Document.Currency = kontr.BalansCurrency;
                        ctx.Document.KONTRAGENT_DC = kontr.DocCode;
                        ctx.Document.NAME_ORD = kontr.Name;
                        ctx.Document.KONTR_CRS_DC = kontr.BalansCurrency.DocCode;
                        ctx.Document.SFactName = null;
                        doc.SFACT_DC = null;
                        CurrencyItem.IsEnabled = false;
                        break;
                    case CashKontragentType.Employee:
                        var emp = StandartDialogs.SelectEmployee();
                        if (emp != null) ctx.Document.TABELNUMBER = emp.TabelNumber;
                        ctx.Document.NAME_ORD = emp?.Name;
                        ctx.Document.SFactName = null;
                        ctx.Document.Currency = emp.Currency;
                        CurrencyItem.IsEnabled = false;
                        doc.SFACT_DC = null;
                        break;
                    case CashKontragentType.Bank:
                        var bank = StandartDialogs.SelectBankAccount();
                        if (bank != null) ctx.Document.BankAccount = bank;
                        ctx.Document.NAME_ORD = bank?.Name;
                        ctx.Document.BankAccount = bank;
                        ctx.Document.SFactName = null;
                        ctx.Document.Currency = bank.Currency;
                        CurrencyItem.IsEnabled = false;
                        doc.SFACT_DC = null;
                        break;
                    case CashKontragentType.Cash:
                        var order = StandartDialogs.SelectCashRashOrderForPrihod(ctx.Document);
                        if (order == null) return;
                        ctx.Document.RASH_ORDER_FROM_DC = order.DocCode;
                        ctx.Document.SUMM_ORD = order.SUMM_ORD;
                        ctx.Document.Currency = order.Currency;
                        CurrencyItem.IsEnabled = false;
                        ctx.Document.SDRSchet = order.SDRSchet;
                        ctx.Document.RashodOrderFromName = order.Cash.Name;
                        ctx.Document.OSN_ORD = order.ToString();
                        ctx.Document.NAME_ORD = order.ToString();
                        ctx.Document.SFactName = null;
                        doc.SFACT_DC = null;
                        break;
                }
            }
            else
            {
                if (ctx.Document.RASH_ORDER_FROM_DC != null || ctx.Document.BANK_RASCH_SCHET_DC != null
                                                            || ctx.Document.SFACT_DC != null)
                    WindowManager.ShowMessage("Ордер уже проведен. Изменить контрагента нельзя",
                        "Предупреждение", MessageBoxImage.Information);
                else
                    switch (ctx.Document.KontragentType)
                    {
                        case CashKontragentType.Kontragent:
                            var kontr = StandartDialogs.SelectKontragent(ctx.Document.Currency);
                            if (kontr == null) return;
                            ctx.Document.Currency = kontr.BalansCurrency;
                            ctx.Document.KONTRAGENT_DC = kontr.DocCode;
                            ctx.Document.NAME_ORD = kontr.Name;
                            ctx.Document.KONTR_CRS_DC = kontr.BalansCurrency.DocCode;
                            ctx.Document.SFactName = null;
                            doc.SFACT_DC = null;
                            break;
                        case CashKontragentType.Employee:
                            var emp = StandartDialogs.SelectEmployee();
                            if (emp != null) ctx.Document.TABELNUMBER = emp.TabelNumber;
                            ctx.Document.NAME_ORD = emp?.Name;
                            ctx.Document.SFactName = null;
                            doc.SFACT_DC = null;
                            break;
                        case CashKontragentType.Bank:
                            var bank = StandartDialogs.SelectBankAccount();
                            if (bank != null) ctx.Document.BankAccount = bank;
                            ctx.Document.NAME_ORD = bank?.Name;
                            ctx.Document.BankAccount = bank;
                            ctx.Document.SFactName = null;
                            doc.SFACT_DC = null;
                            break;
                        case CashKontragentType.Cash:
                            var order = StandartDialogs.SelectCashRashOrderForPrihod(ctx.Document);
                            if (order == null) return;
                            ctx.Document.RASH_ORDER_FROM_DC = order.DocCode;
                            ctx.Document.SUMM_ORD = order.SUMM_ORD;
                            ctx.Document.Currency = order.Currency;
                            ctx.Document.SDRSchet = order.SDRSchet;
                            ctx.Document.RashodOrderFromName = order.Cash.Name;
                            ctx.Document.OSN_ORD = order.ToString();
                            ctx.Document.NAME_ORD = order.ToString();
                            ctx.Document.SFactName = null;
                            doc.SFACT_DC = null;
                            break;
                    }
            }
        }

        private void CancelBtn_Click(object sender, RoutedEventArgs e)
        {
            if (!(DataContext is CashInWindowViewModel dtx)) return;
            var doc = dtx.Document;
            doc.SFACT_DC = null;
            doc.SFactName = null;
        }
    }
}