using System.ComponentModel;
using System.Windows;
using DevExpress.Data;
using DevExpress.Xpf.Editors.Settings;
using DevExpress.Xpf.Grid;
using LayoutManager;

namespace KursAM2.View.Finance.Cash
{
    /// <summary>
    ///     Interaction logic for CashBookView.xaml
    /// </summary>
    public partial class CashBookView : ILayout
    {
        // ReSharper disable once FieldCanBeMadeReadOnly.Global
        public MemoEditSettings baseMemo = new MemoEditSettings
        {
            ShowIcon = false
        };

        public CashBookView()
        {
            InitializeComponent();
            LayoutManager = new LayoutManager.LayoutManager(GetType().Name, this, mainLayoutControl);
            Loaded += CashBookView_Loaded;
            Closing += CashBookView_Closing;
        }
        
        public LayoutManager.LayoutManager LayoutManager { get; set; }
        public string LayoutManagerName { get; set; }
        public void SaveLayout()
        {
            LayoutManager.Save();
        }

        private void CashBookView_Closing(object sender, CancelEventArgs e)
        {
            LayoutManager.Save();
        }

        private void CashBookView_Loaded(object sender, RoutedEventArgs e)
        {
            LayoutManager.Load();
            foreach (var col in gridDocuments.Columns)
                if (col.FieldType != typeof(decimal) && col.FieldType != typeof(decimal?)
                                                     && col.FieldType != typeof(double) &&
                                                     col.FieldType != typeof(double?))
                    col.AutoFilterCondition = AutoFilterCondition.Contains;
        }

        private void GridPeriod_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            if (e.Column.FieldType != typeof(decimal) && e.Column.FieldType != typeof(decimal?)
                                                      && e.Column.FieldType != typeof(double) &&
                                                      e.Column.FieldType != typeof(double?))
                e.Column.ColumnFilterMode = ColumnFilterMode.DisplayText;
        }

        private void GridPeriod_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            foreach (var c in gridPeriods.Columns)
            {
                if(c.EditSettings == null) c.EditSettings = new TextEditSettings
                {
                    SelectAllOnMouseUp = true
                };
            }
            foreach (var col in gridPeriods.Columns)
            {
                col.ReadOnly = true;
                if (col.FieldType == typeof(decimal) || col.FieldType == typeof(decimal?))
                {
                    col.EditSettings = new CalcEditSettings
                    {
                        AllowDefaultButton = false,
                        DisplayFormat = "n2"
                    };
                    var summary = new TreeListSummaryItem
                    {
                        SummaryType = SummaryItemType.Sum,
                        ShowInColumn = col.FieldName,
                        DisplayFormat = "{0:n2}",
                        FieldName = col.FieldName
                    };
                    gridPeriods.TotalSummary.Add(summary);
                }
            }
        }

        private void GridDocuments_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
        }

        private void GridDocuments_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            foreach (var c in gridDocuments.Columns)
            {
                if(c.EditSettings == null) c.EditSettings = new TextEditSettings
                {
                    SelectAllOnMouseUp = true
                };
            }
            gridDocuments.TotalSummary.Clear();
            foreach (var col in gridDocuments.Columns)
            {
                col.ReadOnly = true;
                if (col.FieldType == typeof(decimal) || col.FieldType == typeof(decimal?))
                {
                    col.EditSettings = new CalcEditSettings
                    {
                        AllowDefaultButton = false,
                        DisplayFormat = "n2"
                    };
                    var summary = new GridSummaryItem
                    {
                        SummaryType = SummaryItemType.Sum,
                        ShowInColumn = col.FieldName,
                        DisplayFormat = "{0:n2}",
                        FieldName = col.FieldName
                    };
                    gridDocuments.TotalSummary.Add(summary);
                }
                if (col.FieldName == "Note" || col.FieldName == "OcnOrd" || col.FieldName == "NameOrd")
                    col.EditSettings = baseMemo;
            }
        }

        private void GridRemains_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            if (e.Column.FieldType != typeof(decimal) && e.Column.FieldType != typeof(decimal?)
                                                      && e.Column.FieldType != typeof(double) &&
                                                      e.Column.FieldType != typeof(double?))
                e.Column.ColumnFilterMode = ColumnFilterMode.DisplayText;
        }

        private void GridRemains_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            foreach (var c in gridRemains.Columns)
            {
                if(c.EditSettings == null) c.EditSettings = new TextEditSettings
                {
                    SelectAllOnMouseUp = true
                };
            }
            gridRemains.TotalSummary.Clear();
            foreach (var col in gridRemains.Columns)
            {
                col.ReadOnly = true;
                if (col.FieldType == typeof(decimal) || col.FieldType == typeof(decimal?)
                    && col.FieldName == "In" || col.FieldName == "Out")
                {
                    col.EditSettings = new CalcEditSettings
                    {
                        AllowDefaultButton = false,
                        DisplayFormat = "n2"
                    };
                    var summary = new GridSummaryItem
                    {
                        SummaryType = SummaryItemType.Sum,
                        ShowInColumn = col.FieldName,
                        DisplayFormat = "{0:n2}",
                        FieldName = col.FieldName
                    };
                    gridRemains.TotalSummary.Add(summary);
                }
            }
        }
    }
}