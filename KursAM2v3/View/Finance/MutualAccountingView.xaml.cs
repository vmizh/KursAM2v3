using System.Linq;
using System.Windows;
using Core;
using DevExpress.Data;
using DevExpress.Xpf.Core;
using DevExpress.Xpf.Editors;
using DevExpress.Xpf.Editors.Settings;
using DevExpress.Xpf.Grid;
using KursAM2.ViewModel.Finance;
using LayoutManager;

namespace KursAM2.View.Finance
{
    /// <summary>
    ///     Interaction logic for MutualAccountingView.xaml
    /// </summary>
    public partial class MutualAccountingView : ILayout
    {
        public ButtonEditSettings KontrButtonEditSettings; 
        public MutualAccountingView()
        {
            InitializeComponent(); 
            ApplicationThemeHelper.ApplicationThemeName = Theme.MetropolisLightName;
            LayoutManager = new LayoutManager.LayoutManager(GetType().Name, this, mainLayoutControl);
            Loaded += MutualAccountingView_Loaded;
            Unloaded += MutualAccountingView_Unloaded;
            DataContextChanged += MutualAccountingView_DataContextChanged;
            typeVzaimozachetComboBoxEdit.DisplayMember = "Name";
            creditorCrscomboBoxEdit.ItemsSource = MainReferences.Currencies.Values;
            debitorCrscomboBoxEdit.ItemsSource = MainReferences.Currencies.Values;
        }

        public LayoutManager.LayoutManager LayoutManager { get; set; }
        public string LayoutManagerName { get; set; }
        public void SaveLayout()
        {
            LayoutManager.Save();
        }

        private void MutualAccountingView_DataContextChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
            if (!(DataContext is MutualAcountingWindowViewModel ctx))
            {
                Close();
                return;
            }
            var l = ctx.IsCurrencyConvert
                ? MainReferences.MutualTypes.Values.Where(_ => _.IsCurrencyConvert).ToList()
                : MainReferences.MutualTypes.Values.Where(_ => !_.IsCurrencyConvert).ToList();
            typeVzaimozachetComboBoxEdit.ItemsSource = l;
            if (ctx.IsCurrencyConvert)
                ctx.Document.MutualAccountingOldType = l[0];
        }

        private void MutualAccountingView_Loaded(object sender, RoutedEventArgs e)
        {
            LayoutManager.Load();
        }

        private void MutualAccountingView_Unloaded(object sender, RoutedEventArgs e)
        {
            LayoutManager.Save();
        }

        private void GridControlCreditor_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
        }

        private void GridControlCreditor_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            gridControlCreditor.TotalSummary.Clear();
            foreach (var col in gridControlCreditor.Columns)
            {
                if (col.FieldType == typeof(decimal) || col.FieldType == typeof(decimal?))
                {
                    col.EditSettings = new CalcEditSettings
                    {
                        AllowDefaultButton = true,
                        DisplayFormat = "n2"
                    };
                    var summary = new GridSummaryItem
                    {
                        SummaryType = SummaryItemType.Sum,
                        ShowInColumn = col.FieldName,
                        DisplayFormat = "{0:n2}",
                        FieldName = col.FieldName
                    };
                    gridControlCreditor.TotalSummary.Add(summary);
                }
                if (col.FieldName == "Kontragent")
                {
                    col.EditSettings = new ButtonEditSettings
                    {
                        IsTextEditable = false,
                        AllowDefaultButton = false,
                        Buttons =
                        {
                            new ButtonInfo
                            {
                                GlyphKind = GlyphKind.Regular,
                                Command = ((MutualAcountingWindowViewModel) DataContext)
                                    ?.ChangeCreditorKontragentCommand
                            }
                        },
                        
                    };
                }
                if (col.FieldName == "VZT_DOC_NOTES")
                    col.EditSettings = new MemoEditSettings
                    {
                        ShowIcon = false
                    };
                if (col.FieldName == "VZT_CRS_POGASHENO" || col.FieldName == "KontragentCurrency" ||
                    col.FieldName == "Currency")
                    col.ReadOnly = true;
                if (col.FieldName == "VzaimoraschType")
                    col.EditSettings = new ComboBoxEditSettings
                    {
                        DisplayMember = "Name",
                        //ValueMember = "DocCode",
                        ItemsSource = MainReferences.VzaimoraschetTypes.Values.ToList()
                    };
                if (col.FieldName == "SHPZ")
                    col.EditSettings = new ComboBoxEditSettings
                    {
                        DisplayMember = "Name",
                        //ValueMember = "DocCode",
                        ItemsSource = MainReferences.SDRSchets.Values.ToList()
                    };
            }
        }

        private void GridControlDebitor_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
        }

        private void GridControlDebitor_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            gridControlDebitor.TotalSummary.Clear();
            foreach (var col in gridControlDebitor.Columns)
            {
                if (col.FieldType == typeof(decimal) || col.FieldType == typeof(decimal?))
                {
                    col.EditSettings = new CalcEditSettings
                    {
                        AllowDefaultButton = true,
                        DisplayFormat = "n2"
                    };
                    var summary = new GridSummaryItem
                    {
                        SummaryType = SummaryItemType.Sum,
                        ShowInColumn = col.FieldName,
                        DisplayFormat = "{0:n2}",
                        FieldName = col.FieldName
                    };
                    gridControlDebitor.TotalSummary.Add(summary);
                }
                switch (col.FieldName)
                {
                    case "SFClient":
                        KontrButtonEditSettings = new ButtonEditSettings
                        {
                            IsTextEditable = false,
                            AllowDefaultButton = false,
                            NullValue = "Счет не выбран",
                            Buttons =
                            {
                                new ButtonInfo
                                {
                                    GlyphKind = GlyphKind.Cancel,
                                    Command = ((MutualAcountingWindowViewModel) DataContext).RemoveDebitorSFCommand
                                }
                            }
                        };
                        col.EditSettings = KontrButtonEditSettings;
                        break;
                    case "Kontragent":
                        KontrButtonEditSettings = new ButtonEditSettings
                        {
                            IsTextEditable = false,
                            AllowDefaultButton = false,
                            NullValue = "Контрагент не выбран",
                            Buttons =
                            {
                                new ButtonInfo
                                {
                                    GlyphKind = GlyphKind.Regular,
                                    Command = ((MutualAcountingWindowViewModel) DataContext).ChangeDebitorKontragentCommand
                                }
                            }
                        };
                        col.EditSettings = KontrButtonEditSettings;
                        break;
                    case "VZT_DOC_NOTES":
                        col.EditSettings = new MemoEditSettings
                        {
                            ShowIcon = false
                        };
                        break;
                    case "VZT_CRS_POGASHENO":
                    case "KontragentCurrency":
                    case "Currency":
                        col.ReadOnly = true;
                        break;
                    case "VzaimoraschType":
                        col.EditSettings = new ComboBoxEditSettings
                        {
                            DisplayMember = "Name",
                            //ValueMember = "DocCode",
                            ItemsSource = MainReferences.VzaimoraschetTypes.Values.ToList()
                        };
                        break;
                    case "SHPZ":
                        col.EditSettings = new ComboBoxEditSettings
                        {
                            DisplayMember = "Name",
                            //ValueMember = "DocCode",
                            ItemsSource = MainReferences.SDRSchets.Values.ToList()
                        };
                        break;
                }
            }
        }


    }
}
