using System.ComponentModel;
using System.Linq;
using System.Windows;
using Core.EntityViewModel.Bank;
using Core.Invoices.EntityViewModel;
using DevExpress.Xpf.Editors.Settings;
using DevExpress.Xpf.Grid;
using Helper;
using LayoutManager;

namespace KursAM2.View.Finance
{
    /// <summary>
    ///     Interaction logic for BankOperationsView2.xaml
    /// </summary>
    public partial class BankOperationsView2 : ILayout
    {
        private LayoutManagerGridAutoGenerationColumns gridDocumentsLayout;

        // ReSharper disable once FieldCanBeMadeReadOnly.Local
        private LayoutManagerGridAutoGenerationColumns groupLayout;
        private LayoutManagerGridAutoGenerationColumns treePeriodsLayout;

        public BankOperationsView2()
        {
            InitializeComponent();
            LayoutManager = new LayoutManager.LayoutManager(GetType().Name, this, null);
            groupLayout = new LayoutManagerGridAutoGenerationColumns(GetType().Name, Group);
            Loaded += Bank_Loaded;
            Closing += Bank_Closing;
        }

        public LayoutManager.LayoutManager LayoutManager { get; set; }
        public string LayoutManagerName { get; set; }
        public void SaveLayout()
        {
            gridDocumentsLayout.Save();
            groupLayout.Save();
            treePeriodsLayout.Save();
            LayoutManager.Save();
        }

        private void Bank_Closing(object sender, CancelEventArgs e)
        {
            LayoutManager.Save();
            treePeriodsLayout.Save();
            gridDocumentsLayout.Save();
            groupLayout.Save();
        }

        private void Bank_Loaded(object sender, RoutedEventArgs e)
        {
            LayoutManager.Load();
            var gl = groupLayout.Load();
            Group.Width = gl.Width;
        }

        private void TreePeriods_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            e.Column.ReadOnly = true;
            if (KursGridControlHelper.ColumnFieldTypeCheckDecimal(e.Column.FieldType))
                e.Column.EditSettings = new CalcEditSettings
                {
                    DisplayFormat = "n2",
                    Name = e.Column.FieldName + "Calc"
                };
        }

        private void TreePeriods_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            foreach (var c in TreePeriods.Columns)
            {
                if(c.EditSettings == null) c.EditSettings = new TextEditSettings
                {
                    SelectAllOnMouseUp = true
                };
            }
            treePeriodsLayout = new LayoutManagerGridAutoGenerationColumns(GetType().Name, TreePeriods);
            LayoutManager.RegistrControlLayouts(treePeriodsLayout);
            var columnsInfo = treePeriodsLayout.Load();
            TreePeriods.BeginInit();
            foreach (var colinfo in columnsInfo.ColumnsInfo.OrderBy(_ => _.Order))
            {
                var col = TreePeriods.Columns.FirstOrDefault(_ => _.FieldName == colinfo.FieldName);
                if (col != null)
                    treePeriodsLayout.AutoGeneratedColumnSetProperties(columnsInfo.ColumnsInfo, col, false);
            }
            TreePeriods.EndInit();
        }

        private void GridDocuments_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            e.Column.ReadOnly = true;
            if (KursGridControlHelper.ColumnFieldTypeCheckDecimal(e.Column.FieldType))
            {
                e.Column.EditSettings = new CalcEditSettings
                {
                    DisplayFormat = "n2",
                    Name = e.Column.FieldName + "Calc",
                    SelectAllOnMouseUp = true
                };
            }

            // ReSharper disable once LocalNameCapturedOnly
            BankOperationsViewModel doc;
            switch (e.Column.FieldName)
            {
                case nameof(doc.BankOperationType):
                    var edit = e.Column.EditSettings;
                    if (edit is ComboBoxEditSettings settings) settings.IsEnabled = false;
                    break;
                case nameof(doc.VVT_DOC_NUM):
                    e.Column.EditSettings = new MemoEditSettings
                    {
                        IsTextEditable = false,
                        AllowDefaultButton = false,
                        ShowIcon = false
                    };
                    break;
            }
        }

        private void GridDocuments_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            foreach (var c in GridDocuments.Columns)
            {
                if(c.EditSettings == null) c.EditSettings = new TextEditSettings
                {
                    SelectAllOnMouseUp = true
                };
            }
            gridDocumentsLayout = new LayoutManagerGridAutoGenerationColumns(GetType().Name, GridDocuments);
            LayoutManager.RegistrControlLayouts(gridDocumentsLayout);
            var columnsInfo = gridDocumentsLayout.Load();
            GridDocuments.BeginInit();
            foreach (var colinfo in columnsInfo.ColumnsInfo.OrderBy(_ => _.Order))
            {
                var col = GridDocuments.Columns.FirstOrDefault(_ => _.FieldName == colinfo.FieldName);
                if (col != null)
                    gridDocumentsLayout.AutoGeneratedColumnSetProperties(columnsInfo.ColumnsInfo, col);
            }
            GridDocuments.EndInit();
        }
    }
}