using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Media;
using Core;
using Core.EntityViewModel.Invoices;
using Core.ViewModel.Base;
using Core.WindowsManager;
using DevExpress.Charts.Native;
using DevExpress.Data;
using DevExpress.Xpf.Editors;
using DevExpress.Xpf.Editors.Settings;
using DevExpress.Xpf.Grid;
using DevExpress.Xpf.LayoutControl;
using Helper;
using KursAM2.Dialogs;
using KursAM2.ViewModel.Finance.Invoices;

namespace KursAM2.View.Finance.Invoices
{
    /// <summary>
    ///     Interaction logic for InvoiceForm.xaml
    /// </summary>
    public partial class InvoiceProviderView
    {
        private readonly WindowManager myWManager = new WindowManager();
        public ButtonEdit KontrSelectButton;

        private Dictionary<string, SummaryItemType> listSummaryFactsFields
            = new Dictionary<string, SummaryItemType>();

        private readonly Dictionary<string, SummaryItemType> listSummaryFields
            = new Dictionary<string, SummaryItemType>();

        public PopupCalcEdit PaySummaEditor;

        private ProviderWindowViewModel viewModel => DataContext as ProviderWindowViewModel;

        public InvoiceProviderView()
        {
            listSummaryFields.Add("Nomenkl", SummaryItemType.Count);
            listSummaryFields.Add("SFT_KOL", SummaryItemType.Sum);
            listSummaryFields.Add("SFT_SUMMA_K_OPLATE", SummaryItemType.Sum);
            listSummaryFields.Add("SFT_SUMMA_NAKLAD", SummaryItemType.Sum);
            listSummaryFields.Add("SFT_SUMMA_NDS", SummaryItemType.Sum);
            listSummaryFields.Add("DDT_KOL_PRIHOD", SummaryItemType.Sum);
            InitializeComponent();
        }

        public ComboBoxEdit CurrencyItem { set; get; }

        
        private void LayoutItems_OnAutoGeneratedUI(object sender, EventArgs e)
        {
            //foreach (var item in WindowHelper.GetLogicalChildCollection<MemoEdit>(layoutHeaderItems))
            //    if (item.EditValue != null && !string.IsNullOrWhiteSpace((string) item.EditValue))
            //        item.Height = 80;
        }

        private void LayoutItems_OnAutoGeneratingItem(object sender, DataLayoutControlAutoGeneratingItemEventArgs e)
        {
            e.Item.Name = e.PropertyName;
            var ctx = DataContext as ProviderWindowViewModel;
            var doc = ctx?.Document;
            if (doc == null)
                return;
            var oldContent = e.Item.Content as BaseEdit;
            if (e.PropertyType == typeof(decimal) || e.PropertyType == typeof(decimal?))
            {
                var newContent = new PopupCalcEdit
                {
                    DisplayFormatString = "n2",
                    MaskUseAsDisplayFormat = true
                };
                BindingHelper.CopyBinding(oldContent, newContent, BaseEdit.EditValueProperty);
                e.Item.Content = newContent;
            }

            switch (e.PropertyName)
            {
                case nameof(doc.PaySumma):
                    PaySummaEditor = e.Item.Content as PopupCalcEdit;
                    break;
                case nameof(doc.SF_POSTAV_DATE):
                case nameof(doc.SF_REGISTR_DATE):
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    e.Item.Width = 120;
                    break;
                case nameof(doc.SF_GRUZOOTPRAVITEL):
                case nameof(doc.SF_GRUZOPOLUCHATEL):
                    ViewFluentHelper.SetDefaultMemoEdit(e.Item);
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    e.Item.MinWidth = 400;
                    break;
                case nameof(doc.SF_CRS_SUMMA):
                case nameof(doc.SummaFact):
                case nameof(doc.SF_KONTR_CRS_SUMMA):
                case nameof(doc.Overheads):
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    break;
                case nameof(doc.SF_POSTAV_NUM):
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    break;
                case nameof(doc.SF_IN_NUM):
                    e.Item.IsReadOnly = true;
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    e.Item.Width = 200;
                    break;
                case nameof(doc.Employee):
                    var emplEdit = new ButtonEdit
                    {
                        TextWrapping = TextWrapping.Wrap,
                        IsTextEditable = false
                    };
                    emplEdit.DefaultButtonClick += Employee_DefaultButtonClick;
                    BindingHelper.CopyBinding(oldContent, emplEdit, BaseEdit.EditValueProperty);
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    e.Item.MinWidth = 200;
                    break;
                case nameof(doc.TABELNUMBER):
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    break;
                case nameof(doc.CO):
                    ViewFluentHelper.SetComboBoxEditNotNull(e.Item, doc.CO, "CO",
                        MainReferences.COList.Values.ToList().OrderBy(_ => _.Name));
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    e.Item.HorizontalContentAlignment = HorizontalAlignment.Left;
                    break;
                case nameof(doc.FormRaschet):
                    ViewFluentHelper.SetComboBoxEditNotNull(e.Item, doc.FormRaschet, "FormRaschet",
                        MainReferences.FormRaschets.Values.ToList().OrderBy(_ => _.Name));
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    e.Item.HorizontalContentAlignment = HorizontalAlignment.Left;
                    break;
                case nameof(doc.PayCondition):
                    ViewFluentHelper.SetComboBoxEditNotNull(e.Item, doc.PayCondition, "PayCondition",
                        MainReferences.PayConditions.Values.ToList().OrderBy(_ => _.Name));
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    e.Item.HorizontalContentAlignment = HorizontalAlignment.Left;
                    break;
                case nameof(doc.VzaimoraschetType):
                    ViewFluentHelper.SetComboBoxEditNotNull(e.Item, doc.VzaimoraschetType, "VzaimoraschetType",
                        MainReferences.VzaimoraschetTypes.Values.ToList().OrderBy(_ => _.Name));
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    e.Item.HorizontalContentAlignment = HorizontalAlignment.Left;
                    break;
                case nameof(doc.CREATOR):
                    e.Item.IsReadOnly = true;
                    e.Item.HorizontalAlignment = HorizontalAlignment.Right;
                    break;
                case nameof(doc.Currency):
                    CurrencyItem = ViewFluentHelper.SetComboBoxEditNotNull(e.Item, doc.Currency, "Currency",
                        MainReferences.Currencies.Values.ToList(), width: 50);
                    if (doc.Rows.Count > 0 && doc.State != RowStatus.NewRow)
                        CurrencyItem.IsEnabled = false;
                    break;
                case nameof(doc.Kontragent):
                    KontrSelectButton = new ButtonEdit
                    {
                        TextWrapping = TextWrapping.Wrap,
                        IsTextEditable = false,
                        Tag = e.PropertyName
                    };
                    KontrSelectButton.DefaultButtonClick += Kontr_DefaultButtonClick;
                    BindingHelper.CopyBinding(oldContent, KontrSelectButton, BaseEdit.EditValueProperty);
                    e.Item.Content = KontrSelectButton;
                    e.Item.MinWidth = 500;
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    break;
                case nameof(doc.KontrReceiver):
                    var kontrEdit = new ButtonEdit
                    {
                        TextWrapping = TextWrapping.Wrap,
                        IsTextEditable = false,
                        Tag = e.PropertyName
                    };
                    kontrEdit.DefaultButtonClick += Kontr_DefaultButtonClick;
                    BindingHelper.CopyBinding(oldContent, kontrEdit, BaseEdit.EditValueProperty);
                    e.Item.Content = kontrEdit;
                    e.Item.MinWidth = 500;
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    break;
                case "State":
                    e.Item.IsReadOnly = true;
                    if (e.Item.Content is ComboBoxEdit cbState) cbState.IsEnabled = false;
                    e.Item.HorizontalAlignment = HorizontalAlignment.Right;
                    break;
                case nameof(doc.Note):
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    e.Item.MinWidth = 500;
                    e.Item.MinHeight = 80;
                    break;
                case nameof(doc.PersonaResponsible):
                    var cb = ViewFluentHelper.SetComboBoxEdit(e.Item, doc.PersonaResponsible, "PersonaResponsible",
                        MainReferences.Employees.Values.ToList().OrderBy(_ => _.Name));
                    var delBtn = new ButtonInfo
                    {
                        GlyphKind = GlyphKind.Cancel
                    };
                    delBtn.Click += DelBtn_Click;
                    cb.Buttons.Add(delBtn);
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    e.Item.HorizontalContentAlignment = HorizontalAlignment.Left;
                    e.Item.MinWidth = 600;
                    break;
                case nameof(doc.Contract):
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    e.Item.MinWidth = 300;
                    break;
            }

            ViewFluentHelper.SetModeUpdateProperties(doc, e.Item, e.PropertyName);
        }

        private void DelBtn_Click(object sender, RoutedEventArgs e)
        {
            var ctx = DataContext as ProviderWindowViewModel;
            var doc = ctx?.Document;
            if (doc == null)
                return;
            doc.PersonaResponsible = null;
        }

        private void Kontr_DefaultButtonClick(object sender, RoutedEventArgs e)
        {
            var ctx = DataContext as ProviderWindowViewModel;
            var doc = ctx?.Document;
            if (doc == null)
                return;
            if (doc.PaySumma != 0)
            {
                WindowManager.ShowMessage("По счету есть Оплата. Изменить контрагента нельзя.",
                    "Предупреждение", MessageBoxImage.Information);
                return;
            }

            var kontr = StandartDialogs.SelectKontragent();
            if (kontr == null) return;
            if ((string) (sender as ButtonEdit)?.Tag == "Kontragent")
            {
                ctx.Document.Kontragent = kontr;
                ctx.Document.Currency = kontr.BalansCurrency;
                CurrencyItem.IsEnabled = false;
            }
            else
            {
                ctx.Document.KontrReceiver = kontr;
            }
        }

        private void Employee_DefaultButtonClick(object sender, RoutedEventArgs e)
        {
            var ctx = DataContext as ProviderWindowViewModel;
            var doc = ctx?.Document;
            if (doc == null)
                return;
            var emp = StandartDialogs.SelectEmployee();
            if (emp != null) ctx.Document.Employee = emp;
        }

        private void GridRows_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            if (KursGridControlHelper.ColumnFieldTypeCheckDecimal(e.Column.FieldType))
                e.Column.EditSettings = new CalcEditSettings
                {
                    DisplayFormat = "n2",
                    Name = e.Column.FieldName + "Calc"
                };
            var ctx = DataContext as ProviderWindowViewModel;
            var doc = ctx?.Document;
            if (doc == null)
                return;
            // ReSharper disable once LocalNameCapturedOnly
            // ReSharper disable once RedundantAssignment
            // ReSharper disable once EntityNameCapturedOnly.Local
            var row = new InvoiceProviderRow();
            switch (e.Column.Name)
            {
                case nameof(row.Unit):
                case nameof(row.NomenklNumber):
                    e.Column.ReadOnly = true;
                    break;
                case nameof(row.Nomenkl):
                    var nomenklEdit = new ButtonEditSettings
                    {
                        TextWrapping = TextWrapping.Wrap,
                        IsTextEditable = false
                    };
                    nomenklEdit.DefaultButtonClick += Nomenkl_DefaultButtonClick;
                    e.Column.EditSettings = nomenklEdit;
                    break;
                case nameof(row.Note):
                    e.Column.EditSettings = new MemoEditSettings
                    {
                        ShowIcon = false
                    };
                    break;
                case nameof(row.KontragentForNaklad):
                    var kontrForNakladEdit = new ButtonEditSettings
                    {
                        TextWrapping = TextWrapping.Wrap,
                        IsTextEditable = false
                    };
                    kontrForNakladEdit.DefaultButtonClick += kontrForNaklad_DefaultButtonClick;
                    e.Column.EditSettings = kontrForNakladEdit;
                    break;
                case nameof(row.SDRSchet):
                    e.Column.EditSettings = new ComboBoxEditSettings
                    {
                        ItemsSource = MainReferences.SDRSchets.Values,
                        DisplayMember = "Name",
                        AutoComplete = true
                    };
                    break;
            }
        }

        private void kontrForNaklad_DefaultButtonClick(object sender, RoutedEventArgs e)
        {
            var ctx = DataContext as ProviderWindowViewModel;
            var doc = ctx?.Document;
            if (doc == null)
                return;
            if (ctx.CurrentRow == null) return;
            var kontr = StandartDialogs.SelectKontragent();
            if (kontr == null) return;
            ctx.CurrentRow.KontragentForNaklad = kontr;
        }

        private void Nomenkl_DefaultButtonClick(object sender, RoutedEventArgs e)
        {
            decimal defaultNDS;
            var ctx = DataContext as ProviderWindowViewModel;
            var doc = ctx?.Document;
            if (doc == null)
                return;
            var nomenkls = StandartDialogs.SelectNomenkls();
            if (nomenkls == null || nomenkls.Count <= 0) return;
            using (var entctx = GlobalOptions.GetEntities())
            {
                defaultNDS = Convert.ToDecimal(entctx.PROFILE
                    .FirstOrDefault(_ => _.SECTION == "НОМЕНКЛАТУРА" && _.ITEM == "НДС")?.ITEM_VALUE);
            }

            ctx.CurrentRow.Nomenkl = nomenkls.First();
            ctx.CurrentRow.SFT_NDS_PERCENT = ctx.CurrentRow.Nomenkl.NDSPercent ?? defaultNDS;
        }

        private void GridRows_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            gridRows.TotalSummary.Clear();
            foreach (var c in gridRows.Columns)
            {
                if (!listSummaryFields.ContainsKey(c.FieldName)) continue;
                if (c.EditSettings == null)
                    c.EditSettings = new TextEditSettings
                    {
                        SelectAllOnMouseUp = true
                    };
                if (hasPaysTotalSummary(c.FieldName) != null) continue;
                gridRows.TotalSummary.Add(new GridSummaryItem
                {
                    FieldName = c.FieldName,
                    SummaryType = listSummaryFields[c.FieldName],
                    DisplayFormat = "n2"
                });
            }
        }

        private void GridFacts_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            e.Column.ReadOnly = true;
        }

        private void GridFacts_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            gridFacts.TotalSummary.Clear();
            foreach (var c in gridRows.Columns)
            {
                if (!listSummaryFields.ContainsKey(c.FieldName)) continue;
                if (c.EditSettings == null)
                    c.EditSettings = new TextEditSettings
                    {
                        SelectAllOnMouseUp = true
                    };
                gridFacts.TotalSummary.Add(new GridSummaryItem
                {
                    FieldName = c.FieldName,
                    SummaryType = listSummaryFields[c.FieldName],
                    DisplayFormat = "n2"
                });
            }
        }

        private void LayoutHeaderItems_OnAutoGeneratedGroup(object sender,
            DataLayoutControlAutoGeneratedGroupEventArgs e)
        {
            switch (e.Group.Header)
            {
                case "Условия":
                    e.Group.HorizontalAlignment = HorizontalAlignment.Left;
                    break;
            }
        }

        private void GridPays_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            if (KursGridControlHelper.ColumnFieldTypeCheckDecimal(e.Column.FieldType))
                e.Column.EditSettings = new CalcEditSettings
                {
                    DisplayFormat = "n2",
                    Name = e.Column.FieldName + "Calc"
                };
        }

        private void GridPays_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            gridPays.TotalSummary.Clear();
            gridPays.BeginInit();
            gridPays.CustomSummary += GridPays_OnCustomSummary;
            foreach (var col in gridPays.Columns)
            {
                //myGridPaysLayout.AutoGeneratedColumnSetProperties(columnsInfo.ColumnsInfo, col);
                if (col.EditSettings == null)
                    col.EditSettings = new TextEditSettings
                    {
                        SelectAllOnMouseUp = true
                    };
                if (col.FieldName != "Summa" && col.FieldName != "Note" && col.FieldName != "Rate")
                    col.ReadOnly = true;
                else
                    col.ReadOnly = false;

                if (KursGridControlHelper.ColumnFieldTypeCheckDecimal(col.FieldType))
                {
                    if (col.FieldName == "Rate")
                    {
                        var p = hasPaysTotalSummary(col.FieldName);
                        if (p == null) continue;
                        p.SummaryType = SummaryItemType.Custom;
                        p.DisplayFormat = "n4";
                    }
                    else
                    {
                        if (hasPaysTotalSummary(col.FieldName) != null) continue;
                        gridPays.TotalSummary.Add(new GridSummaryItem
                        {
                            FieldName = col.FieldName,
                            SummaryType = SummaryItemType.Sum,
                            DisplayFormat = "n2"
                        });
                    }
                }
            }

            gridPays.EndInit();
        }

        private GridSummaryItem hasPaysTotalSummary(string fName)
        {
            foreach (var ts in gridPays.TotalSummary)
                if (ts.FieldName == fName)
                    return ts;
            return null;
        }

        private void TableView_CellValueChanged(object sender, CellValueChangedEventArgs e)
        {
            if (!(DataContext is ProviderWindowViewModel dtx)) return;
            switch (e.Column.FieldName)
            {
                case nameof(InvoiceProviderRowCurrencyConvertViewModel.Rate):
                    dtx.CurrentCrsConvertItem?.CalcRow(DirectCalc.Rate);
                    break;
                case nameof(InvoiceProviderRowCurrencyConvertViewModel.Price):
                    dtx.CurrentCrsConvertItem?.CalcRow(DirectCalc.Price);
                    break;
                case nameof(InvoiceProviderRowCurrencyConvertViewModel.PriceWithNaklad):
                    dtx.CurrentCrsConvertItem?.CalcRow(DirectCalc.PriceWithNaklad);
                    break;
                case nameof(InvoiceProviderRowCurrencyConvertViewModel.Quantity):
                    dtx.CurrentCrsConvertItem?.CalcRow(DirectCalc.Quantity);
                    break;
            }

            if (dtx.CurrentRow == null)
            {
                var row = dtx.Document.Rows.FirstOrDefault(_ => _.Code == dtx.CurrentCrsConvertItem.Code);
                if (row != null)
                    row.State = RowStatus.Edited;
            }
            else
            {
                dtx.CurrentRow.State = RowStatus.Edited;
            }
        }

        private void gridRows_MasterRowExpanding(object sender, RowAllowEventArgs e)
        {
            if (DataContext is ProviderWindowViewModel dtx) dtx.CurrentRow = (InvoiceProviderRow) e.Row;
        }

        private void TableViewPay_OnCellValueChanged(object sender, CellValueChangedEventArgs e)
        {
            if (!(DataContext is ProviderWindowViewModel dtx)) return;
            if (e.Column.FieldName == "Summa")
                if ((decimal) e.Value < 0 || (decimal) e.Value > dtx.CurrentPaymentDoc.DocSumma)
                {
                    myWManager.ShowWinUIMessageBox("Сумма не может быть меньше 0 и больше суммы документа",
                        "Ошибка", MessageBoxButton.OK, MessageBoxImage.Error);
                    dtx.CurrentPaymentDoc.Summa = dtx.CurrentPaymentDoc.DocSumma;
                    tableViewPay.CloseEditor();
                }

            if (dtx.Document.myState != RowStatus.NewRow)
                dtx.Document.myState = RowStatus.Edited;

            PaySummaEditor.Foreground = dtx.Document.PaySumma > dtx.Document.SF_CRS_SUMMA
                ? new SolidColorBrush(Colors.Red)
                : new SolidColorBrush(Colors.Black);
            dtx.Document.RaisePropertyChanged("PaySumma");
            dtx.RaisePropertyChanged("Document");
        }

        private void GridPays_OnCustomSummary(object sender, CustomSummaryEventArgs e)
        {
            var dtx = DataContext as ProviderWindowViewModel;
            if (dtx == null) return;
            if (((GridSummaryItem) e.Item).FieldName != "Rate")
                return;
            if (e.IsTotalSummary)
                if (e.SummaryProcess == CustomSummaryProcess.Calculate)
                {
                    var s = 0.0m;
                    var sr = 0.0m;
                    foreach (var item in dtx.Document.PaymentDocs)
                    {
                        s += item.Summa * item.Rate;
                        sr += item.Summa;
                    }

                    e.TotalValue = sr != 0
                        ? Math.Round(s / sr, 4)
                        : Math.Round(dtx.Document.PaymentDocs.Sum(_ => _.Rate) / dtx.Document.PaymentDocs.Count, 4);
                }
        }

        private void CheckEdit_EditValueChanged(object sender, EditValueChangedEventArgs e)
        {
            gridRows.UpdateTotalSummary();
        }

        private void GridRows_OnCurrentItemChanged(object sender, CurrentItemChangedEventArgs e)
        {
            if (viewModel == null) return;
            var colPrice = gridRows.Columns.FirstOrDefault(_ => _.FieldName == "Price");
            var colSumma = gridRows.Columns.FirstOrDefault(_ => _.FieldName == "SFT_SUMMA_K_OPLATE");
            if (colPrice == null || colSumma == null) return;
            if (viewModel?.CurrentRow?.IsIncludeInPrice == true)
            {
                colPrice.ReadOnly = true;
                colSumma.ReadOnly = false;
            }
            else
            {
                colPrice.ReadOnly = false;
                colSumma.ReadOnly = true;
            }
        }
    }
}