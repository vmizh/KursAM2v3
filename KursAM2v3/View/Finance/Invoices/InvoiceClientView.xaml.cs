using System;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using Core;
using Core.EntityViewModel;
using Core.ViewModel.Base;
using Core.WindowsManager;
using DevExpress.Xpf.Editors;
using DevExpress.Xpf.Editors.Settings;
using DevExpress.Xpf.Grid;
using DevExpress.Xpf.LayoutControl;
using Helper;
using KursAM2.Dialogs;
using KursAM2.ViewModel.Finance.Invoices;
using LayoutManager;

namespace KursAM2.View.Finance.Invoices
{
    /// <summary>
    ///     Interaction logic for InvoiceProvider.xaml
    /// </summary>
    public partial class InvoiceClientView : ILayout
    {
        private readonly LayoutManagerGridAutoGenerationColumns gridFactsLayout;

        // ReSharper disable once NotAccessedField.Local
        private readonly LayoutManagerGridAutoGenerationColumns gridPaysLayout;
        private readonly LayoutManagerGridAutoGenerationColumns gridRowsLayout;
        public ButtonEdit KontrSelectButton;

        public InvoiceClientView()
        {
            InitializeComponent();
            LayoutManager = new LayoutManager.LayoutManager(GetType().Name, this, null);
            gridRowsLayout = new LayoutManagerGridAutoGenerationColumns(GetType().Name, gridRows);
            gridFactsLayout = new LayoutManagerGridAutoGenerationColumns(GetType().Name, gridFacts);
            gridPaysLayout = new LayoutManagerGridAutoGenerationColumns(GetType().Name, gridPays);
            LayoutGroup = new LayoutManagerGridAutoGenerationColumns(GetType().Name, mainLayoutControl2);
            Closing += InvoiceForm_Closing;
            Loaded += InvoiceForm_Loaded;
        }

        // ReSharper disable once UnusedAutoPropertyAccessor.Global
        public ComboBoxEdit CurrencyItem { set; get; }
        public LayoutManagerGridAutoGenerationColumns LayoutGroup { get; }
        public LayoutManagerBase LayoutManager { get; set; }
        public string LayoutManagerName { get; set; }

        private void InvoiceForm_Loaded(object sender, RoutedEventArgs e)
        {
            LayoutManager.Load();
            LayoutGroup.Load();
        }

        private void InvoiceForm_Closing(object sender, CancelEventArgs e)
        {
            LayoutManager.Save();
            gridRowsLayout.Save();
            gridFactsLayout.Save();
            gridPaysLayout.Save();
            LayoutGroup.Save();
        }

        private void LayoutItems_OnAutoGeneratedUI(object sender, EventArgs e)
        {
            foreach (var item in WindowHelper.GetLogicalChildCollection<MemoEdit>(layoutHeaderItems))
                if (item.EditValue != null && !string.IsNullOrWhiteSpace((string) item.EditValue))
                    item.Height = 80;
        }

        private void LayoutItems_OnAutoGeneratingItem(object sender, DataLayoutControlAutoGeneratingItemEventArgs e)
        {
            var ctx = DataContext as ClientWindowViewModel;
            var doc = ctx?.Document;
            if (doc == null)
                return;
            var oldContent = e.Item.Content as BaseEdit;
            if (e.PropertyType == typeof(decimal) || e.PropertyType == typeof(decimal?))
            {
                var newContent = new PopupCalcEdit
                {
                    DisplayFormatString = "n2",
                    MaskUseAsDisplayFormat = true
                };
                BindingHelper.CopyBinding(oldContent, newContent, BaseEdit.EditValueProperty);
                e.Item.Content = newContent;
            }
            switch (e.PropertyName)
            {
                case nameof(InvoiceClient.SF_DATE):
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    break;
                case nameof(InvoiceClient.SF_CRS_SUMMA_K_OPLATE):
                case nameof(InvoiceClient.SummaOtgruz):
                case nameof(InvoiceClient.SF_KONTR_CRS_SUMMA):
                case nameof(InvoiceClient.SF_DILER_SUMMA):
                    if (e.Item.Content is PopupCalcEdit calcEdit)
                    {
                        calcEdit.AllowDefaultButton = false;
                        calcEdit.IsReadOnly = true;
                    }
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    e.Item.Width = 300;
                    e.Item.IsReadOnly = true;
                    break;
                case nameof(InvoiceClient.SF_OUT_NUM):
                    var numEdit = new TextEdit
                    {
                        MinWidth = 50
                    };
                    BindingHelper.CopyBinding(oldContent, numEdit, BaseEdit.EditValueProperty);
                    e.Item.Content = numEdit;
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    break;
                case nameof(InvoiceClient.SF_IN_NUM):
                    e.Item.IsReadOnly = true;
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    break;
                case nameof(InvoiceClient.FormRaschet):
                    ViewFluentHelper.SetComboBoxEdit(e.Item, doc.FormRaschet, "FormRaschet",
                        MainReferences.FormRaschets.Values.ToList().OrderBy(_ => _.Name));
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    e.Item.HorizontalContentAlignment = HorizontalAlignment.Left;
                    break;
                case nameof(InvoiceClient.PayCondition):
                    ViewFluentHelper.SetComboBoxEdit(e.Item, doc.PayCondition, "PayCondition",
                        MainReferences.PayConditions.Values.ToList().OrderBy(_ => _.Name));
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    e.Item.HorizontalContentAlignment = HorizontalAlignment.Left;
                    break;
                case nameof(InvoiceClient.VzaimoraschetType):
                    ViewFluentHelper.SetComboBoxEdit(e.Item, doc.VzaimoraschetType, "VzaimoraschetType",
                        MainReferences.VzaimoraschetTypes.Values.ToList().OrderBy(_ => _.Name));
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    e.Item.HorizontalContentAlignment = HorizontalAlignment.Left;
                    break;
                case nameof(InvoiceClient.CO):
                    ViewFluentHelper.SetComboBoxEdit(e.Item, doc.CO, "CO",
                        MainReferences.COList.Values.ToList().OrderBy(_ => _.Name));
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    e.Item.HorizontalContentAlignment = HorizontalAlignment.Left;
                    break;
                case nameof(InvoiceClient.CREATOR):
                    e.Item.IsReadOnly = true;
                    e.Item.HorizontalAlignment = HorizontalAlignment.Right;
                    break;
                case nameof(InvoiceClient.Currency):
                    CurrencyItem = ViewFluentHelper.SetComboBoxEdit(e.Item, doc.Currency, "Currency",
                        MainReferences.Currencies.Values.ToList(), width: 50);
                    if (doc.Rows.Count > 0 && doc.State != RowStatus.NewRow)
                        CurrencyItem.IsEnabled = false;
                    break;
                case nameof(doc.Receiver):
                    var kontrEdit1 = new ButtonEdit
                    {
                        TextWrapping = TextWrapping.Wrap,
                        IsTextEditable = false,
                        Tag = e.PropertyName
                    };
                    kontrEdit1.DefaultButtonClick += Kontr_DefaultButtonClick;
                    BindingHelper.CopyBinding(oldContent, kontrEdit1, BaseEdit.EditValueProperty);
                    e.Item.Content = kontrEdit1;
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    e.Item.Width = 500;
                    break;
                case nameof(doc.Diler):
                    var dilerEdit = new ButtonEdit
                    {
                        TextWrapping = TextWrapping.Wrap,
                        IsTextEditable = false,
                        Tag = e.PropertyName
                    };
                    var dilerBtnCancel = new ButtonInfo
                    {
                        Name = "dilerBtnCancel",
                        ButtonKind = ButtonKind.Simple,
                        GlyphKind = GlyphKind.Cancel
                    };
                    dilerBtnCancel.Click += DilerBtnCancel_Click;
                    dilerEdit.Buttons.Add(dilerBtnCancel);
                    dilerEdit.DefaultButtonClick += Kontr_DefaultButtonClick;
                    BindingHelper.CopyBinding(oldContent, dilerEdit, BaseEdit.EditValueProperty);
                    e.Item.Content = dilerEdit;
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    e.Item.MinWidth = 500;
                    break;
                case nameof(InvoiceClient.Client):
                    KontrSelectButton = new ButtonEdit
                    {
                        TextWrapping = TextWrapping.Wrap,
                        IsTextEditable = false,
                        Tag = e.PropertyName
                    };
                    KontrSelectButton.DefaultButtonClick += Kontr_DefaultButtonClick;
                    BindingHelper.CopyBinding(oldContent, KontrSelectButton, BaseEdit.EditValueProperty);
                    e.Item.Content = KontrSelectButton;
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    e.Item.MinWidth = 500;
                    break;
                case "State":
                    e.Item.IsReadOnly = true;
                    if (e.Item.Content is ComboBoxEdit cbState) cbState.IsEnabled = false;
                    e.Item.HorizontalAlignment = HorizontalAlignment.Right;
                    break;
                case nameof(InvoiceClient.SF_NOTE):
                    //ViewFluentHelper.SetDefaultMemoEdit(e.Item);
                    e.Item.HorizontalAlignment = HorizontalAlignment.Left;
                    e.Item.MinWidth = 600;
                    break;
            }
            ViewFluentHelper.SetModeUpdateProperties(doc, e.Item, e.PropertyName);
        }

        private void DilerBtnCancel_Click(object sender, RoutedEventArgs e)
        {
            var ctx = DataContext as ClientWindowViewModel;
            var doc = ctx?.Document;
            if (doc == null)
                return;
            doc.Diler = null;
            doc.SF_DILER_CRS_DC = null;
            doc.SF_DILER_SUMMA = 0;
            foreach (var r in doc.Rows)
            {
                r.SFT_NACENKA_DILERA = 0;
            }
        }

        private void Kontr_DefaultButtonClick(object sender, RoutedEventArgs e)
        {
            var ctx = DataContext as ClientWindowViewModel;
            var doc = ctx?.Document;
            if (doc == null)
                return;
            if (doc.ShipmentRows.Count > 0)
            {
                WindowManager.ShowMessage("По счету есть расходные накладные. Изменить контрагента нельзя.",
                    "Предупреждение", MessageBoxImage.Information);
                return;
            }
            if (doc.PaySumma != 0)
            {
                WindowManager.ShowMessage("По счету есть Оплата. Изменить контрагента нельзя.",
                    "Предупреждение", MessageBoxImage.Information);
                return;
            }
            var kontr = StandartDialogs.SelectKontragent(doc.Currency);
            if (kontr == null) return;
            if (doc.Rows.Any(_ => !_.IsUsluga && _.Nomenkl.Currency.DocCode != kontr.BalansCurrency.DocCode))
            {
                WindowManager.ShowMessage(
                    "По счету есть товары с валютой, отличной от валюты контрагента. Изменить контрагента нельзя.",
                    "Предупреждение", MessageBoxImage.Information);
                return;
            }
            switch ((sender as ButtonEdit)?.Tag)
            {
                case "Client":
                    doc.Client = kontr;
                    doc.Currency = kontr.BalansCurrency;
                    doc.SF_KONTR_CRS_RATE = 1;
                    break;
                case "Receiver":
                    doc.Receiver = kontr;
                    break;
                case "Diler":
                    doc.Diler = kontr;
                    doc.SF_DILER_CRS_DC = kontr.BalansCurrency.DocCode;
                    doc.SF_DILER_SUMMA = 0;
                    doc.SF_DILER_RATE = 1;
                    break;
            }
        }

        private void GridRows_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            if (LayoutManagerBase.ColumnFieldTypeCheckDecimal(e.Column.FieldType))
                e.Column.EditSettings = new CalcEditSettings
                {
                    DisplayFormat = "n2",
                    Name = e.Column.FieldName + "Calc"
                };
            var ctx = DataContext as ClientWindowViewModel;
            var doc = ctx?.Document;
            if (doc == null)
                return;
            // ReSharper disable once LocalNameCapturedOnly
            // ReSharper disable once RedundantAssignment
            var inv = new InvoiceClientRow();
            switch (e.Column.Name)
            {
                case nameof(inv.Nomenkl):
                    var nomenklEdit = new ButtonEditSettings
                    {
                        TextWrapping = TextWrapping.Wrap,
                        IsTextEditable = false
                    };
                    nomenklEdit.DefaultButtonClick += Nomenkl_DefaultButtonClick;
                    e.Column.EditSettings = nomenklEdit;
                    break;
                //case nameof(inv.Note):
                //    break;
                case nameof(inv.SDRSchet):
                    e.Column.EditSettings = new ComboBoxEditSettings
                    {
                        ItemsSource = MainReferences.SDRSchets.Values,
                        DisplayMember = "Name",
                        AutoComplete = true
                    };
                    break;
            }
        }

        private void Nomenkl_DefaultButtonClick(object sender, RoutedEventArgs e)
        {
            var ctx = DataContext as ClientWindowViewModel;
            if (ctx == null) return;
            if (ctx.CurrentRow.Shipped > 0)
            {
                WindowManager.ShowMessage(this,
                    "По данной позиции произведена отгрузка. Смена номенклатуры невозможна.", "Предупреждение",
                    MessageBoxImage.Stop);
                return;
            }
            var doc = ctx.Document;
            if (doc == null)
                return;
            var nomenkls = StandartDialogs.SelectNomenkls();
            if (nomenkls == null || nomenkls.Count <= 0) return;
            ctx.CurrentRow.Nomenkl = nomenkls.First();
        }

        private void GridRows_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            var columnsInfo = gridRowsLayout.Load();
            gridRows.TotalSummary.Clear();
            foreach (var col in gridRows.Columns)
                gridRowsLayout.AutoGeneratedColumnSetProperties(columnsInfo.ColumnsInfo, col);
        }

        private void GridFacts_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            e.Column.ReadOnly = true;
            if (LayoutManagerBase.ColumnFieldTypeCheckDecimal(e.Column.FieldType))
                e.Column.EditSettings = new CalcEditSettings
                {
                    DisplayFormat = "n2",
                    Name = e.Column.FieldName + "Calc"
                };
        }

        private void GridFacts_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            var columnsInfo = gridFactsLayout.Load();
            gridFacts.TotalSummary.Clear();
            foreach (var col in gridFacts.Columns)
                gridFactsLayout.AutoGeneratedColumnSetProperties(columnsInfo.ColumnsInfo, col);
        }

        private void GridPays_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            e.Column.ReadOnly = true;
            if (LayoutManagerBase.ColumnFieldTypeCheckDecimal(e.Column.FieldType))
                e.Column.EditSettings = new CalcEditSettings
                {
                    DisplayFormat = "n2",
                    Name = e.Column.FieldName + "Calc"
                };
        }

        private void GridPays_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            var columnsInfo = gridPaysLayout.Load();
            gridPays.TotalSummary.Clear();
            foreach (var col in gridPays.Columns)
                gridPaysLayout.AutoGeneratedColumnSetProperties(columnsInfo.ColumnsInfo, col);
        }
    }
}