using System.ComponentModel;
using System.IO;
using System.Windows;
using Core.EntityViewModel;
using Core.ViewModel.Base;
using DevExpress.Data;
using DevExpress.Xpf.Editors.Settings;
using DevExpress.Xpf.Grid;
using DevExpress.Xpf.Grid.LookUp;
using DevExpress.XtraLayout.Resizing;
using KursAM2.ViewModel.Finance;
using KursAM2.ViewModel.Reference;
using LayoutManager;

namespace KursAM2.View.Finance
{
    /// <summary>
    ///     Interaction logic for SFClientView.xaml
    /// </summary>
    public partial class SFClientView : ILayout
    {
        public SFClientView()
        {
            InitializeComponent();
            LayoutManager = new LayoutManager.LayoutManager(GetType().Name, this, mainLayoutControl);
            Loaded += SFClientView_Loaded;
            Closing += SFClientView_Closing;
        }

        public LayoutManagerBase LayoutManager { get; set; }

        private void SFClientView_Closing(object sender, CancelEventArgs e)
        {
            LayoutManager.Save();
        }

        private void SFClientView_Loaded(object sender, RoutedEventArgs e)
        {
            LayoutManager.Load();
        }

        private void PART_GridControlKontragent_Loaded(object sender, RoutedEventArgs e)
        {
            var grid = sender as GridControl;
            var spath = (string) Application.Current.Properties["DataPath"];
            grid?.SaveLayoutToXml($"{spath}\\{GetType().Name}.KontragentLookUpEdit.xml");
        }

        private void PART_GridControlKontragent_Unloaded(object sender, RoutedEventArgs e)
        {
            var grid = sender as GridControl;
            if (grid == null) return;
            var spath = (string) Application.Current.Properties["DataPath"];
            if (!File.Exists($"{spath}\\{GetType().Name}.KontragentLookUpEdit.xml")) return;
            grid.RestoreLayoutFromXml($"{spath}\\{GetType().Name}.KontragentLookUpEdit.xml");
        }

        private void BankGridControl_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            var dtx = DataContext as SFClientWindowViewModel;
            gridRows.TotalSummary.Clear();
            foreach (var col in gridRows.Columns)
            {
                if (col.FieldType == typeof(decimal) || col.FieldType == typeof(decimal?))
                {
                    col.EditSettings = new CalcEditSettings
                    {
                        AllowDefaultButton = true,
                        DisplayFormat = "n2"
                    };
                    var summary = new GridSummaryItem
                    {
                        SummaryType = SummaryItemType.Sum,
                        ShowInColumn = col.FieldName,
                        DisplayFormat = "{0:n2}",
                        FieldName = col.FieldName
                    };
                    gridRows.TotalSummary.Add(summary);
                }
                switch (col.FieldName)
                {
                    case "NomenklViewModel":
                        if (dtx != null)
                        {
                            col.EditSettings = new LookUpEditSettings
                            {
                                DisplayMember = "NOM_NAME",
                                ItemsSource = dtx.Nomenkls,
                                AutoPopulateColumns = true,
                            };
                        }
                        break;
                }
            }

        }

        private void BankGridControl_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            if (e.Column.FieldType == typeof(decimal) || e.Column.FieldType == typeof(decimal?))
            {
                e.Column.EditSettings = new CalcEditSettings
                {
                    AllowDefaultButton = false,
                    DisplayFormat = "n2",
                    MaskUseAsDisplayFormat = true
                };
            }
        }
        private void BankGridControl_OnAutoGeneratingColumnBilling(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            if (e.Column.FieldType == typeof(decimal) || e.Column.FieldType == typeof(decimal?))
            {
                e.Column.EditSettings = new CalcEditSettings
                {
                    AllowDefaultButton = false,
                    DisplayFormat = "n2",
                    MaskUseAsDisplayFormat = true
                };
            }
        }

        private void BankGridControl_OnAutoGeneratedColumnsBilling(object sender, RoutedEventArgs e)
        {
            var dtx = DataContext as SFClientWindowViewModel;
            gridRows.TotalSummary.Clear();
            foreach (var col in gridRows.Columns)
            {
                if (col.FieldType == typeof(decimal) || col.FieldType == typeof(decimal?))
                {
                    col.EditSettings = new CalcEditSettings
                    {
                        AllowDefaultButton = true,
                        DisplayFormat = "n2"
                    };
                    var summary = new GridSummaryItem
                    {
                        SummaryType = SummaryItemType.Sum,
                        ShowInColumn = col.FieldName,
                        DisplayFormat = "{0:n2}",
                        FieldName = col.FieldName
                    };
                    gridRows.TotalSummary.Add(summary);
                }
                switch (col.FieldName)
                {
                    case "DDT_KOL_RASHOD":
                        if (dtx != null)
                        {
                            col.EditSettings = new CalcEditSettings
                            {
                                AllowDefaultButton = false,
                                DisplayFormat = "n2",
                                MaskUseAsDisplayFormat = true
                            };
                        }
                        break;
                }
            }
        }
    }
}