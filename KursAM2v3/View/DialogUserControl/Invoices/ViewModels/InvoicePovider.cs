using System;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.CompilerServices;
using Core.Helper;
using Data;
using DevExpress.Mvvm.DataAnnotations;
using JetBrains.Annotations;

namespace KursAM2.View.DialogUserControl.Invoices.ViewModels
{
    [MetadataType(typeof(DataAnnotationsInvoiceProviderHead))]
    public class InvoiceProviderHead : InvoicePostQuery, INotifyPropertyChanged
    {
        private bool? myIsSelected;

        public bool? IsSelected
        {
            get => myIsSelected;
            set
            {
                if (myIsSelected == value) return;
                myIsSelected = value;
                OnPropertyChanged();
            }
        }

        public InvoiceProviderHead(InvoicePostQuery d)
        {
            DocCode = d.DocCode;
            PrihodDate = d.PrihodDate;
            PostavNum = d.PostavNum;
            Date = d.Date;
            PostDC = d.PostDC;
            Post = d.Post;
            Summa = d.Summa;
            CurrencyDC = d.CurrencyDC;
            Currency = d.Currency;
            ShippedSumma = d.ShippedSumma;
            SF_PAY_COND_DC = d.SF_PAY_COND_DC;
            PayCondition = d.PayCondition;
            EmployeeTabelNumber = d.EmployeeTabelNumber;
            Employee = d.Employee;
            IsExwcuted = d.IsExwcuted;
            GruzoOtpravitel = d.GruzoOtpravitel;
            GruzoPoluchatel = d.GruzoPoluchatel;
            IsAccepted = d.IsAccepted;
            RegisterDate = d.RegisterDate;
            Note = d.Note;
            Creator = d.Creator;
            VzaimoraschetTypeDC = d.VzaimoraschetTypeDC;
            VzaimoraschetType = d.VzaimoraschetType;
            InNum = d.InNum;
            FormRaschetDC = d.FormRaschetDC;
            FormRaschet = d.FormRaschet;
            IsTranzit = d.IsTranzit;
            IsNDSInPrice = d.IsNDSInPrice;
            CO_DC = d.CO_DC;
            CO = d.CO;
            Id = d.Id;
            PersonalResponsibleDC = d.PersonalResponsibleDC;
            PersonalResponsible = d.PersonalResponsible;
            IsInvoiceNakladId = d.IsInvoiceNakladId;
            NakladDistributedSumma = d.NakladDistributedSumma;
            DogovorOfSupplierId = d.DogovorOfSupplierId;
        }

        public event PropertyChangedEventHandler PropertyChanged;

        [NotifyPropertyChangedInvocator]
        public virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    public class DataAnnotationsInvoiceProviderHead : DataAnnotationForFluentApiBase,
        IMetadataProvider<InvoiceProviderHead>
    {
        void IMetadataProvider<InvoiceProviderHead>.BuildMetadata(MetadataBuilder<InvoiceProviderHead> builder)
        {
            SetNotAutoGenerated(builder);
            builder.Property(_ => _.IsSelected).AutoGenerated().DisplayName("Выбран");
            builder.Property(_ => _.InNum).AutoGenerated().DisplayName("№").ReadOnly();
            builder.Property(_ => _.PostavNum).AutoGenerated().DisplayName("Внешн.№").ReadOnly();
            builder.Property(_ => _.Date).AutoGenerated().DisplayName("Даты").DisplayFormatString("dd.MM.yyyy")
                .ReadOnly();
            builder.Property(_ => _.Post).AutoGenerated().DisplayName("Клиент").ReadOnly();
            builder.Property(_ => _.Summa).AutoGenerated().DisplayName("Сумма").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.Currency).AutoGenerated().DisplayName("Валюта").ReadOnly();
            builder.Property(_ => _.IsAccepted).AutoGenerated().DisplayName("Акцептован").ReadOnly();
            builder.Property(_ => _.IsInvoiceNakladId).AutoGenerated().DisplayName("Накладные расходы").ReadOnly();
            builder.Property(_ => _.PaySumma).AutoGenerated().DisplayName("Оплачено").DisplayFormatString("n2")
                .ReadOnly();
            builder.Property(_ => _.ShippedSumma).AutoGenerated().DisplayName("Отгружено").DisplayFormatString("n2")
                .ReadOnly();
            builder.Property(_ => _.CO).AutoGenerated().DisplayName("Центр ответственности").ReadOnly();
            builder.Property(_ => _.VzaimoraschetType).AutoGenerated().DisplayName("Тип заиморасчетов").ReadOnly();
            builder.Property(_ => _.FormRaschet).AutoGenerated().DisplayName("Форма расчетов").ReadOnly();
            builder.Property(_ => _.PayCondition).AutoGenerated().DisplayName("Условия оплаты").ReadOnly();
            builder.Property(_ => _.Note).AutoGenerated().DisplayName("Примечания").ReadOnly();
            builder.Property(_ => _.Creator).AutoGenerated().DisplayName("Создатель").ReadOnly();
            builder.Property(_ => _.IsNDSInPrice).AutoGenerated().DisplayName("НДС в цене").ReadOnly();
        }
    }

    [MetadataType(typeof(DataAnnotationsInvoiceProviderRow))]
    public class InvoiceProviderRow : InvoicePostQuery, INotifyPropertyChanged,IEquatable<InvoiceProviderRow>
    {
        private bool myIsSelected;

        public bool IsSelected
        {
            get => myIsSelected;
            set
            {
                if (myIsSelected == value) return;
                myIsSelected = value;
                OnPropertyChanged();
            }
        }

        public Guid? CurrencyConvertId { set; get; }

        public event PropertyChangedEventHandler PropertyChanged;

        [NotifyPropertyChangedInvocator]
        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public bool Equals(InvoiceProviderRow other)
        {
            return other != null && DocCode == other.DocCode && CODE == other.CODE;
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals((InvoiceProviderRow)obj);
        }

        public override int GetHashCode()
        {
            // ReSharper disable NonReadonlyMemberInGetHashCode
            return (int)((long)DocCode ^ CODE);
            // ReSharper restore NonReadonlyMemberInGetHashCode
        }

        public static bool operator ==(InvoiceProviderRow left, InvoiceProviderRow right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InvoiceProviderRow left, InvoiceProviderRow right)
        {
            return !Equals(left, right);
        }
    }

    public class DataAnnotationsInvoiceProviderRow : DataAnnotationForFluentApiBase,
        IMetadataProvider<InvoiceProviderRow>
    {
        void IMetadataProvider<InvoiceProviderRow>.BuildMetadata(MetadataBuilder<InvoiceProviderRow> builder)
        {
            SetNotAutoGenerated(builder);
            builder.Property(_ => _.IsSelected).AutoGenerated().DisplayName("Выбран");
            builder.Property(_ => _.Nomenkl).AutoGenerated().DisplayName("Номенклатура").ReadOnly();
            builder.Property(_ => _.NomenklNumber).AutoGenerated().DisplayName("Ном.№").ReadOnly();
            builder.Property(_ => _.IsUsluga).AutoGenerated().DisplayName("Услуга").ReadOnly();
            builder.Property(_ => _.Quantity).AutoGenerated().DisplayName("Кол-во").DisplayFormatString("n3")
                .ReadOnly();
            builder.Property(_ => _.Price).AutoGenerated().DisplayName("Цена").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.Shipped).AutoGenerated().DisplayName("Отгружено").DisplayFormatString("n3")
                .ReadOnly();
            builder.Property(_ => _.NDSPercent).AutoGenerated().DisplayName("НДС %").DisplayFormatString("n2")
                .ReadOnly();
            builder.Property(_ => _.NDSSumma).AutoGenerated().DisplayName("Сумма НДС").DisplayFormatString("n2")
                .ReadOnly();
            builder.Property(_ => _.SHPZ).AutoGenerated().DisplayName("Счет расх./дох.").ReadOnly();
        }
    }
}
