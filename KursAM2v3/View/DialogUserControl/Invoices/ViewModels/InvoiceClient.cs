using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.CompilerServices;
using Core.Helper;
using Data;
using DevExpress.Mvvm.DataAnnotations;
using JetBrains.Annotations;

namespace KursAM2.View.DialogUserControl.Invoices.ViewModels
{
    [MetadataType(typeof(DataAnnotationsInvoiceClientHead))]
    public class InvoiceClientHead : InvoiceClientQuery
    {
        public InvoiceClientHead(InvoiceClientQuery d)
        {
            DocCode = d.DocCode;
            Id = d.Id;
            Receiver = d.Receiver;
            CO = d.CO;
            VzaimoraschetType = d.VzaimoraschetType;
            FormRaschet = d.FormRaschet;
            PayCondition = d.PayCondition;
            DocDate = d.DocDate;
            InnerNumber = d.InnerNumber;
            OuterNumber = d.OuterNumber;
            Client = d.Client;
            ClientDC = d.ClientDC;
            Currency = d.Currency;
            SummaOtgruz = d.SummaOtgruz;
            DilerSumma = d.DilerSumma;
            Note = d.Note;
            Diler = d.Diler;
            IsAccepted = d.IsAccepted;
            Summa = d.Summa;
            CREATOR = d.CREATOR;
            IsNDSIncludeInPrice = d.IsNDSIncludeInPrice;
            PaySumma = d.PaySumma;
        }

        public bool IsSelected { get; set; }
    }

    [MetadataType(typeof(DataAnnotationsInvoiceClientRow))]
    public class InvoiceClientRow : InvoiceClientQuery, INotifyPropertyChanged
    {
        private bool myIsSelected;

        public bool IsSelected
        {
            get => myIsSelected;
            set
            {
                if (myIsSelected == value) return;
                myIsSelected = value;
                OnPropertyChanged();
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        [NotifyPropertyChangedInvocator]
        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }


    public class DataAnnotationsInvoiceClientHead : DataAnnotationForFluentApiBase, IMetadataProvider<InvoiceClientHead>
    {
        void IMetadataProvider<InvoiceClientHead>.BuildMetadata(MetadataBuilder<InvoiceClientHead> builder)
        {
            SetNotAutoGenerated(builder);
            builder.Property(_ => _.IsSelected).AutoGenerated().DisplayName("Выбран");
            builder.Property(_ => _.InnerNumber).AutoGenerated().DisplayName("№").ReadOnly();
            builder.Property(_ => _.OuterNumber).AutoGenerated().DisplayName("Внешн.№").ReadOnly();
            builder.Property(_ => _.DocDate).AutoGenerated().DisplayName("Даты").DisplayFormatString("dd.MM.yyyy")
                .ReadOnly();
            builder.Property(_ => _.Client).AutoGenerated().DisplayName("Клиент").ReadOnly();
            builder.Property(_ => _.Summa).AutoGenerated().DisplayName("Сумма").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.Currency).AutoGenerated().DisplayName("Валюта").ReadOnly();
            builder.Property(_ => _.IsAccepted).AutoGenerated().DisplayName("Акцептован").ReadOnly();
            builder.Property(_ => _.PaySumma).AutoGenerated().DisplayName("Оплачено").DisplayFormatString("n2")
                .ReadOnly();
            builder.Property(_ => _.SummaOtgruz).AutoGenerated().DisplayName("Отгружено").DisplayFormatString("n2")
                .ReadOnly();
            builder.Property(_ => _.Diler).AutoGenerated().DisplayName("Дилер").ReadOnly();
            builder.Property(_ => _.Diler).AutoGenerated().DisplayName("Сумма дилера").DisplayFormatString("n2")
                .ReadOnly();
            builder.Property(_ => _.Receiver).AutoGenerated().DisplayName("Отправитель").ReadOnly();
            builder.Property(_ => _.CO).AutoGenerated().DisplayName("Центр ответственности").ReadOnly();
            builder.Property(_ => _.VzaimoraschetType).AutoGenerated().DisplayName("Тип заиморасчетов").ReadOnly();
            builder.Property(_ => _.FormRaschet).AutoGenerated().DisplayName("Форма расчетов").ReadOnly();
            builder.Property(_ => _.PayCondition).AutoGenerated().DisplayName("Условия оплаты").ReadOnly();
            builder.Property(_ => _.Note).AutoGenerated().DisplayName("Примечания").ReadOnly();
            builder.Property(_ => _.CREATOR).AutoGenerated().DisplayName("Создатель").ReadOnly();
            builder.Property(_ => _.IsNDSIncludeInPrice).AutoGenerated().DisplayName("НДС в цене").ReadOnly();
        }
    }

    public class DataAnnotationsInvoiceClientRow : DataAnnotationForFluentApiBase, IMetadataProvider<InvoiceClientRow>
    {
        void IMetadataProvider<InvoiceClientRow>.BuildMetadata(MetadataBuilder<InvoiceClientRow> builder)
        {
            SetNotAutoGenerated(builder);
            builder.Property(_ => _.IsSelected).AutoGenerated().DisplayName("Выбран");
            builder.Property(_ => _.Nomenkl).AutoGenerated().DisplayName("Номенклатура").ReadOnly();
            builder.Property(_ => _.NomNomenkl).AutoGenerated().DisplayName("Ном.№").ReadOnly();
            builder.Property(_ => _.IsUsluga).AutoGenerated().DisplayName("Услуга").ReadOnly();
            builder.Property(_ => _.Quantity).AutoGenerated().DisplayName("Кол-во").DisplayFormatString("n3")
                .ReadOnly();
            builder.Property(_ => _.Price).AutoGenerated().DisplayName("Цена").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.SFT_NACENKA_DILERA).AutoGenerated().DisplayName("Наценка дилера")
                .DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.Shipped).AutoGenerated().DisplayName("Отгружено").DisplayFormatString("n3")
                .ReadOnly();
            builder.Property(_ => _.NDSPercent).AutoGenerated().DisplayName("НДС %").DisplayFormatString("n2")
                .ReadOnly();
            builder.Property(_ => _.SFT_SUMMA_NDS).AutoGenerated().DisplayName("Сумма НДС").DisplayFormatString("n2")
                .ReadOnly();
            builder.Property(_ => _.SDRSchet).AutoGenerated().DisplayName("Счет расх./дох.").ReadOnly();
            builder.Property(_ => _.GruzoDeclaration).AutoGenerated().DisplayName("Груз.декл.").ReadOnly();
        }
    }
}
