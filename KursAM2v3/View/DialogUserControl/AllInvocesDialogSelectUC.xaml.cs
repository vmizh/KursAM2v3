using System;
using System.Linq;
using System.Windows;
using Core.ViewModel.Base;
using DevExpress.Xpf.Core;
using DevExpress.Xpf.Editors.Settings;
using DevExpress.Xpf.Grid;
using DevExpress.Xpf.LayoutControl;
using LayoutManager;

namespace KursAM2.View.DialogUserControl
{
    /// <summary>
    ///     Interaction logic for StandartDialogSelectUC.xaml
    /// </summary>
    public partial class AllInvocesDialogSelectUC : IDataUserControl, ILayout
    {
        public AllInvocesDialogSelectUC(string layoutName)
        {
            LayoutName = layoutName;
            InitializeComponent(); 
            ApplicationThemeHelper.ApplicationThemeName = Theme.MetropolisLightName;
            LayoutManager = new LayoutManager.LayoutManager(LayoutName + "." + GetType().Name, mainLayoutControl);
            LayoutControl = mainLayoutControl;
            Loaded += CashSelectDialogUC_Loaded;
            Unloaded += CashSelectDialogUC_Unloaded;
        }

        public string LayoutName { set; get; }
        public DependencyObject LayoutControl { get; }
        public LayoutManager.LayoutManager LayoutManager { get; set; }
        public string LayoutManagerName { get; set; }
        public void SaveLayout()
        {
            LayoutManager.Save();
        }

        public void ResetLayot()
        {
            throw new NotImplementedException();
        }

        private void CashSelectDialogUC_Unloaded(object sender, RoutedEventArgs e)
        {
            if (string.IsNullOrEmpty(LayoutName))
                throw new NullReferenceException("LayoutName не может быть пустым");
            LayoutManager.Save();
        }

        private void CashSelectDialogUC_Loaded(object sender, RoutedEventArgs e)
        {
            LayoutManager.Load();
            tabsChanged();

        }

        private void tabsChanged()
        {
            var dtx = DataContext as InvoiceAllSearchDialog;
            switch (layoutTabs.SelectedTabIndex)
            {
                case 0:
                    dtx.CurrentProviderItem = null;
                    if (dtx.ClientItemsCollection.Count > 0)
                    {
                        dtx.CurrentClientItem = dtx.ClientItemsCollection.First();
                    }

                    break;
                case 1:
                    dtx.CurrentClientItem = null;
                    if (dtx.ProviderItemsCollection.Count > 0)
                    {
                        dtx.CurrentProviderItem = dtx.ProviderItemsCollection.First();
                    }

                    break;
            }
        }

        private void gridControlClient_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            e.Column.ReadOnly = true;
        }

        private void gridControlClient_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            foreach (var c in gridControlClient.Columns)
            {
                if(c.EditSettings == null) c.EditSettings = new TextEditSettings
                {
                    SelectAllOnMouseUp = true
                };
            }
            foreach (var col in gridControlClient.Columns)
                if (col.FieldType == typeof(decimal) || col.FieldType == typeof(decimal?))
                    col.EditSettings = new CalcEditSettings
                    {
                        AllowDefaultButton = false,
                        DisplayFormat = "n2"
                    };
        }

        private void gridControlProvider_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            e.Column.ReadOnly = true;
        }

        private void gridControlProvider_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            foreach (var c in gridControlProvider.Columns)
            {
                if(c.EditSettings == null) c.EditSettings = new TextEditSettings
                {
                    SelectAllOnMouseUp = true
                };
            }
            foreach (var col in gridControlProvider.Columns)
                if (col.FieldType == typeof(decimal) || col.FieldType == typeof(decimal?))
                    col.EditSettings = new CalcEditSettings
                    {
                        AllowDefaultButton = false,
                        DisplayFormat = "n2"
                    };
        }

        private void gridViewProvider_OnRowDoubleClick(object sender, RowDoubleClickEventArgs e)
        {
        }

        private void gridViewClient_OnRowDoubleClick(object sender, RowDoubleClickEventArgs e)
        {
        }

        private void layoutTabs_SelectedTabChildChanged(object sender, ValueChangedEventArgs<FrameworkElement> e)
        {
            tabsChanged();
        }
    }
}
