using System;
using System.Linq;
using System.Windows;
using Core;
using Core.ViewModel.Base;
using Core.WindowsManager;
using DevExpress.Xpf.Core;
using DevExpress.Xpf.Editors.Settings;
using DevExpress.Xpf.Grid;
using JetBrains.Annotations;
using KursAM2.ViewModel.Reference.Dialogs;
using KursDomain;
using LayoutManager;

namespace KursAM2.View.DialogUserControl
{
    /// <summary>
    ///     Interaction logic for StandartDialogSelectUC.xaml
    /// </summary>
    public partial class StandartDialogSelectTwoTableUC : IDataUserControl, ILayout
    {
        public StandartDialogSelectTwoTableUC([NotNull]string layoutName)
        {
            LayoutName = layoutName;
            InitializeComponent(); 
            ApplicationThemeHelper.ApplicationThemeName = Theme.MetropolisLightName;
            LayoutManager = new LayoutManager.LayoutManager(GlobalOptions.KursSystem(),LayoutName + "." + GetType().Name, mainLayoutControl);
            LayoutControl = gridControlSearch;
            Loaded += CashSelectDialogUC_Loaded;
            Unloaded += CashSelectDialogUC_Unloaded;
        }

        public string LayoutName { set; get; }
        public DependencyObject LayoutControl { get; }
        public LayoutManager.LayoutManager LayoutManager { get; set; }
        public string LayoutManagerName { get; set; }
        public void SaveLayout()
        {
            LayoutManager.Save();
        }

        public void ResetLayot()
        {
            LayoutManager.ResetLayout();
        }

        private void CashSelectDialogUC_Unloaded(object sender, RoutedEventArgs e)
        {
            if (string.IsNullOrEmpty(LayoutName))
                throw new NullReferenceException("LayoutName не может быть пустым");
            LayoutManager.Save();
        }

        private void CashSelectDialogUC_Loaded(object sender, RoutedEventArgs e)
        {
            LayoutManager.Load();
            foreach (var col in gridControlSearch.Columns)
                col.ReadOnly = false;
            gridControlSearch.CurrentItem = null;
        }

        private void GridControlSearch_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            e.Column.ReadOnly = false;
        }

        private void GridControlSearch_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            foreach (var c in gridControlSearch.Columns)
            {
                if(c.EditSettings == null) c.EditSettings = new TextEditSettings
                {
                    SelectAllOnMouseUp = true
                };
            }
            foreach (var col in gridControlSearch.Columns)
                if (col.FieldType == typeof(decimal) || col.FieldType == typeof(decimal?))
                    col.EditSettings = new CalcEditSettings
                    {
                        AllowDefaultButton = false,
                        DisplayFormat = "n2"
                    };
        }

        private void GridViewDocument_OnRowDoubleClick(object sender, RowDoubleClickEventArgs e)
        {
            if (!(DataContext is RSWindowViewModelBase ctx)) return;
            ctx.DialogResult = true;
            ctx.Form?.Close();
        }

        private void GridViewDocument_OnCellValueChanged(object sender, CellValueChangedEventArgs e)
        {
            var dtx = DataContext as BankSelectDialogViewModel;
            if (dtx == null) return;
            using (var ctx = GlobalOptions.GetEntities())
            {
                try
                {
                    var b = ctx.SD_44.FirstOrDefault(_ => _.DOC_CODE == dtx.CurrentItem.DocCode);
                    if (b == null) return;
                    b.BANK_NAME = dtx.CurrentItem.Name;
                    b.CORRESP_ACC = dtx.CurrentItem.CorrAccount;
                    b.ADDRESS = dtx.CurrentItem.Address;
                    b.POST_CODE = dtx.CurrentItem.BIK;
                    ctx.SaveChanges();
                }
                catch(Exception ex)
                {
                    WindowManager.ShowError(Application.Current.MainWindow, ex);
                }
            }
        }

        private void GridControlChild_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            e.Column.Name = e.Column.FieldName;
            e.Column.ReadOnly = false;
        }

        private void GridControlChild_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            foreach (var c in gridControlChild.Columns)
            {
                if(c.EditSettings == null) c.EditSettings = new TextEditSettings
                {
                    SelectAllOnMouseUp = true
                };
            }
            foreach (var col in gridControlChild.Columns)
                if (col.FieldType == typeof(decimal) || col.FieldType == typeof(decimal?))
                    col.EditSettings = new CalcEditSettings
                    {
                        AllowDefaultButton = false,
                        DisplayFormat = "n2"
                    };
        }

        private void GridViewChild_OnRowDoubleClick(object sender, RowDoubleClickEventArgs e)
        {
            
        }

        private void GridViewChild_OnCellValueChanged(object sender, CellValueChangedEventArgs e)
        {
            
        }
    }
}
