using System.ComponentModel;
using System.Windows;
using DevExpress.Data;
using DevExpress.Xpf.Editors.Settings;
using DevExpress.Xpf.Grid;
using KursDomain;
using LayoutManager;

namespace KursAM2.View.Base
{
    /// <summary>
    ///     Interaction logic for BaseSearchView.xaml
    /// </summary>
    public partial class BaseSearchView : ILayout
    {
        public BaseSearchView()
        {
            InitializeComponent();
            //
            LayoutManager =
                new LayoutManager.LayoutManager(GlobalOptions.KursSystem(), GetType().Name, this, gridDocuments);
            Loaded += ProviderSearchView_Loaded;
            Closing += ProviderSearchView_Closing;
        }

        public LayoutManager.LayoutManager LayoutManager { get; set; }
        public string LayoutManagerName { get; set; }

        public void SaveLayout()
        {
            LayoutManager.Save();
        }

        private void ProviderSearchView_Closing(object sender, CancelEventArgs e)
        {
            LayoutManager.Save();
        }

        private void ProviderSearchView_Loaded(object sender, RoutedEventArgs e)
        {
            LayoutManager.Load();
        }

        private void GridDocuments_OnAutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e)
        {
            foreach (var c in gridDocuments.Columns)
                if (c.EditSettings == null)
                    c.EditSettings = new TextEditSettings
                    {
                        SelectAllOnMouseUp = true
                    };
            e.Column.Name = e.Column.FieldName;
            e.Column.ReadOnly = true;
            switch (e.Column.FieldName)
            {
                case "State":
                    e.Column.Visible = false;
                    break;
                case "SF_NOTES":
                    e.Column.EditSettings = new MemoEditSettings
                    {
                        ShowIcon = false
                    };
                    break;
            }
        }

        private void GridDocuments_OnAutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            gridDocuments.TotalSummary.Clear();
            foreach (var col in gridDocuments.Columns)
            {
                col.ReadOnly = true;
                if (col.FieldType == typeof(decimal) || col.FieldType == typeof(decimal?))
                {
                    col.EditSettings = new CalcEditSettings
                    {
                        AllowDefaultButton = false,
                        DisplayFormat = "n2"
                    };
                    var summary = new GridSummaryItem
                    {
                        SummaryType = SummaryItemType.Sum,
                        ShowInColumn = col.FieldName,
                        DisplayFormat = "{0:n2}",
                        FieldName = col.FieldName
                    };
                    gridDocuments.TotalSummary.Add(summary);
                }
            }
        }
    }
}
