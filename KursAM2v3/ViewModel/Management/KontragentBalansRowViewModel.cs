using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Core.Helper;
using Core.ViewModel.Base;
using Data;
using DevExpress.Mvvm.DataAnnotations;
using KursDomain.Documents.CommonReferences;
using KursDomain.IReferences;
using KursDomain.References;

namespace KursAM2.ViewModel.Management
{
    [MetadataType(typeof(DataAnnotationKonragentBalansExtendedRowViewModel))]
    [DataContract]
    public class KontragentBalansExtendedRowViewModel : KontragentBalansRowViewModel
    {
        [DataMember]
        public ICurrency Currency { set; get; }
    }


    [MetadataType(typeof(DataAnnotationKonragentBalansRowViewModel))]
    [DataContract]
    public class KontragentBalansRowViewModel : RSViewModelBase
    {
        private Project myProject;

        [DataMember] public DateTime DocDate { get; set; }
        [DataMember] public string DocNum { get; set; }
        [DataMember] public string DocExtNum { get; set; }
        [DataMember] public string DocName { get; set; }
        [DataMember] public decimal CrsKontrIn { get; set; }
        [DataMember] public decimal CrsKontrOut { get; set; }
        [DataMember] public decimal Nakopit { set; get; }
        [DataMember] public decimal CrsOperRate { get; set; }

        [DataMember] public string Notes { set; get; }
        /// <summary>
        /// Пользователь, последний изменивший документ
        /// </summary>
        [Display(AutoGenerateField = true, Name = "Посл.изменил", Order = 21)]
        public string LastChanger { set; get; }

        /// <summary>
        /// Дата последнего изменения
        /// </summary>
        [Display(AutoGenerateField = true, Name = "Дата посл.изм.", Order = 21)]
        public DateTime LastChangerDate { set; get; }

        [DataMember]
        public Project Project
        {
            get => myProject;
            set
            {
                if (Equals(myProject, value)) return;
                myProject = value;
                RaisePropertyChanged();
            }
        }

        [DataMember] public decimal DocDC { get; set; }

        [DataMember] public int DocRowCode { get; set; }

        [DataMember] public DocumentType DocTypeCode { get; set; }

        [DataMember] public decimal CrsOperIn { get; set; }

        [DataMember] public decimal CrsOperOut { get; set; }

        [DataMember] public decimal CrsOperDC { get; set; }

        [DataMember] public decimal CrsUchRate { get; set; }

        //[DataMember] public new string Id { set; get; }

        public override decimal DocCode => DocDC;

        public static KontragentBalansRowViewModel DbToViewModel(KONTR_BALANS_OPER_ARC db)
        {
            return new KontragentBalansRowViewModel
            {
                DocNum = db.DOC_NUM,
                DocDC = db.DOC_DC,
                DocDate = db.DOC_DATE,
                DocName = db.DOC_NAME,
                CrsKontrIn = (decimal)db.CRS_KONTR_IN,
                CrsKontrOut = (decimal)db.CRS_KONTR_OUT,
                CrsOperDC = db.OPER_CRS_DC,
                CrsOperIn = (decimal)db.CRS_OPER_IN,
                CrsOperOut = (decimal)db.CRS_OPER_OUT,
                DocTypeCode = (DocumentType)db.DOC_TYPE_CODE,
                DocRowCode = db.DOC_ROW_CODE,
                CrsOperRate = (decimal)db.OPER_CRS_RATE,
                Nakopit = 0,
                CrsUchRate = (decimal)db.UCH_CRS_RATE,
                DocExtNum = db.DOC_EXT_NUM
            };
        }

        public static KontragentBalansRowViewModel DbToViewModel(KONTR_BALANS_OPER_ARC db, decimal nakopit)
        {
            var ret = DbToViewModel(db);
            ret.Nakopit = nakopit;
            return ret;
        }
    }

    public class DataAnnotationKonragentBalansRowViewModel : DataAnnotationForFluentApiBase,
        IMetadataProvider<KontragentBalansRowViewModel>
    {
        void IMetadataProvider<KontragentBalansRowViewModel>.BuildMetadata(
            MetadataBuilder<KontragentBalansRowViewModel> builder)
        {
            SetNotAutoGenerated(builder);
            builder.Property(_ => _.Project).NotAutoGenerated();
            builder.Property(_ => _.DocTypeCode).NotAutoGenerated();
            builder.Property(_ => _.DocDate).AutoGenerated().LocatedAt(0).ReadOnly().DisplayName("Дата");
            builder.Property(_ => _.DocNum).AutoGenerated().LocatedAt(1).ReadOnly().DisplayName("№");
            builder.Property(_ => _.DocExtNum).AutoGenerated().LocatedAt(2).ReadOnly().DisplayName("Внеш.№");
            builder.Property(_ => _.DocName).AutoGenerated().LocatedAt(3).ReadOnly().DisplayName("Документ");
            builder.Property(_ => _.CrsKontrIn).AutoGenerated().LocatedAt(4).DisplayFormatString("n2").ReadOnly().DisplayName("Баланс(-)");
            builder.Property(_ => _.CrsKontrOut).AutoGenerated().LocatedAt(5).DisplayFormatString("n2").ReadOnly().DisplayName("Баланс(+)");
            builder.Property(_ => _.Nakopit).AutoGenerated().LocatedAt(6).DisplayFormatString("n2").ReadOnly().DisplayName("Накопительно");
            builder.Property(_ => _.CrsOperRate).AutoGenerated().LocatedAt(7).DisplayFormatString("n4").ReadOnly().DisplayName("Курс");
            builder.Property(_ => _.Notes).AutoGenerated().LocatedAt(8).ReadOnly().DisplayName("Примечание");
            builder.Property(_ => _.LastChanger).AutoGenerated().LocatedAt(8).ReadOnly().DisplayName("Посл.изменил");
            builder.Property(_ => _.LastChangerDate).AutoGenerated().LocatedAt(8).ReadOnly().DisplayName("Дата посл.изм.");
        }
    }

    public class DataAnnotationKonragentBalansExtendedRowViewModel : DataAnnotationForFluentApiBase,
        IMetadataProvider<KontragentBalansExtendedRowViewModel>
    {
        void IMetadataProvider<KontragentBalansExtendedRowViewModel>.BuildMetadata(
            MetadataBuilder<KontragentBalansExtendedRowViewModel> builder)
        {
            SetNotAutoGenerated(builder);
            builder.Property(_ => _.Project).NotAutoGenerated();
            builder.Property(_ => _.DocTypeCode).NotAutoGenerated();
            builder.Property(_ => _.DocDate).AutoGenerated().LocatedAt(0).ReadOnly().DisplayName("Дата");
            builder.Property(_ => _.DocNum).AutoGenerated().LocatedAt(1).ReadOnly().DisplayName("№");
            builder.Property(_ => _.DocExtNum).AutoGenerated().LocatedAt(2).ReadOnly().DisplayName("Внеш.№");
            builder.Property(_ => _.DocName).AutoGenerated().LocatedAt(3).ReadOnly().DisplayName("Документ");
            builder.Property(_ => _.Currency).AutoGenerated().LocatedAt(4).ReadOnly().DisplayName("Валюта");
            builder.Property(_ => _.CrsKontrIn).AutoGenerated().LocatedAt(5).DisplayFormatString("n2").ReadOnly().DisplayName("Баланс(-)");
            builder.Property(_ => _.CrsKontrOut).AutoGenerated().LocatedAt(6).DisplayFormatString("n2").ReadOnly().DisplayName("Баланс(+)");
            builder.Property(_ => _.Nakopit).AutoGenerated().LocatedAt(7).DisplayFormatString("n2").ReadOnly().DisplayName("Накопительно");
            builder.Property(_ => _.CrsOperRate).AutoGenerated().LocatedAt(8).DisplayFormatString("n4").ReadOnly().DisplayName("Курс");
            builder.Property(_ => _.Notes).AutoGenerated().LocatedAt(9).ReadOnly().DisplayName("Примечание");
            builder.Property(_ => _.LastChanger).AutoGenerated().LocatedAt(8).ReadOnly().DisplayName("Посл.изменил");
            builder.Property(_ => _.LastChangerDate).AutoGenerated().LocatedAt(8).ReadOnly().DisplayName("Дата посл.изм.");
        }
    }
}
