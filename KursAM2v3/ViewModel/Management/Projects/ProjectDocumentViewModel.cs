using System;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using Core;
using Core.ViewModel.Base;
using DevExpress.Mvvm.DataAnnotations;
using KursDomain.Documents.CommonReferences;
using KursDomain.Documents.Currency;
using KursDomain.Documents.Management;
using KursDomain.References;

// ReSharper disable UnusedAutoPropertyAccessor.Global
namespace KursAM2.ViewModel.Management.Projects
{
    public static class DataAnnotationsrojectPrihodRowViewModel
    {
        public static void BuildMetadata(MetadataBuilder<ProjectPrihodRowViewModel> builder)
        {
            //builder.Property(_ => _.Project).NotAutoGenerated();
            builder.Property(_ => _.Parent).NotAutoGenerated();
            builder.Property(_ => _.ParentDC).NotAutoGenerated();
            builder.Property(_ => _.ParentId).NotAutoGenerated();
            builder.Property(_ => _.StringId).NotAutoGenerated();
            builder.Property(_ => _.State).NotAutoGenerated();
            builder.Property(_ => _.Id).NotAutoGenerated();
            builder.Property(_ => _.ParentDC).NotAutoGenerated();
            builder.Property(_ => _.DocCode).NotAutoGenerated();
            builder.Property(_ => _.Name).NotAutoGenerated();
            builder.Property(_ => _.SDRSchet).AutoGenerated().DisplayName("Счет Дох/Расх");
            builder.Property(_ => _.NomenklNumber).DisplayName("Ном.№");
            builder.Property(_ => _.NomenklName).DisplayName("Номенклатура");
            builder.Property(_ => _.Quantity).DisplayName("Кол-во");
            builder.Property(_ => _.Summa).DisplayName("Сумма");
            builder.Property(_ => _.Note).DisplayName("Примечание");
            builder.Property(_ => _.ProfitRUB).DisplayName("Доход");
            builder.Property(_ => _.LossRUB).DisplayName("Расход");
            builder.Property(_ => _.ResultRUB).DisplayName("Результат");
            builder.Property(_ => _.ProfitUSD).DisplayName("Доход");
            builder.Property(_ => _.LossUSD).DisplayName("Расход");
            builder.Property(_ => _.ResultUSD).DisplayName("Результат");
            builder.Property(_ => _.ProfitGBP).DisplayName("Доход");
            builder.Property(_ => _.LossGBP).DisplayName("Расход");
            builder.Property(_ => _.ResultGBP).DisplayName("Результат");
            builder.Property(_ => _.ProfitEUR).DisplayName("Доход");
            builder.Property(_ => _.LossEUR).DisplayName("Расход");
            builder.Property(_ => _.ResultEUR).DisplayName("Результат");
            builder.Property(_ => _.ProfitCHF).DisplayName("Доход");
            builder.Property(_ => _.LossCHF).DisplayName("Расход");
            builder.Property(_ => _.ResultCHF).DisplayName("Результат");
            builder.Property(_ => _.ProfitSEK).DisplayName("Доход");
            builder.Property(_ => _.LossSEK).DisplayName("Расход");
            builder.Property(_ => _.ResultSEK).DisplayName("Результат");
            builder.Property(_ => _.DilerRUB).DisplayName("Дилер");
            builder.Property(_ => _.DilerUSD).DisplayName("Дилер");
            builder.Property(_ => _.DilerEUR).DisplayName("Дилер");
            builder.Property(_ => _.DilerCHF).DisplayName("Дилер");
            builder.Property(_ => _.DilerSEK).DisplayName("Дилер");
            builder.Property(_ => _.DilerGBP).DisplayName("Дилер");
            builder.Group("Номенклатура")
                .ContainsProperty(_ => _.NomenklNumber)
                .ContainsProperty(_ => _.NomenklName)
                .ContainsProperty(_ => _.SDRSchet)
                .ContainsProperty(_ => _.Quantity)
                .ContainsProperty(_ => _.Summa);
            builder.Group("RUB")
                .ContainsProperty(_ => _.ProfitRUB)
                .ContainsProperty(_ => _.LossRUB)
                .ContainsProperty(_ => _.DilerRUB)
                .ContainsProperty(_ => _.ResultRUB);
            builder.Group("USD")
                .ContainsProperty(_ => _.ProfitUSD)
                .ContainsProperty(_ => _.LossUSD)
                .ContainsProperty(_ => _.DilerUSD)
                .ContainsProperty(_ => _.ResultUSD);
            builder.Group("EUR")
                .ContainsProperty(_ => _.ProfitEUR)
                .ContainsProperty(_ => _.LossEUR)
                .ContainsProperty(_ => _.DilerEUR)
                .ContainsProperty(_ => _.ResultEUR);
            builder.Group("GBP")
                .ContainsProperty(_ => _.ProfitGBP)
                .ContainsProperty(_ => _.LossGBP)
                .ContainsProperty(_ => _.DilerGBP)
                .ContainsProperty(_ => _.ResultGBP);
            builder.Group("CHF")
                .ContainsProperty(_ => _.ProfitCHF)
                .ContainsProperty(_ => _.LossCHF)
                .ContainsProperty(_ => _.DilerCHF)
                .ContainsProperty(_ => _.ResultCHF);
            builder.Group("SEK")
                .ContainsProperty(_ => _.ProfitSEK)
                .ContainsProperty(_ => _.LossSEK)
                .ContainsProperty(_ => _.DilerSEK)
                .ContainsProperty(_ => _.ResultSEK);
        }
    }

    [MetadataType(typeof(DataAnnotationsrojectPrihodRowViewModel))]
    public class ProjectPrihodRowViewModel : RSViewModelBase, IMultyWithDilerCurrency
    {
        public SDRSchet SDRSchet { set; get; }
        public string NomenklNumber { set; get; }
        public string NomenklName { set; get; }
        public decimal Quantity { set; get; }
        public decimal Summa { set; get; }
        public decimal DilerCHF { get; set; }
        public decimal DilerEUR { get; set; }
        public decimal DilerGBP { get; set; }
        public decimal DilerRUB { get; set; }
        public decimal DilerSEK { get; set; }
        public decimal DilerUSD { get; set; }
        public decimal ProfitCHF { get; set; }
        public decimal ProfitEUR { get; set; }
        public decimal ProfitGBP { get; set; }
        public decimal ProfitRUB { get; set; }
        public decimal ProfitSEK { get; set; }
        public decimal ProfitUSD { get; set; }
        public decimal LossCHF { get; set; }
        public decimal LossEUR { get; set; }
        public decimal LossGBP { get; set; }
        public decimal LossRUB { get; set; }
        public decimal LossSEK { get; set; }
        public decimal LossUSD { get; set; }
        public decimal ResultCHF => ProfitCHF - LossCHF - DilerCHF;
        public decimal ResultEUR => ProfitEUR - LossEUR - DilerEUR;
        public decimal ResultGBP => ProfitGBP - LossGBP - DilerGBP;
        public decimal ResultRUB => ProfitRUB - LossRUB - DilerRUB;
        public decimal ResultSEK => ProfitSEK - LossSEK - DilerSEK;
        public decimal ResultUSD => ProfitUSD - LossUSD - DilerUSD;
    }

    [MetadataType(typeof(DataAnnotationsProjectDocument))]
    public class ProjectDocumentViewModel : RSViewModelBase, IMultyWithDilerCurrency
    {
        /// <summary>
        ///     Сумма подтверждена и отнесена на проект
        /// </summary>
        protected decimal myConfirmedSum;

        public ObservableCollection<ProjectPrihodRowViewModel> DocList { set; get; } =
            new ObservableCollection<ProjectPrihodRowViewModel>();

        public TypeProfitAndLossCalc ProfitOrLossType { set; get; }
        public SDRSchet SDRSchet { set; get; }
        public decimal? WarehouseDocDC { set; get; }
        public int? WarehouseCode { set; get; }

        public string DocInNum { set; get; }

        //public decimal DocDC { set; get; }
        public int? DocRowId { set; get; }
        public Guid ProjectId { set; get; }
        public override Guid Id { set; get; }
        public string DocName { set; get; }
        public string DocNum { set; get; }
        public DateTime DocDate { set; get; }
        public Currency Currency { set; get; }
        public Employee Employee { set; get; }
        public KontragentViewModel KontragentViewModel { set; get; }
        public Nomenkl Nomenkl { set; get; }
        public DocumentType DocType { set; get; }

        /// <summary>
        ///     Сумма по документу
        /// </summary>
        public decimal? Sum { get; set; }

        public virtual decimal ConfirmedSum
        {
            get => myConfirmedSum;
            set
            {
                if (value < 0 || myConfirmedSum == value || Sum - value < 0) return;
                myConfirmedSum = value;
                MultyCurrencyHelper.SetCurrencyValue(myConfirmedSum, Currency, this, ProfitOrLossType);
                RaisePropertyChanged();
            }
        }

        public decimal CurrencyDC { set; get; }
        public int? EmployeeTN { set; get; }
        public decimal? KontragentDC { set; get; }
        public decimal? NomenklDC { set; get; }

        public string FactKontragentName
        {
            get
            {
                if (KontragentViewModel != null)
                    return KontragentViewModel.Name;
                if (Employee != null)
                    return Employee.Name;
                // ReSharper disable once UseNullPropagation
                if (Nomenkl != null)
                    return Nomenkl.Name;
                return null;
            }
        }

        /// <summary>
        ///     уже распределенные суммы по другим проектам
        /// </summary>
        public decimal AnotherDocConfirmedSum { set; get; }

        public decimal DilerCHF { get; set; }
        public decimal DilerEUR { get; set; }
        public decimal DilerGBP { get; set; }
        public decimal DilerRUB { get; set; }
        public decimal DilerSEK { get; set; }
        public decimal DilerUSD { get; set; }
        public decimal ProfitCHF { get; set; }
        public decimal ProfitEUR { get; set; }
        public decimal ProfitGBP { get; set; }
        public decimal ProfitRUB { get; set; }
        public decimal ProfitSEK { get; set; }
        public decimal ProfitUSD { get; set; }
        public decimal LossCHF { get; set; }
        public decimal LossEUR { get; set; }
        public decimal LossGBP { get; set; }
        public decimal LossRUB { get; set; }
        public decimal LossSEK { get; set; }
        public decimal LossUSD { get; set; }
        public decimal ResultCHF => ProfitCHF - LossCHF - DilerCHF;
        public decimal ResultEUR => ProfitEUR - LossEUR - DilerEUR;
        public decimal ResultGBP => ProfitGBP - LossGBP - DilerGBP;
        public decimal ResultRUB => ProfitRUB - LossRUB - DilerRUB;
        public decimal ResultSEK => ProfitSEK - LossSEK - DilerSEK;
        public decimal ResultUSD => ProfitUSD - LossUSD - DilerUSD;
    }

    [MetadataType(typeof(DataAnnotationsProjectDocumentSelect))]
    public class ProjectDocumentSelectViewModel : ProjectDocumentViewModel
    {
        private bool myIsSelected;

        public bool IsSelected
        {
            get => myIsSelected;
            set
            {
                if (myIsSelected == value) return;
                myIsSelected = value;
                RaisePropertyChanged();
            }
        }
    }

    public class ProjectDocument
    {
        public string DocInNum { set; get; }
        public decimal DocDC { set; get; }
        public int? DocRowId { set; get; }
        public decimal? WarehouseDocDC { set; get; }
        public int? WarehouseCode { set; get; }
        public Guid ProjectId { set; get; }
        public Guid Id { set; get; }
        public string DocName { set; get; }
        public string DocNum { set; get; }
        public DateTime DocDate { set; get; }
        public DocumentType DocType { set; get; }
        public decimal? Sum { get; set; }
        public decimal? ConfirmedSum { set; get; }
        public decimal? DilerSum { get; set; }
        public decimal CurrencyDC { set; get; }
        public int? EmployeeTN { set; get; }
        public decimal? KontragentDC { set; get; }
        public decimal? NomenklDC { set; get; }
        public int TypeProfitAndLossCalc { set; get; }
        public decimal Kol { set; get; }
    }

    public static class DataAnnotationsProjectDocumentSelect
    {
        public static void BuildMetadata(MetadataBuilder<ProjectDocumentSelectViewModel> builder)
        {
            builder.Property(_ => _.DocRowId).NotAutoGenerated();
            builder.Property(_ => _.KontragentViewModel).NotAutoGenerated();
            builder.Property(_ => _.Employee).NotAutoGenerated();
            builder.Property(_ => _.Nomenkl).NotAutoGenerated();
            builder.Property(_ => _.WarehouseCode).NotAutoGenerated();
            builder.Property(_ => _.WarehouseDocDC).NotAutoGenerated();
            builder.Property(_ => _.CurrencyDC).NotAutoGenerated();
            builder.Property(_ => _.EmployeeTN).NotAutoGenerated();
            builder.Property(_ => _.KontragentDC).NotAutoGenerated();
            builder.Property(_ => _.NomenklDC).NotAutoGenerated();
            //builder.Property(_ => _.Project).NotAutoGenerated();
            builder.Property(_ => _.DocInNum).NotAutoGenerated();
            builder.Property(_ => _.Parent).NotAutoGenerated();
            builder.Property(_ => _.ParentDC).NotAutoGenerated();
            builder.Property(_ => _.ParentId).NotAutoGenerated();
            builder.Property(_ => _.StringId).NotAutoGenerated();
            builder.Property(_ => _.State).NotAutoGenerated();
            builder.Property(_ => _.Id).NotAutoGenerated();
            builder.Property(_ => _.ParentDC).NotAutoGenerated();
            builder.Property(_ => _.DocCode).NotAutoGenerated();
            builder.Property(_ => _.Name).NotAutoGenerated();
            builder.Property(_ => _.DocType).NotAutoGenerated();
            builder.Property(_ => _.ProjectId).NotAutoGenerated();
            builder.Property(_ => _.ProfitOrLossType).NotAutoGenerated();
            builder.Property(_ => _.SDRSchet).DisplayName("Счет дох/расх");
            builder.Property(_ => _.IsSelected).DisplayName("Выбран");
            builder.Property(_ => _.Currency).DisplayName("Валюта");
            builder.Property(_ => _.DocDate).DisplayName("Дата");
            builder.Property(_ => _.DocName).DisplayName("Документ");
            builder.Property(_ => _.DocNum).DisplayName("№");
            builder.Property(_ => _.FactKontragentName).DisplayName("Контрагент");
            builder.Property(_ => _.Note).DisplayName("Примечание");
            builder.Property(_ => _.ProfitRUB).DisplayName("Доход");
            builder.Property(_ => _.LossRUB).DisplayName("Расход");
            builder.Property(_ => _.ResultRUB).DisplayName("Результат");
            builder.Property(_ => _.ProfitUSD).DisplayName("Доход");
            builder.Property(_ => _.LossUSD).DisplayName("Расход");
            builder.Property(_ => _.ResultUSD).DisplayName("Результат");
            builder.Property(_ => _.ProfitGBP).DisplayName("Доход");
            builder.Property(_ => _.LossGBP).DisplayName("Расход");
            builder.Property(_ => _.ResultGBP).DisplayName("Результат");
            builder.Property(_ => _.ProfitEUR).DisplayName("Доход");
            builder.Property(_ => _.LossEUR).DisplayName("Расход");
            builder.Property(_ => _.ResultEUR).DisplayName("Результат");
            builder.Property(_ => _.ProfitCHF).DisplayName("Доход");
            builder.Property(_ => _.LossCHF).DisplayName("Расход");
            builder.Property(_ => _.ResultCHF).DisplayName("Результат");
            builder.Property(_ => _.ProfitSEK).DisplayName("Доход");
            builder.Property(_ => _.LossSEK).DisplayName("Расход");
            builder.Property(_ => _.ResultSEK).DisplayName("Результат");
            builder.Property(_ => _.DilerRUB).DisplayName("Дилер");
            builder.Property(_ => _.DilerUSD).DisplayName("Дилер");
            builder.Property(_ => _.DilerEUR).DisplayName("Дилер");
            builder.Property(_ => _.DilerCHF).DisplayName("Дилер");
            builder.Property(_ => _.DilerSEK).DisplayName("Дилер");
            builder.Property(_ => _.DilerGBP).DisplayName("Дилер");
            builder.Property(_ => _.Sum).AutoGenerated().DisplayName("Сумма документа");
            builder.Property(_ => _.ConfirmedSum).AutoGenerated().DisplayName("Сумма подтверждена");
            builder.Property(_ => _.AnotherDocConfirmedSum).AutoGenerated().DisplayName("Уже распределено");
            builder.Group("Выбор")
                .ContainsProperty(_ => _.IsSelected);
            builder.Group("Документ")
                .ContainsProperty(_ => _.DocName)
                .ContainsProperty(_ => _.DocDate)
                .ContainsProperty(_ => _.DocNum)
                .ContainsProperty(_ => _.Currency)
                .ContainsProperty(_ => _.Sum)
                .ContainsProperty(_ => _.ConfirmedSum)
                .ContainsProperty(_ => _.AnotherDocConfirmedSum)
                .ContainsProperty(_ => _.FactKontragentName)
                .ContainsProperty(_ => _.SDRSchet)
                .ContainsProperty(_ => _.Note);
            builder.Group("RUB")
                .ContainsProperty(_ => _.ProfitRUB)
                .ContainsProperty(_ => _.LossRUB)
                .ContainsProperty(_ => _.DilerRUB)
                .ContainsProperty(_ => _.ResultRUB);
            builder.Group("USD")
                .ContainsProperty(_ => _.ProfitUSD)
                .ContainsProperty(_ => _.LossUSD)
                .ContainsProperty(_ => _.DilerUSD)
                .ContainsProperty(_ => _.ResultUSD);
            builder.Group("EUR")
                .ContainsProperty(_ => _.ProfitEUR)
                .ContainsProperty(_ => _.LossEUR)
                .ContainsProperty(_ => _.DilerEUR)
                .ContainsProperty(_ => _.ResultEUR);
            builder.Group("GBP")
                .ContainsProperty(_ => _.ProfitGBP)
                .ContainsProperty(_ => _.LossGBP)
                .ContainsProperty(_ => _.DilerGBP)
                .ContainsProperty(_ => _.ResultGBP);
            builder.Group("CHF")
                .ContainsProperty(_ => _.ProfitCHF)
                .ContainsProperty(_ => _.LossCHF)
                .ContainsProperty(_ => _.DilerCHF)
                .ContainsProperty(_ => _.ResultCHF);
            builder.Group("SEK")
                .ContainsProperty(_ => _.ProfitSEK)
                .ContainsProperty(_ => _.LossSEK)
                .ContainsProperty(_ => _.DilerSEK)
                .ContainsProperty(_ => _.ResultSEK);
        }
    }

    public static class DataAnnotationsProjectDocument
    {
        public static void BuildMetadata(MetadataBuilder<ProjectDocumentViewModel> builder)
        {
            builder.Property(_ => _.DocRowId).NotAutoGenerated();
            builder.Property(_ => _.KontragentViewModel).NotAutoGenerated();
            builder.Property(_ => _.Employee).NotAutoGenerated();
            builder.Property(_ => _.Nomenkl).NotAutoGenerated();
            builder.Property(_ => _.WarehouseCode).NotAutoGenerated();
            builder.Property(_ => _.WarehouseDocDC).NotAutoGenerated();
            builder.Property(_ => _.CurrencyDC).NotAutoGenerated();
            builder.Property(_ => _.EmployeeTN).NotAutoGenerated();
            builder.Property(_ => _.KontragentDC).NotAutoGenerated();
            builder.Property(_ => _.NomenklDC).NotAutoGenerated();
            //builder.Property(_ => _.Project).NotAutoGenerated();
            builder.Property(_ => _.DocInNum).NotAutoGenerated();
            builder.Property(_ => _.Parent).NotAutoGenerated();
            builder.Property(_ => _.ParentDC).NotAutoGenerated();
            builder.Property(_ => _.ParentId).NotAutoGenerated();
            builder.Property(_ => _.StringId).NotAutoGenerated();
            builder.Property(_ => _.State).NotAutoGenerated();
            builder.Property(_ => _.Id).NotAutoGenerated();
            builder.Property(_ => _.ParentDC).NotAutoGenerated();
            builder.Property(_ => _.DocCode).NotAutoGenerated();
            builder.Property(_ => _.Name).NotAutoGenerated();
            builder.Property(_ => _.DocType).NotAutoGenerated();
            builder.Property(_ => _.ProjectId).NotAutoGenerated();
            builder.Property(_ => _.ProfitOrLossType).NotAutoGenerated();
            builder.Property(_ => _.AnotherDocConfirmedSum).NotAutoGenerated();
            builder.Property(_ => _.SDRSchet).DisplayName("Счет дох/расх");
            builder.Property(_ => _.Currency).DisplayName("Валюта");
            builder.Property(_ => _.DocDate).DisplayName("Дата");
            builder.Property(_ => _.DocName).DisplayName("Документ");
            builder.Property(_ => _.DocNum).DisplayName("№");
            builder.Property(_ => _.FactKontragentName).DisplayName("Контрагент");
            builder.Property(_ => _.Note).DisplayName("Примечание");
            builder.Property(_ => _.ProfitRUB).DisplayName("Доход");
            builder.Property(_ => _.LossRUB).DisplayName("Расход");
            builder.Property(_ => _.ResultRUB).DisplayName("Результат");
            builder.Property(_ => _.ProfitUSD).DisplayName("Доход");
            builder.Property(_ => _.LossUSD).DisplayName("Расход");
            builder.Property(_ => _.ResultUSD).DisplayName("Результат");
            builder.Property(_ => _.ProfitGBP).DisplayName("Доход");
            builder.Property(_ => _.LossGBP).DisplayName("Расход");
            builder.Property(_ => _.ResultGBP).DisplayName("Результат");
            builder.Property(_ => _.ProfitEUR).DisplayName("Доход");
            builder.Property(_ => _.LossEUR).DisplayName("Расход");
            builder.Property(_ => _.ResultEUR).DisplayName("Результат");
            builder.Property(_ => _.ProfitCHF).DisplayName("Доход");
            builder.Property(_ => _.LossCHF).DisplayName("Расход");
            builder.Property(_ => _.ResultCHF).DisplayName("Результат");
            builder.Property(_ => _.ProfitSEK).DisplayName("Доход");
            builder.Property(_ => _.LossSEK).DisplayName("Расход");
            builder.Property(_ => _.ResultSEK).DisplayName("Результат");
            builder.Property(_ => _.DilerRUB).DisplayName("Дилер");
            builder.Property(_ => _.DilerUSD).DisplayName("Дилер");
            builder.Property(_ => _.DilerEUR).DisplayName("Дилер");
            builder.Property(_ => _.DilerCHF).DisplayName("Дилер");
            builder.Property(_ => _.DilerSEK).DisplayName("Дилер");
            builder.Property(_ => _.DilerGBP).DisplayName("Дилер");
            builder.Property(_ => _.Sum).AutoGenerated().DisplayName("Сумма документа");
            builder.Property(_ => _.ConfirmedSum).AutoGenerated().DisplayName("Сумма подтверждена");
            builder.Group("Документ")
                .ContainsProperty(_ => _.DocName)
                .ContainsProperty(_ => _.DocDate)
                .ContainsProperty(_ => _.DocNum)
                .ContainsProperty(_ => _.Currency)
                .ContainsProperty(_ => _.Sum)
                .ContainsProperty(_ => _.ConfirmedSum)
                .ContainsProperty(_ => _.FactKontragentName)
                .ContainsProperty(_ => _.SDRSchet)
                .ContainsProperty(_ => _.Note);
            builder.Group("RUB")
                .ContainsProperty(_ => _.ProfitRUB)
                .ContainsProperty(_ => _.LossRUB)
                .ContainsProperty(_ => _.DilerRUB)
                .ContainsProperty(_ => _.ResultRUB);
            builder.Group("USD")
                .ContainsProperty(_ => _.ProfitUSD)
                .ContainsProperty(_ => _.LossUSD)
                .ContainsProperty(_ => _.DilerUSD)
                .ContainsProperty(_ => _.ResultUSD);
            builder.Group("EUR")
                .ContainsProperty(_ => _.ProfitEUR)
                .ContainsProperty(_ => _.LossEUR)
                .ContainsProperty(_ => _.DilerEUR)
                .ContainsProperty(_ => _.ResultEUR);
            builder.Group("GBP")
                .ContainsProperty(_ => _.ProfitGBP)
                .ContainsProperty(_ => _.LossGBP)
                .ContainsProperty(_ => _.DilerGBP)
                .ContainsProperty(_ => _.ResultGBP);
            builder.Group("CHF")
                .ContainsProperty(_ => _.ProfitCHF)
                .ContainsProperty(_ => _.LossCHF)
                .ContainsProperty(_ => _.DilerCHF)
                .ContainsProperty(_ => _.ResultCHF);
            builder.Group("SEK")
                .ContainsProperty(_ => _.ProfitSEK)
                .ContainsProperty(_ => _.LossSEK)
                .ContainsProperty(_ => _.DilerSEK)
                .ContainsProperty(_ => _.ResultSEK);
        }
    }
}
