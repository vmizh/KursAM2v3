using System;
using System.ComponentModel.DataAnnotations;
using Core;
using Core.EntityViewModel;
using Core.ViewModel.Base;
using Core.ViewModel.Common;
using DevExpress.Mvvm.DataAnnotations;

// ReSharper disable UnusedAutoPropertyAccessor.Global

namespace KursAM2.ViewModel.Management.Projects
{
    [MetadataType(typeof(DataAnnotationsProjectDocument))]
    public class ProjectDocumentViewModel : RSViewModelBase, IProfitMultiCurrency
    {

        private bool myIsSelected;
        public bool IsSelected
        {
            get => myIsSelected;
            set
            {
                if (myIsSelected == value) return;
                myIsSelected = value;
                RaisePropertyChanged();
            }
        }
        public Project Project { set; get; }
        public decimal DocDC { set; get; }
        public int DocRowId { set; get; }
        public string DocName { set; get; }
        public string DocNum { set; get; }
        public DateTime DocDate { set; get; }
        public Currency Currency { set; get; }
        public Employee Employee { set; get; }
        public Kontragent Kontragent { set; get; }
        public NomenklViewModel NomenklViewModel { set; get; }
        public DocumentType DocType { set; get; }

        public string FactKontragentName
        {
            get
            {
                if (Kontragent != null)
                    return Kontragent.Name;
                if (Employee != null)
                    return Employee.Name;
                // ReSharper disable once UseNullPropagation
                if (NomenklViewModel != null)
                    return NomenklViewModel.Name;
                return null;
            }
        }

        public decimal ProfitCHF { get; set; }
        public decimal ProfitEUR { get; set; }
        public decimal ProfitGBP { get; set; }
        public decimal ProfitRUB { get; set; }
        public decimal ProfitSEK { get; set; }
        public decimal ProfitUSD { get; set; }
        public decimal LossCHF { get; set; }
        public decimal LossEUR { get; set; }
        public decimal LossGBP { get; set; }
        public decimal LossRUB { get; set; }
        public decimal LossSEK { get; set; }
        public decimal LossUSD { get; set; }
        public decimal ResultCHF => ProfitCHF - LossCHF;
        public decimal ResultEUR => ProfitEUR - LossEUR;
        public decimal ResultGBP => ProfitGBP - LossGBP;
        public decimal ResultRUB => ProfitRUB - LossRUB;
        public decimal ResultSEK => ProfitSEK - LossSEK;
        public decimal ResultUSD => ProfitUSD - LossUSD;
    }

    public static class DataAnnotationsProjectDocument
    {
        public static void BuildMetadata(MetadataBuilder<ProjectDocumentViewModel> builder)
        {
            builder.Property(_ => _.DocDC).NotAutoGenerated();
            builder.Property(_ => _.DocRowId).NotAutoGenerated();
            builder.Property(_ => _.Kontragent).NotAutoGenerated();
            builder.Property(_ => _.Employee).NotAutoGenerated();
            builder.Property(_ => _.NomenklViewModel).NotAutoGenerated();
            builder.Property(_ => _.Project).NotAutoGenerated();
            builder.Property(_ => _.Parent).NotAutoGenerated();
            builder.Property(_ => _.ParentDC).NotAutoGenerated();
            builder.Property(_ => _.ParentId).NotAutoGenerated();
            builder.Property(_ => _.StringId).NotAutoGenerated();
            builder.Property(_ => _.State).NotAutoGenerated();
            builder.Property(_ => _.Id).NotAutoGenerated();
            builder.Property(_ => _.ParentDocCode).NotAutoGenerated();
            builder.Property(_ => _.DocCode).NotAutoGenerated();
            builder.Property(_ => _.Name).NotAutoGenerated();
            builder.Property(_ => _.DocType).NotAutoGenerated();


            builder.Property(_ => _.IsSelected).DisplayName("Выбран");
            builder.Property(_ => _.Currency).DisplayName("Валюта");
            builder.Property(_ => _.DocDate).DisplayName("Дата");
            builder.Property(_ => _.DocName).DisplayName("Документ");
            builder.Property(_ => _.DocNum).DisplayName("№");
            builder.Property(_ => _.FactKontragentName).DisplayName("Контрагент");
            builder.Property(_ => _.Note).DisplayName("Примечание");

            builder.Property(_ => _.ProfitRUB).DisplayName("Доход");
            builder.Property(_ => _.LossRUB).DisplayName("Расход");
            builder.Property(_ => _.ResultRUB).DisplayName("Результат");

            builder.Property(_ => _.ProfitUSD).DisplayName("Доход");
            builder.Property(_ => _.LossUSD).DisplayName("Расход");
            builder.Property(_ => _.ResultUSD).DisplayName("Результат");

            builder.Property(_ => _.ProfitGBP).DisplayName("Доход");
            builder.Property(_ => _.LossGBP).DisplayName("Расход");
            builder.Property(_ => _.ResultGBP).DisplayName("Результат");

            builder.Property(_ => _.ProfitEUR).DisplayName("Доход");
            builder.Property(_ => _.LossEUR).DisplayName("Расход");
            builder.Property(_ => _.ResultEUR).DisplayName("Результат");

            builder.Property(_ => _.ProfitCHF).DisplayName("Доход");
            builder.Property(_ => _.LossCHF).DisplayName("Расход");
            builder.Property(_ => _.ResultCHF).DisplayName("Результат");

            builder.Property(_ => _.ProfitSEK).DisplayName("Доход");
            builder.Property(_ => _.LossSEK).DisplayName("Расход");
            builder.Property(_ => _.ResultSEK).DisplayName("Результат");

            builder.Group("Выбор")
                .ContainsProperty(_ => _.IsSelected)
                
                .ContainsProperty(_ => _.FactKontragentName);
            builder.Group("Документ")
                .ContainsProperty(_ => _.DocName)
                .ContainsProperty(_ => _.DocDate)
                .ContainsProperty(_ => _.DocNum)
                .ContainsProperty(_ => _.Currency)
                .ContainsProperty(_ => _.FactKontragentName)
                .ContainsProperty(_ => _.Note); 


            builder.Group("RUB")
                .ContainsProperty(_ => _.ProfitRUB)
                .ContainsProperty(_ => _.LossRUB)
                .ContainsProperty(_ => _.ResultRUB);

            builder.Group("USD")
                .ContainsProperty(_ => _.ProfitUSD)
                .ContainsProperty(_ => _.LossUSD)
                .ContainsProperty(_ => _.ResultUSD);

            builder.Group("EUR")
                .ContainsProperty(_ => _.ProfitEUR)
                .ContainsProperty(_ => _.LossEUR)
                .ContainsProperty(_ => _.ResultEUR);

            builder.Group("GBP")
                .ContainsProperty(_ => _.ProfitGBP)
                .ContainsProperty(_ => _.LossGBP)
                .ContainsProperty(_ => _.ResultGBP);

            builder.Group("CHF")
                .ContainsProperty(_ => _.ProfitCHF)
                .ContainsProperty(_ => _.LossCHF)
                .ContainsProperty(_ => _.ResultCHF);

            builder.Group("SEK")
                .ContainsProperty(_ => _.ProfitSEK)
                .ContainsProperty(_ => _.LossSEK)
                .ContainsProperty(_ => _.ResultSEK);
        }
    }
}