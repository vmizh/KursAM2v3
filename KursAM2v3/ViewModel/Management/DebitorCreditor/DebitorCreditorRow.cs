using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Core.Helper;
using Core.ViewModel.Base;
using DevExpress.Mvvm.DataAnnotations;
using KursDomain.References;

namespace KursAM2.ViewModel.Management.DebitorCreditor
{
    [MetadataType(typeof(DataAnnotationDebitorCreditorRow))]
    [DataContract]
    public class DebitorCreditorRow : RSViewModelBase
    {
        private bool myIsSelected;

        public DebitorCreditorRow()
        {
            Id = Guid.NewGuid();
            Name = Id.ToString();
        }

        [DataMember] public KontragentViewModel KontrInfo { set; get; }

        [DataMember] public decimal UchetStart { set; get; }

        [DataMember] public decimal UchetOut { set; get; }

        [DataMember] public decimal UchetIn { set; get; }

        [DataMember] public decimal UchetEnd { set; get; }

        [DataMember] public decimal KontrStart { set; get; }

        [DataMember] public decimal KontrOut { set; get; }

        [DataMember] public decimal KontrIn { set; get; }

        [DataMember] public decimal KontrEnd { set; get; }

        [DataMember] public decimal Delta { set; get; }

        [DataMember] public bool IsBalans { set; get; }

        [DataMember] public string Kontragent { set; get; }

        [DataMember] public string CurrencyName { set; get; }

        public bool IsSelected
        {
            get => myIsSelected;
            set
            {
                if (myIsSelected == value) return;
                myIsSelected = value;
                RaisePropertyChanged();
            }
        }
    }

    public class DataAnnotationDebitorCreditorRow : DataAnnotationForFluentApiBase,
        IMetadataProvider<DebitorCreditorRow>
    {
        void IMetadataProvider<DebitorCreditorRow>.BuildMetadata(
            MetadataBuilder<DebitorCreditorRow> builder)
        {
            SetNotAutoGenerated(builder);
            builder.Property(_ => _.KontrInfo).NotAutoGenerated();
            builder.Property(_ => _.Kontragent).AutoGenerated().LocatedAt(0).DisplayName("Контрагент").ReadOnly();
            builder.Property(_ => _.CurrencyName).AutoGenerated().LocatedAt(1).DisplayName("Валюта").ReadOnly();
            builder.Property(_ => _.KontrStart).AutoGenerated().LocatedAt(2).DisplayName("Начало")
                .DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.KontrOut).AutoGenerated().LocatedAt(4).DisplayName("Баланс(-)")
                .DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.KontrIn).AutoGenerated().LocatedAt(3).DisplayName("Баланс(+)")
                .DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.KontrEnd).AutoGenerated().LocatedAt(5).DisplayName("Конец")
                .DisplayFormatString("n2").ReadOnly();

            builder.Property(_ => _.UchetStart).AutoGenerated().LocatedAt(6).DisplayName("Начало(уч)")
                .DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.UchetOut).AutoGenerated().LocatedAt(8).DisplayName("Уч. Баланс(-)")
                .DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.UchetIn).AutoGenerated().LocatedAt(7).DisplayName("Уч. Баланс(+)")
                .DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.UchetEnd).AutoGenerated().LocatedAt(9).DisplayName("Конец (уч)")
                .DisplayFormatString("n2").ReadOnly();

            builder.Property(_ => _.IsBalans).AutoGenerated().LocatedAt(10).DisplayName("Баланс").ReadOnly();
            builder.Property(_ => _.IsSelected).AutoGenerated().LocatedAt(11).DisplayName("Выбран").ReadOnly();
        }
    }
}
