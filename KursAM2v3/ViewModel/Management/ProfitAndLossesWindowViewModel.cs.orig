using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data.Entity;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using Core;
using Core.Menu;
using Core.ViewModel.Base;
using Core.ViewModel.Common;
using Core.WindowsManager;
using Data;
using DevExpress.Xpf.Grid;
using Helper;
using KursAM2.Managers;
using KursAM2.View.Base;
using KursAM2.View.Management;
using KursAM2.ViewModel.Logistiks;
using  Core.EntityViewModel;

namespace KursAM2.ViewModel.Management
{
    public class ProfitAndLossesWindowViewModel : RSWindowViewModelBase
    {
        private readonly List<Guid?> myTempIdList = new List<Guid?>();
        private readonly List<Guid?> myTempIdList2 = new List<Guid?>();
        private ProfitAndLossesMainRowViewModel myBalansCalc;

        private ProfitAndLossesMainRowViewModel myBalansFact;


        private ProfitAndLossesExtendRowViewModel myCurrentExtend;
        private DateTime myEndDate;
        private List<CURRENCY_RATES_CB> myRates;
        private DateTime myStartDate;

        private int myTabSelected;
        //private DateTime innerStartDate;

        public ProfitAndLossesWindowViewModel()
        {
            Main =
                new ObservableCollection<ProfitAndLossesMainRowViewModel>();
            MainNach =
                new ObservableCollection<ProfitAndLossesMainRowViewModel>();
            Extend = new ObservableCollection<ProfitAndLossesExtendRowViewModel>();
            ExtendNach = new ObservableCollection<ProfitAndLossesExtendRowViewModel>();
            ExtendActual = new ObservableCollection<ProfitAndLossesExtendRowViewModel>();
            LeftMenuBar = MenuGenerator.BaseLeftBar(this);
            RightMenuBar = GetRightMenu();
        }


        public ICommand NomenklCalcCommand
        {
            get { return new Command(NomenklCalc, _ => CurrentExtend?.NomenklViewModel != null); }
        }

        public ProfitAndLossesExtendRowViewModel CurrentExtend
        {
            get => myCurrentExtend;
            set
            {
                if (myCurrentExtend == value) return;
                myCurrentExtend = value;
                RaisePropertyChanged();
            }
        }

        public DateTime StartDate
        {
            set
            {
                if (Equals(value, myStartDate)) return;
                myStartDate = value;
                if (myStartDate > EndDate)
                    EndDate = myStartDate;
                RaisePropertyChanged();
            }
            get
            {
                if (myStartDate == DateTime.MinValue)
                    myStartDate = DateTime.Today;
                return myStartDate;
            }
        }

        public DateTime EndDate
        {
            set
            {
                if (Equals(value, myEndDate)) return;
                myEndDate = value;
                if (myEndDate < StartDate)
                    StartDate = myEndDate;
                RaisePropertyChanged();
            }
            get
            {
                if (myEndDate == DateTime.MinValue)
                    myEndDate = DateTime.Today;
                return myEndDate;
            }
        }

        public int TabSelected
        {
            get => myTabSelected;
            set
            {
                if (myTabSelected == value) return;
                myTabSelected = value;
                ExtendActual.Clear();
                RaisePropertyChanged(nameof(ExtendActual));
                RaisePropertyChanged();
                if (TabSelected == 0)
                    RaisePropertyChanged(nameof(Main));
                if (TabSelected == 1)
                    RaisePropertyChanged(nameof(MainNach));
            }
        }

        public ProfitAndLossesMainRowViewModel BalansFact
        {
            get => myBalansFact;
            set
            {
                if (myBalansFact == value) return;
                myBalansFact = value;
                RaisePropertyChanged();
            }
        }

        public ProfitAndLossesMainRowViewModel BalansCalc
        {
            get => myBalansCalc;
            set
            {
                if (myBalansCalc == value) return;
                myBalansCalc = value;
                RaisePropertyChanged();
            }
        }

        public ObservableCollection<ProfitAndLossesMainRowViewModel> Main { set; get; }
        public ObservableCollection<ProfitAndLossesMainRowViewModel> MainNach { set; get; }
        public ObservableCollection<ProfitAndLossesExtendRowViewModel> Extend { set; get; }
        public ObservableCollection<ProfitAndLossesExtendRowViewModel> ExtendNach { set; get; }

        // ReSharper disable once CollectionNeverQueried.Global
        public ObservableCollection<ProfitAndLossesExtendRowViewModel> ExtendActual { set; get; }

        //private void CalcCashAvans()
        //{
        //    using (var ent = GlobalOptions.GetEntities())
        //    {
        //        var data = (from sd34 in ent.SD_34
        //            from sd2 in ent.SD_2
        //            where (sd34.TABELNUMBER == sd2.TABELNUMBER)
        //                  && (sd34.DATE_ORD >= StartDate) && (sd34.DATE_ORD <= EndDate)
        //                  && ((sd34.NCODE ?? 0) != 100)
        //            select new
        //            {
        //                Date = sd34.DATE_ORD,
        //                SotrCrsDC = sd2.crs_dc,
        //                TabelNumber = sd2.TABELNUMBER,
        //                Name = sd2.NAME,
        //                Summa = sd34.SUMM_ORD,
        //                Note = sd34.NOTES_ORD + " " + sd34.NAME_ORD + " " + sd34.OSN_ORD
        //            }).ToList();
        //        var emps = ent.SD_2.ToList();
        //        foreach (var d in data)
        //        {
        //            var crs = MainReferences.Currencies[d.SotrCrsDC.Value];
        //            var newOp = new ProfitAndLossesExtendRowViewModel
        //            {
        //                GroupId = Guid.Parse("{52EA160E-27DC-47E1-9006-70DF349943F6}"),
        //                Name = emps.Single(_ => _.TABELNUMBER == d.TabelNumber).NAME,
        //                Date = d.Date.Value,
        //                Note = d.Note
        //            };
        //            switch (crs.Name)
        //            {
        //                case CurrencyCode.RUBName:
        //                case CurrencyCode.RURName:
        //                    newOp.ProfitRUB = 0;
        //                    newOp.LossRUB = (decimal) d.Summa;
        //                    newOp.ResultRUB = -(decimal) d.Summa;
        //                    break;
        //                case CurrencyCode.USDName:
        //                    newOp.LossUSD = 0;
        //                    newOp.LossUSD = (decimal) d.Summa;
        //                    newOp.ResultUSD = -(decimal) d.Summa;
        //                    break;
        //                case CurrencyCode.EURName:
        //                    newOp.ProfitEUR = 0;
        //                    newOp.LossEUR = (decimal) d.Summa;
        //                    newOp.ResultEUR = -(decimal) d.Summa;
        //                    break;
        //            }
        //            Extend.Add(newOp);
        //            ExtendNach.Add(newOp);
        //        }
        //        var data2 = (from sd33 in ent.SD_33
        //            from sd2 in ent.SD_2
        //            where (sd33.TABELNUMBER == sd2.TABELNUMBER)
        //                  && (sd33.DATE_ORD >= StartDate) && (sd33.DATE_ORD <= EndDate)
        //            select new
        //            {
        //                Date = sd33.DATE_ORD,
        //                SotrCrsDC = sd2.crs_dc,
        //                TabelNumber = sd2.TABELNUMBER,
        //                Name = sd2.NAME,
        //                Summa = sd33.SUMM_ORD,
        //                Note = sd33.NOTES_ORD + " " + sd33.NAME_ORD + " " + sd33.OSN_ORD
        //            }).ToList();
        //        foreach (var d in data2)
        //        {
        //            var crs = MainReferences.Currencies[d.SotrCrsDC.Value];
        //            var newOp = new ProfitAndLossesExtendRowViewModel
        //            {
        //                GroupId = Guid.Parse("{7550849B-1D51-445B-B692-CE3FF7AB11B0}"),
        //                Name = emps.Single(_ => _.TABELNUMBER == d.TabelNumber).NAME,
        //                Date = d.Date.Value,
        //                Note = d.Note
        //            };
        //            switch (crs.Name)
        //            {
        //                case CurrencyCode.RUBName:
        //                case CurrencyCode.RURName:
        //                    newOp.ProfitRUB = (decimal) d.Summa;
        //                    newOp.LossRUB = 0;
        //                    newOp.ResultRUB = (decimal) d.Summa;
        //                    break;
        //                case CurrencyCode.USDName:
        //                    newOp.LossUSD = (decimal) d.Summa;
        //                    newOp.LossUSD = 0;
        //                    newOp.ResultUSD = -(decimal) d.Summa;
        //                    break;
        //                case CurrencyCode.EURName:
        //                    newOp.ProfitEUR = (decimal) d.Summa;
        //                    newOp.LossEUR = 0;
        //                    newOp.ResultEUR = (decimal) d.Summa;
        //                    break;
        //            }
        //            Extend.Add(newOp);
        //            ExtendNach.Add(newOp);
        //        }
        //        //Guid.Parse("{7550849B-1D51-445B-B692-CE3FF7AB11B0}")
        //    }
        //}

        public override bool IsDocumentOpenAllow =>
            CurrentExtend != null && DocumentsOpenManager.IsDocumentOpen(CurrentExtend.DocTypeCode);

        private void ResetCurrencyDetailColumns()
        {
            if (Form is ProfitAndLosses frm)
                foreach (var column in frm.GridControlExtend.Columns)
                {
                    GridControlBand b;
                    switch (column.FieldName)
                    {
                        case "ProfitEUR":
                            b =
                                frm.GridControlExtend.Bands.FirstOrDefault(
                                    _ => _.Columns.Any(c => c.FieldName == "ProfitEUR"));
                            if (b != null)
                                b.Visible = ExtendActual.Sum(_ => _.ProfitEUR) != 0 ||
                                            ExtendActual.Sum(_ => _.LossEUR) != 0;
                            break;
                        case "LossUSD":
                            b =
                                frm.GridControlExtend.Bands.FirstOrDefault(
                                    _ => _.Columns.Any(c => c.FieldName == "LossUSD"));
                            if (b != null)
                                b.Visible = ExtendActual.Sum(_ => _.ProfitUSD) != 0 ||
                                            ExtendActual.Sum(_ => _.LossUSD) != 0;
                            break;
                        case "ProfitRUB":
                            b =
                                frm.GridControlExtend.Bands.FirstOrDefault(
                                    _ => _.Columns.Any(c => c.FieldName == "ProfitRUB"));
                            if (b != null)
                                b.Visible = ExtendActual.Sum(_ => _.ProfitRUB) != 0 ||
                                            ExtendActual.Sum(_ => _.LossRUB) != 0;
                            break;
                        case "ProfitGBP":
                            b =
                                frm.GridControlExtend.Bands.FirstOrDefault(
                                    _ => _.Columns.Any(c => c.FieldName == "ProfitGBP"));
                            if (b != null)
                                b.Visible = ExtendActual.Sum(_ => _.ProfitGBP) != 0 ||
                                            ExtendActual.Sum(_ => _.LossGBP) != 0;
                            break;
                        case "ProfitCHF":
                            b =
                                frm.GridControlExtend.Bands.FirstOrDefault(
                                    _ => _.Columns.Any(c => c.FieldName == "ProfitCHF"));
                            if (b != null)
                                b.Visible = ExtendActual.Sum(_ => _.ProfitCHF) != 0 ||
                                            ExtendActual.Sum(_ => _.LossCHF) != 0;
                            break;
                        case "ProfitSEK":
                            b =
                                frm.GridControlExtend.Bands.FirstOrDefault(
                                    _ => _.Columns.Any(c => c.FieldName == "ProfitSEK"));
                            if (b != null)
                                b.Visible = ExtendActual.Sum(_ => _.ProfitSEK) != 0 ||
                                            ExtendActual.Sum(_ => _.LossSEK) != 0;
                            break;
                    }
                }
        }

        private void NomenklCalc(object obj)
        {
            if (CurrentExtend?.NomenklViewModel == null) return;
            var ctx = new NomPriceWindowViewModel((decimal) CurrentExtend?.NomenklViewModel.DocCode);
            var dlg = new SelectDialogView {DataContext = ctx};
            dlg.ShowDialog();
        }

        private ObservableCollection<MenuButtonInfo> GetRightMenu()
        {
            return new ObservableCollection<MenuButtonInfo>
            {
                new MenuButtonInfo
                {
                    Alignment = Dock.Right,
                    HAlignment = HorizontalAlignment.Right,
                    Content = Application.Current.Resources["menuRefresh"] as ControlTemplate,
                    ToolTip = "Обновить",
                    Command = RefreshDataCommand
                },
                new MenuButtonInfo
                {
                    Alignment = Dock.Right,
                    HAlignment = HorizontalAlignment.Right,
                    Content = Application.Current.Resources["menuSave"] as ControlTemplate,
                    ToolTip = "Сохранить изменения",
                    Command = SaveDataCommand
                },
                new MenuButtonInfo
                {
                    Alignment = Dock.Right,
                    HAlignment = HorizontalAlignment.Right,
                    Content = Application.Current.Resources["menuExit"] as ControlTemplate,
                    ToolTip = "Закрыть документ",
                    Command = CloseWindowCommand
                }
            };
        }

        private void SummaNode(Guid? id)
        {
            if (id == null) return;
            var m = Main.Single(_ => _.Id == id);

            if (id == Guid.Parse("{E7DA6232-CAA0-4358-9BAE-5D96C2EE248A}"))
            {
                m.ProfitRUB = Main.Where(_ => _.ParentId == id).Sum(_ => _.ProfitRUB);
                m.LossRUB = Main.Where(_ => _.ParentId == id).Sum(_ => _.LossRUB);
                m.ResultRUB = m.ProfitRUB - m.LossRUB;

                m.ProfitUSD = Main.Where(_ => _.ParentId == id).Sum(_ => _.ProfitUSD);
                m.LossUSD = Main.Where(_ => _.ParentId == id).Sum(_ => _.LossUSD);
                m.ResultUSD = m.ProfitUSD - m.LossUSD;

                m.ProfitEUR = Main.Where(_ => _.ParentId == id).Sum(_ => _.ProfitEUR);
                m.LossEUR = Main.Where(_ => _.ParentId == id).Sum(_ => _.LossEUR);
                m.ResultEUR = m.ProfitEUR - m.LossEUR;

                m.ProfitGBP = Main.Where(_ => _.ParentId == id).Sum(_ => _.ProfitGBP);
                m.LossGBP = Main.Where(_ => _.ParentId == id).Sum(_ => _.LossGBP);
                m.ResultGBP = m.ProfitGBP - m.LossGBP;

                m.ProfitCHF = Main.Where(_ => _.ParentId == id).Sum(_ => _.ProfitCHF);
                m.LossCHF = Main.Where(_ => _.ParentId == id).Sum(_ => _.LossCHF);
                m.ResultCHF = m.ProfitCHF - m.LossCHF;

                m.ProfitSEK = Main.Where(_ => _.ParentId == id).Sum(_ => _.ProfitSEK);
                m.LossSEK = Main.Where(_ => _.ParentId == id).Sum(_ => _.LossSEK);
                m.ResultSEK = m.ProfitSEK - m.LossSEK;
            }
            else
            {
                m.ProfitRUB = m.CalcType == TypeProfitAndLossCalc.IsProfit || m.CalcType == TypeProfitAndLossCalc.IsAll
                    ? Main.Where(_ => _.ParentId == id).Sum(_ => _.ProfitRUB)
                    : 0;
                m.LossRUB = m.CalcType == TypeProfitAndLossCalc.IsLoss || m.CalcType == TypeProfitAndLossCalc.IsAll
                    ? Main.Where(_ => _.ParentId == id).Sum(_ => _.LossRUB)
                    : 0;
                m.ResultRUB = Main.Where(_ => _.ParentId == id).Sum(_ => _.ResultRUB);

                m.ProfitUSD = m.CalcType == TypeProfitAndLossCalc.IsProfit || m.CalcType == TypeProfitAndLossCalc.IsAll
                    ? Main.Where(_ => _.ParentId == id).Sum(_ => _.ProfitUSD)
                    : 0;
                m.LossUSD = m.CalcType == TypeProfitAndLossCalc.IsLoss || m.CalcType == TypeProfitAndLossCalc.IsAll
                    ? Main.Where(_ => _.ParentId == id).Sum(_ => _.LossUSD)
                    : 0;
                m.ResultUSD = Main.Where(_ => _.ParentId == id).Sum(_ => _.ResultUSD);

                m.ProfitEUR = m.CalcType == TypeProfitAndLossCalc.IsProfit || m.CalcType == TypeProfitAndLossCalc.IsAll
                    ? Main.Where(_ => _.ParentId == id).Sum(_ => _.ProfitEUR)
                    : 0;
                m.LossEUR = m.CalcType == TypeProfitAndLossCalc.IsLoss || m.CalcType == TypeProfitAndLossCalc.IsAll
                    ? Main.Where(_ => _.ParentId == id).Sum(_ => _.LossEUR)
                    : 0;
                m.ResultEUR = Main.Where(_ => _.ParentId == id).Sum(_ => _.ResultEUR);

                m.ProfitGBP = m.CalcType == TypeProfitAndLossCalc.IsProfit || m.CalcType == TypeProfitAndLossCalc.IsAll
                    ? Main.Where(_ => _.ParentId == id).Sum(_ => _.ProfitGBP)
                    : 0;
                m.LossGBP = m.CalcType == TypeProfitAndLossCalc.IsLoss || m.CalcType == TypeProfitAndLossCalc.IsAll
                    ? Main.Where(_ => _.ParentId == id).Sum(_ => _.LossGBP)
                    : 0;
                m.ResultGBP = Main.Where(_ => _.ParentId == id).Sum(_ => _.ResultGBP);

                m.ProfitCHF = m.CalcType == TypeProfitAndLossCalc.IsProfit || m.CalcType == TypeProfitAndLossCalc.IsAll
                    ? Main.Where(_ => _.ParentId == id).Sum(_ => _.ProfitCHF)
                    : 0;
                m.LossCHF = m.CalcType == TypeProfitAndLossCalc.IsLoss || m.CalcType == TypeProfitAndLossCalc.IsAll
                    ? Main.Where(_ => _.ParentId == id).Sum(_ => _.LossCHF)
                    : 0;
                m.ResultCHF = Main.Where(_ => _.ParentId == id).Sum(_ => _.ResultCHF);

                m.ProfitSEK = m.CalcType == TypeProfitAndLossCalc.IsProfit || m.CalcType == TypeProfitAndLossCalc.IsAll
                    ? Main.Where(_ => _.ParentId == id).Sum(_ => _.ProfitSEK)
                    : 0;
                m.LossSEK = m.CalcType == TypeProfitAndLossCalc.IsLoss || m.CalcType == TypeProfitAndLossCalc.IsAll
                    ? Main.Where(_ => _.ParentId == id).Sum(_ => _.LossSEK)
                    : 0;
                m.ResultSEK = Main.Where(_ => _.ParentId == id).Sum(_ => _.ResultSEK);
            }
            SummaNode(m.ParentId);
        }

        private void SummaNodeNach(Guid? id)
        {
            if (id == null) return;
            var m = MainNach.Single(_ => _.Id == id);

            if (id == Guid.Parse("{E7DA6232-CAA0-4358-9BAE-5D96C2EE248A}"))
            {
                m.ProfitRUB = MainNach.Where(_ => _.ParentId == id).Sum(_ => _.ProfitRUB);
                m.LossRUB = MainNach.Where(_ => _.ParentId == id).Sum(_ => _.LossRUB);
                m.ResultRUB = m.ProfitRUB - m.LossRUB;

                m.ProfitUSD = MainNach.Where(_ => _.ParentId == id).Sum(_ => _.ProfitUSD);
                m.LossUSD = MainNach.Where(_ => _.ParentId == id).Sum(_ => _.LossUSD);
                m.ResultUSD = m.ProfitUSD - m.LossUSD;

                m.ProfitEUR = MainNach.Where(_ => _.ParentId == id).Sum(_ => _.ProfitEUR);
                m.LossEUR = MainNach.Where(_ => _.ParentId == id).Sum(_ => _.LossEUR);
                m.ResultEUR = m.ProfitEUR - m.LossEUR;

                m.ProfitGBP = MainNach.Where(_ => _.ParentId == id).Sum(_ => _.ProfitGBP);
                m.LossGBP = MainNach.Where(_ => _.ParentId == id).Sum(_ => _.LossGBP);
                m.ResultGBP = m.ProfitGBP - m.LossGBP;

                m.ProfitCHF = MainNach.Where(_ => _.ParentId == id).Sum(_ => _.ProfitCHF);
                m.LossCHF = MainNach.Where(_ => _.ParentId == id).Sum(_ => _.LossCHF);
                m.ResultCHF = m.ProfitCHF - m.LossCHF;

                m.ProfitSEK = MainNach.Where(_ => _.ParentId == id).Sum(_ => _.ProfitSEK);
                m.LossSEK = MainNach.Where(_ => _.ParentId == id).Sum(_ => _.LossSEK);
                m.ResultSEK = m.ProfitSEK - m.LossSEK;
            }
            else
            {
                m.ProfitRUB = m.CalcType == TypeProfitAndLossCalc.IsProfit || m.CalcType == TypeProfitAndLossCalc.IsAll
                    ? MainNach.Where(_ => _.ParentId == id).Sum(_ => _.ProfitRUB)
                    : 0;
                m.LossRUB = m.CalcType == TypeProfitAndLossCalc.IsLoss || m.CalcType == TypeProfitAndLossCalc.IsAll
                    ? MainNach.Where(_ => _.ParentId == id).Sum(_ => _.LossRUB)
                    : 0;
                m.ResultRUB = MainNach.Where(_ => _.ParentId == id).Sum(_ => _.ResultRUB);

                m.ProfitUSD = m.CalcType == TypeProfitAndLossCalc.IsProfit || m.CalcType == TypeProfitAndLossCalc.IsAll
                    ? MainNach.Where(_ => _.ParentId == id).Sum(_ => _.ProfitUSD)
                    : 0;
                m.LossUSD = m.CalcType == TypeProfitAndLossCalc.IsLoss || m.CalcType == TypeProfitAndLossCalc.IsAll
                    ? MainNach.Where(_ => _.ParentId == id).Sum(_ => _.LossUSD)
                    : 0;
                m.ResultUSD = MainNach.Where(_ => _.ParentId == id).Sum(_ => _.ResultUSD);

                m.ProfitEUR = m.CalcType == TypeProfitAndLossCalc.IsProfit || m.CalcType == TypeProfitAndLossCalc.IsAll
                    ? MainNach.Where(_ => _.ParentId == id).Sum(_ => _.ProfitEUR)
                    : 0;
                m.LossEUR = m.CalcType == TypeProfitAndLossCalc.IsLoss || m.CalcType == TypeProfitAndLossCalc.IsAll
                    ? MainNach.Where(_ => _.ParentId == id).Sum(_ => _.LossEUR)
                    : 0;
                m.ResultEUR = MainNach.Where(_ => _.ParentId == id).Sum(_ => _.ResultEUR);

                m.ProfitGBP = m.CalcType == TypeProfitAndLossCalc.IsProfit || m.CalcType == TypeProfitAndLossCalc.IsAll
                    ? MainNach.Where(_ => _.ParentId == id).Sum(_ => _.ProfitGBP)
                    : 0;
                m.LossGBP = m.CalcType == TypeProfitAndLossCalc.IsLoss || m.CalcType == TypeProfitAndLossCalc.IsAll
                    ? MainNach.Where(_ => _.ParentId == id).Sum(_ => _.LossGBP)
                    : 0;
                m.ResultGBP = MainNach.Where(_ => _.ParentId == id).Sum(_ => _.ResultGBP);

                m.ProfitCHF = m.CalcType == TypeProfitAndLossCalc.IsProfit || m.CalcType == TypeProfitAndLossCalc.IsAll
                    ? MainNach.Where(_ => _.ParentId == id).Sum(_ => _.ProfitCHF)
                    : 0;
                m.LossCHF = m.CalcType == TypeProfitAndLossCalc.IsLoss || m.CalcType == TypeProfitAndLossCalc.IsAll
                    ? MainNach.Where(_ => _.ParentId == id).Sum(_ => _.LossCHF)
                    : 0;
                m.ResultCHF = MainNach.Where(_ => _.ParentId == id).Sum(_ => _.ResultCHF);

                m.ProfitSEK = m.CalcType == TypeProfitAndLossCalc.IsProfit || m.CalcType == TypeProfitAndLossCalc.IsAll
                    ? MainNach.Where(_ => _.ParentId == id).Sum(_ => _.ProfitSEK)
                    : 0;
                m.LossSEK = m.CalcType == TypeProfitAndLossCalc.IsLoss || m.CalcType == TypeProfitAndLossCalc.IsAll
                    ? MainNach.Where(_ => _.ParentId == id).Sum(_ => _.LossSEK)
                    : 0;
                m.ResultSEK = MainNach.Where(_ => _.ParentId == id).Sum(_ => _.ResultSEK);
            }
            SummaNodeNach(m.ParentId);
        }

        private void CalcTreeSumm()
        {
            myTempIdList.Clear();
            foreach (
                var d in from d in MainNach let dd = MainNach.Where(_ => _.ParentId == d.Id) where !dd.Any() select d)
            {
                d.ProfitRUB = d.CalcType == TypeProfitAndLossCalc.IsProfit || d.CalcType == TypeProfitAndLossCalc.IsAll
                    ? ExtendNach.Where(_ => _.GroupId == d.Id).Sum(_ => _.ProfitRUB)
                    : 0;
                d.LossRUB = d.CalcType == TypeProfitAndLossCalc.IsLoss || d.CalcType == TypeProfitAndLossCalc.IsAll
                    ? ExtendNach.Where(_ => _.GroupId == d.Id).Sum(_ => _.LossRUB)
                    : 0;
                d.ResultRUB = d.ProfitRUB - d.LossRUB;

                d.ProfitUSD = d.CalcType == TypeProfitAndLossCalc.IsProfit || d.CalcType == TypeProfitAndLossCalc.IsAll
                    ? ExtendNach.Where(_ => _.GroupId == d.Id).Sum(_ => _.ProfitUSD)
                    : 0;
                d.LossUSD = d.CalcType == TypeProfitAndLossCalc.IsLoss || d.CalcType == TypeProfitAndLossCalc.IsAll
                    ? ExtendNach.Where(_ => _.GroupId == d.Id).Sum(_ => _.LossUSD)
                    : 0;
                d.ResultUSD = d.ProfitUSD - d.LossUSD;

                d.ProfitEUR = d.CalcType == TypeProfitAndLossCalc.IsProfit || d.CalcType == TypeProfitAndLossCalc.IsAll
                    ? ExtendNach.Where(_ => _.GroupId == d.Id).Sum(_ => _.ProfitEUR)
                    : 0;
                d.LossEUR = d.CalcType == TypeProfitAndLossCalc.IsLoss || d.CalcType == TypeProfitAndLossCalc.IsAll
                    ? ExtendNach.Where(_ => _.GroupId == d.Id).Sum(_ => _.LossEUR)
                    : 0;
                d.ResultEUR = d.ProfitEUR - d.LossEUR;

                d.ProfitGBP = d.CalcType == TypeProfitAndLossCalc.IsProfit || d.CalcType == TypeProfitAndLossCalc.IsAll
                    ? ExtendNach.Where(_ => _.GroupId == d.Id).Sum(_ => _.ProfitGBP)
                    : 0;
                d.LossGBP = d.CalcType == TypeProfitAndLossCalc.IsLoss || d.CalcType == TypeProfitAndLossCalc.IsAll
                    ? ExtendNach.Where(_ => _.GroupId == d.Id).Sum(_ => _.LossGBP)
                    : 0;
                d.ResultGBP = d.ProfitGBP - d.LossGBP;

                d.ProfitCHF = d.CalcType == TypeProfitAndLossCalc.IsProfit || d.CalcType == TypeProfitAndLossCalc.IsAll
                    ? ExtendNach.Where(_ => _.GroupId == d.Id).Sum(_ => _.ProfitCHF)
                    : 0;
                d.LossCHF = d.CalcType == TypeProfitAndLossCalc.IsLoss || d.CalcType == TypeProfitAndLossCalc.IsAll
                    ? ExtendNach.Where(_ => _.GroupId == d.Id).Sum(_ => _.LossCHF)
                    : 0;
                d.ResultCHF = d.ProfitCHF - d.LossCHF;

                d.ProfitSEK = d.CalcType == TypeProfitAndLossCalc.IsProfit || d.CalcType == TypeProfitAndLossCalc.IsAll
                    ? ExtendNach.Where(_ => _.GroupId == d.Id).Sum(_ => _.ProfitSEK)
                    : 0;
                d.LossSEK = d.CalcType == TypeProfitAndLossCalc.IsLoss || d.CalcType == TypeProfitAndLossCalc.IsAll
                    ? ExtendNach.Where(_ => _.GroupId == d.Id).Sum(_ => _.LossSEK)
                    : 0;
                d.ResultSEK = d.ProfitSEK - d.LossSEK;

                myTempIdList.Add(d.ParentId);
            }
            foreach (var id in myTempIdList.Where(id => id != null).Select(_ => _.Value).Distinct())
                SummaNodeNach(id);
            myTempIdList2.Clear();
            foreach (var d in from d in Main let dd = Main.Where(_ => _.ParentId == d.Id) where !dd.Any() select d)
            {
                d.ProfitRUB = d.CalcType == TypeProfitAndLossCalc.IsProfit || d.CalcType == TypeProfitAndLossCalc.IsAll
                    ? Extend.Where(_ => _.GroupId == d.Id).Sum(_ => _.ProfitRUB)
                    : 0;
                d.LossRUB = d.CalcType == TypeProfitAndLossCalc.IsLoss || d.CalcType == TypeProfitAndLossCalc.IsAll
                    ? Extend.Where(_ => _.GroupId == d.Id).Sum(_ => _.LossRUB)
                    : 0;
                d.ResultRUB = d.ProfitRUB - d.LossRUB;

                d.ProfitUSD = d.CalcType == TypeProfitAndLossCalc.IsProfit || d.CalcType == TypeProfitAndLossCalc.IsAll
                    ? Extend.Where(_ => _.GroupId == d.Id).Sum(_ => _.ProfitUSD)
                    : 0;
                d.LossUSD = d.CalcType == TypeProfitAndLossCalc.IsLoss || d.CalcType == TypeProfitAndLossCalc.IsAll
                    ? Extend.Where(_ => _.GroupId == d.Id).Sum(_ => _.LossUSD)
                    : 0;
                d.ResultUSD = d.ProfitUSD - d.LossUSD;

                d.ProfitEUR = d.CalcType == TypeProfitAndLossCalc.IsProfit || d.CalcType == TypeProfitAndLossCalc.IsAll
                    ? Extend.Where(_ => _.GroupId == d.Id).Sum(_ => _.ProfitEUR)
                    : 0;
                d.LossEUR = d.CalcType == TypeProfitAndLossCalc.IsLoss || d.CalcType == TypeProfitAndLossCalc.IsAll
                    ? Extend.Where(_ => _.GroupId == d.Id).Sum(_ => _.LossEUR)
                    : 0;
                d.ResultEUR = d.ProfitEUR - d.LossEUR;

                d.ProfitGBP = d.CalcType == TypeProfitAndLossCalc.IsProfit || d.CalcType == TypeProfitAndLossCalc.IsAll
                    ? Extend.Where(_ => _.GroupId == d.Id).Sum(_ => _.ProfitGBP)
                    : 0;
                d.LossGBP = d.CalcType == TypeProfitAndLossCalc.IsLoss || d.CalcType == TypeProfitAndLossCalc.IsAll
                    ? Extend.Where(_ => _.GroupId == d.Id).Sum(_ => _.LossGBP)
                    : 0;
                d.ResultGBP = d.ProfitGBP - d.LossGBP;

                d.ProfitCHF = d.CalcType == TypeProfitAndLossCalc.IsProfit || d.CalcType == TypeProfitAndLossCalc.IsAll
                    ? Extend.Where(_ => _.GroupId == d.Id).Sum(_ => _.ProfitCHF)
                    : 0;
                d.LossCHF = d.CalcType == TypeProfitAndLossCalc.IsLoss || d.CalcType == TypeProfitAndLossCalc.IsAll
                    ? Extend.Where(_ => _.GroupId == d.Id).Sum(_ => _.LossCHF)
                    : 0;
                d.ResultCHF = d.ProfitCHF - d.LossCHF;

                d.ProfitSEK = d.CalcType == TypeProfitAndLossCalc.IsProfit || d.CalcType == TypeProfitAndLossCalc.IsAll
                    ? Extend.Where(_ => _.GroupId == d.Id).Sum(_ => _.ProfitSEK)
                    : 0;
                d.LossSEK = d.CalcType == TypeProfitAndLossCalc.IsLoss || d.CalcType == TypeProfitAndLossCalc.IsAll
                    ? Extend.Where(_ => _.GroupId == d.Id).Sum(_ => _.LossSEK)
                    : 0;
                d.ResultSEK = d.ProfitSEK - d.LossSEK;


                myTempIdList2.Add(d.ParentId);
            }
            foreach (var id in myTempIdList2.Where(id => id != null).Select(_ => _.Value).Distinct())
                SummaNode(id);
        }

        public override void RefreshData(object obj)
        {
            //innerStartDate = StartDate != EndDate ? StartDate.AddDays(1) : StartDate;
            while (!MainReferences.IsReferenceLoadComplete)
            {
            }
            try
            {
                myRates =
                    GlobalOptions.GetEntities()
                        .CURRENCY_RATES_CB.Where(_ => _.RATE_DATE >= StartDate && _.RATE_DATE <= EndDate)
                        .ToList();
                var dt = myRates.Select(_ => _.RATE_DATE).Distinct().ToList();
                myRates.AddRange(dt.Select(r => new CURRENCY_RATES_CB
                {
                    CRS_DC = GlobalOptions.SystemProfile.NationalCurrency.DocCode,
                    NOMINAL = 1,
                    RATE = 1,
                    RATE_DATE = r
                }));
                Main =
                    new ObservableCollection<ProfitAndLossesMainRowViewModel>(
                        ProfitAndLossesMainRowViewModel.GetStructure());
                MainNach =
                    new ObservableCollection<ProfitAndLossesMainRowViewModel>(
                        ProfitAndLossesMainRowViewModel.GetStructure());
                Extend.Clear();
                ExtendNach.Clear();
                CalcTovar();
                CalcStartKontragentBalans();
                CalcStartCash();
                CalcStartBank();
                CalcOutCach();
                //CalcNomInRounding();
                CalcDilers();
                CalcVozvrat();
                CalcSpisanie();
                CalcTovarTransfer();
                CalcUslugi();
                CalcFinance();
                CalcOutBalans();
                CalcCurrencyChange();
                CalcZarplata();
                CalcZarplataNach();
                CalcCashPercent();
                //CalcCashAvans();
                CalcTreeSumm();
                foreach (var m in Main)
                {
                    var n = MainNach.SingleOrDefault(_ => _.Id == m.Id);
                    if (n == null || Math.Abs(Math.Abs(m.ResultRUB) - Math.Abs(n.ResultRUB)) > 1
                        || Math.Abs(Math.Abs(m.ResultUSD) - Math.Abs(n.ResultUSD)) > 1
                        || Math.Abs(Math.Abs(m.ResultEUR) - Math.Abs(n.ResultEUR)) > 1
                        || Math.Abs(Math.Abs(m.ResultGBP) - Math.Abs(n.ResultGBP)) > 1
                        || Math.Abs(Math.Abs(m.ResultCHF) - Math.Abs(n.ResultCHF)) > 1
                        || Math.Abs(Math.Abs(m.ResultSEK) - Math.Abs(n.ResultSEK)) > 1)
                    {
                        m.IsDiv = true;
                        if (n != null)
                            n.IsDiv = true;
                    }
                    else
                    {
                        m.IsDiv = false;
                        n.IsDiv = false;
                    }
                }
                foreach (
                    var m in from m in MainNach let n = Main.SingleOrDefault(_ => _.Id == m.Id) where n == null select m
                )
                    m.IsDiv = true;
                ResetCurrencyColumns();
            }
            catch (Exception ex)
            {
                WindowManager.ShowError(ex);
            }
            RaisePropertyChanged(nameof(Main));
            RaisePropertyChanged(nameof(MainNach));
        }

        private void ResetCurrencyColumns()
        {
            var frm = (ProfitAndLosses) Form;
            foreach (var col in frm.treeListMain.Columns)
            {
                TreeListControlBand b, b1;
                switch (col.FieldName)
                {
                    case "ProfitEUR":
                        b =
                            frm.treeListMain.Bands.FirstOrDefault(
                                _ => _.Columns.Any(c => c.FieldName == "ProfitEUR"));
                        b1 =
                            frm.treeListMainNach1.Bands.FirstOrDefault(
                                _ => _.Columns.Any(c => c.FieldName == "ProfitEUR"));
                        if (b != null)
                            b.Visible = Main.Sum(_ => _.ProfitEUR) != 0 || Main.Sum(_ => _.LossEUR) != 0;
                        if (b1 != null)
                            b1.Visible = MainNach.Sum(_ => _.ProfitEUR) != 0 || MainNach.Sum(_ => _.LossEUR) != 0;
                        break;
                    case "ProfitRUB":
                        b =
                            frm.treeListMain.Bands.FirstOrDefault(
                                _ => _.Columns.Any(c => c.FieldName == "ProfitRUB"));
                        b1 =
                            frm.treeListMainNach1.Bands.FirstOrDefault(
                                _ => _.Columns.Any(c => c.FieldName == "ProfitRUB"));
                        if (b != null)
                            b.Visible = Main.Sum(_ => _.ProfitRUB) != 0 || Main.Sum(_ => _.LossRUB) != 0;
                        if (b1 != null)
                            b1.Visible = MainNach.Sum(_ => _.ProfitRUB) != 0 || MainNach.Sum(_ => _.LossRUB) != 0;
                        break;
                    case "LossUSD":
                        b =
                            frm.treeListMain.Bands.FirstOrDefault(
                                _ => _.Columns.Any(c => c.FieldName == "LossUSD"));
                        b1 =
                            frm.treeListMainNach1.Bands.FirstOrDefault(
                                _ => _.Columns.Any(c => c.FieldName == "LossUSD"));
                        if (b != null)
                            b.Visible = Main.Sum(_ => _.ProfitUSD) != 0 || Main.Sum(_ => _.LossUSD) != 0;
                        if (b1 != null)
                            b1.Visible = MainNach.Sum(_ => _.ProfitUSD) != 0 || MainNach.Sum(_ => _.LossUSD) != 0;
                        break;
                    case "ProfitGBP":
                        b =
                            frm.treeListMain.Bands.FirstOrDefault(
                                _ => _.Columns.Any(c => c.FieldName == "ProfitGBP"));
                        b1 =
                            frm.treeListMainNach1.Bands.FirstOrDefault(
                                _ => _.Columns.Any(c => c.FieldName == "ProfitGBP"));
                        if (b != null)
                            b.Visible = Main.Sum(_ => _.ProfitGBP) != 0 || Main.Sum(_ => _.LossGBP) != 0;
                        if (b1 != null)
                            b1.Visible = MainNach.Sum(_ => _.ProfitGBP) != 0 || MainNach.Sum(_ => _.LossGBP) != 0;
                        break;
                    case "ProfitCHF":
                        b =
                            frm.treeListMain.Bands.FirstOrDefault(
                                _ => _.Columns.Any(c => c.FieldName == "ProfitCHF"));
                        b1 =
                            frm.treeListMainNach1.Bands.FirstOrDefault(
                                _ => _.Columns.Any(c => c.FieldName == "ProfitCHF"));
                        if (b != null)
                            b.Visible = Main.Sum(_ => _.ProfitCHF) != 0 || Main.Sum(_ => _.LossCHF) != 0;
                        if (b1 != null)
                            b1.Visible = MainNach.Sum(_ => _.ProfitCHF) != 0 || MainNach.Sum(_ => _.LossCHF) != 0;
                        break;
                    case "ProfitSEK":
                        b =
                            frm.treeListMain.Bands.FirstOrDefault(
                                _ => _.Columns.Any(c => c.FieldName == "ProfitSEK"));
                        b1 =
                            frm.treeListMainNach1.Bands.FirstOrDefault(
                                _ => _.Columns.Any(c => c.FieldName == "ProfitSEK"));
                        if (b != null)
                            b.Visible = Main.Sum(_ => _.ProfitSEK) != 0 || Main.Sum(_ => _.LossSEK) != 0;
                        if (b1 != null)
                            b1.Visible = MainNach.Sum(_ => _.ProfitSEK) != 0 || MainNach.Sum(_ => _.LossSEK) != 0;
                        break;
                }
            }
        }

        private void CalcCurrencyChange()
        {
            using (var ent = GlobalOptions.GetEntities())
            {
                var cashChanged = ent.SD_251.Include(_ => _.SD_22)
                    .Include(_ => _.SD_301)
                    .Include(_ => _.SD_3011)
                    .Where(_ => _.CH_DATE >= StartDate && _.CH_DATE <= EndDate)
                    .ToList();
                foreach (var d in cashChanged)
                {
                    var newOp = new ProfitAndLossesExtendRowViewModel
                    {
                        GroupId = Guid.Parse("{10AAC4B7-ECD1-4649-B372-256BA03C27FC}"),
                        Name = d.SD_22.CA_NAME,
                        Note = d.CH_NOTE,
                        DocCode = d.DOC_CODE,
                        Quantity = 0,
                        Price = 0,
                        Date = d.CH_DATE,
                        Kontragent = d.CH_NAME_ORD,
                        DocTypeCode = (DocumentType) 251
                    };
                    switch (d.SD_301.CRS_SHORTNAME)
                    {
                        case CurrencyCode.RUBName:
                        case CurrencyCode.RURName:
                        {
                            // ReSharper disable once PossibleInvalidOperationException
                            newOp.ProfitRUB = (decimal) d.CH_CRS_IN_SUM;
                            newOp.LossRUB = 0;
                            newOp.ResultRUB = (decimal) d.CH_CRS_IN_SUM;
                            break;
                        }
                        // ReSharper disable PossibleInvalidOperationException
                        case CurrencyCode.USDName:
                            newOp.ProfitUSD = (decimal) d.CH_CRS_IN_SUM;
                            newOp.LossUSD = 0;
                            newOp.ResultUSD = (decimal) d.CH_CRS_IN_SUM;
                            break;
                        case CurrencyCode.EURName:
                            newOp.ProfitEUR = (decimal) d.CH_CRS_IN_SUM;
                            newOp.LossEUR = 0;
                            newOp.ResultEUR = (decimal) d.CH_CRS_IN_SUM;
                            break;
                        case CurrencyCode.CHFName:
                            newOp.ProfitGBP = (decimal) d.CH_CRS_IN_SUM;
                            newOp.LossGBP = 0;
                            newOp.ResultGBP = (decimal) d.CH_CRS_IN_SUM;
                            break;
                        case CurrencyCode.GBPName:
                            newOp.ProfitGBP = (decimal) d.CH_CRS_IN_SUM;
                            newOp.LossGBP = 0;
                            newOp.ResultGBP = (decimal) d.CH_CRS_IN_SUM;
                            break;
                        case CurrencyCode.SEKName:
                            newOp.ProfitSEK = (decimal) d.CH_CRS_IN_SUM;
                            newOp.LossSEK = 0;
                            newOp.ResultSEK = (decimal) d.CH_CRS_IN_SUM;
                            break;
                    }
                    // ReSharper restore PossibleInvalidOperationException
                    Extend.Add(newOp);
                    ExtendNach.Add(newOp);

                    var newOp1 = new ProfitAndLossesExtendRowViewModel
                    {
                        GroupId = Guid.Parse("{04FB505A-651E-4F65-903D-80CB4B6C74D0}"),
                        Name = d.SD_22.CA_NAME,
                        Note = d.CH_NOTE,
                        DocCode = d.DOC_CODE,
                        Quantity = 0,
                        Price = 0,
                        Date = d.CH_DATE,
                        Kontragent = d.CH_NAME_ORD,
                        DocTypeCode = (DocumentType) 251
                    };
                    switch (d.SD_3011.CRS_SHORTNAME)
                    {
                        case CurrencyCode.RUBName:
                        case CurrencyCode.RURName:
                            // ReSharper disable PossibleInvalidOperationException
                            newOp1.ProfitRUB = 0;
                            newOp1.LossRUB = d.CH_CRS_OUT_SUM;
                            newOp1.ResultRUB = d.CH_CRS_OUT_SUM;
                            break;
                        case CurrencyCode.USDName:
                            newOp1.ProfitUSD = 0;
                            newOp1.LossUSD = d.CH_CRS_OUT_SUM;
                            newOp1.ResultUSD = d.CH_CRS_OUT_SUM;
                            break;
                        case CurrencyCode.EURName:
                            newOp1.ProfitEUR = 0;
                            newOp1.LossEUR = d.CH_CRS_OUT_SUM;
                            newOp1.ResultEUR = d.CH_CRS_OUT_SUM;
                            break;
                        case CurrencyCode.CHFName:
                            newOp1.ProfitGBP = (decimal) d.CH_CRS_IN_SUM;
                            newOp1.LossGBP = 0;
                            newOp1.ResultGBP = (decimal) d.CH_CRS_IN_SUM;
                            break;
                        case CurrencyCode.GBPName:
                            newOp1.ProfitGBP = (decimal) d.CH_CRS_IN_SUM;
                            newOp1.LossGBP = 0;
                            newOp1.ResultGBP = (decimal) d.CH_CRS_IN_SUM;
                            break;
                        case CurrencyCode.SEKName:
                            newOp1.ProfitSEK = (decimal) d.CH_CRS_IN_SUM;
                            newOp1.LossSEK = 0;
                            newOp1.ResultSEK = (decimal) d.CH_CRS_IN_SUM;
                            break;
                    }
                    // ReSharper restore PossibleInvalidOperationException
                    Extend.Add(newOp1);
                    ExtendNach.Add(newOp1);
                }
            }
        }

        private void CalcOutCach()
        {
            ProfitAndLossesExtendRowViewModel newOp;
            using (var ent = GlobalOptions.GetEntities())
            {
                var cashOut =
                    ent.SD_34.Where(
                            _ =>
                                _.NCODE != 100 && _.TABELNUMBER != null && _.DATE_ORD >= StartDate &&
                                _.DATE_ORD <= EndDate)
                        .ToList();
                foreach (var d in cashOut)
                {
                    // ReSharper disable once PossibleInvalidOperationException
                    // ReSharper disable once AssignNullToNotNullAttribute
                    var crsName = MainReferences.Currencies[d.CRS_DC.Value].Name;
                    newOp = new ProfitAndLossesExtendRowViewModel
                    {
                        GroupId = Guid.Parse("{52EA160E-27DC-47E1-9006-70DF349943F6}"),
                        // ReSharper disable once PossibleNullReferenceException
                        Name = MainReferences.Employees.Values.FirstOrDefault(_ => _.TabelNumber == d.TABELNUMBER).Name,
                        DocCode = d.DOC_CODE,
                        Quantity = 0,
                        Kontragent =
                            // ReSharper disable once PossibleNullReferenceException
                            MainReferences.Employees.Values.FirstOrDefault(_ => _.TabelNumber == d.TABELNUMBER).Name,
                        // ReSharper disable once PossibleInvalidOperationException
                        Date = (DateTime) d.DATE_ORD,
                        Note = null,
                        NomenklViewModel = null,
                        DocTypeCode = (DocumentType) 34
                    };
                    switch (crsName)
                    {
                        case CurrencyCode.RURName:
                        case CurrencyCode.RUBName:
                            newOp.ProfitRUB = 0;
                            // ReSharper disable once PossibleInvalidOperationException
                            newOp.LossRUB = d.SUMM_ORD.Value;
                            newOp.ResultRUB = -d.SUMM_ORD.Value;
                            break;
                        case CurrencyCode.USDName:
                            newOp.ProfitUSD = 0;
                            // ReSharper disable once PossibleInvalidOperationException
                            newOp.LossUSD = d.SUMM_ORD.Value;
                            newOp.ResultUSD = -d.SUMM_ORD.Value;
                            break;
                        case CurrencyCode.EURName:
                            newOp.ProfitEUR = 0;
                            // ReSharper disable once PossibleInvalidOperationException
                            newOp.LossEUR = d.SUMM_ORD.Value;
                            newOp.ResultEUR = -d.SUMM_ORD.Value;
                            break;
                        case CurrencyCode.GBPName:
                            newOp.ProfitGBP = 0;
                            // ReSharper disable once PossibleInvalidOperationException
                            newOp.LossGBP = d.SUMM_ORD.Value;
                            newOp.ResultGBP = -d.SUMM_ORD.Value;
                            break;
                        case CurrencyCode.CHFName:
                            newOp.ProfitCHF = 0;
                            // ReSharper disable once PossibleInvalidOperationException
                            newOp.LossCHF = d.SUMM_ORD.Value;
                            newOp.ResultCHF = -d.SUMM_ORD.Value;
                            break;
                        case CurrencyCode.SEKName:
                            newOp.ProfitSEK = 0;
                            // ReSharper disable once PossibleInvalidOperationException
                            newOp.LossSEK = d.SUMM_ORD.Value;
                            newOp.ResultSEK = -d.SUMM_ORD.Value;
                            break;
                    }
                    Extend.Add(newOp);
                    ExtendNach.Add(newOp);
                }
            }
        }

        private void CalcStartCash()
        {
            using (var ent = GlobalOptions.GetEntities())
            {
                var cashOstatki =
                    ent.TD_22.Include(_ => _.SD_22)
                        .Where(_ => _.DATE_START >= StartDate && _.DATE_START <= EndDate)
                        .ToList();
                foreach (var d in cashOstatki)
                {
                    var crsName = MainReferences.Currencies[d.CRS_DC].Name;
                    var newOp = new ProfitAndLossesExtendRowViewModel
                    {
                        GroupId = Guid.Parse("{A084B37A-D942-4B7F-9AE9-3C3AAA0F4475}"),
                        Name = d.SD_22.CA_NAME,
                        DocCode = d.DOC_CODE,
                        Quantity = 0,
                        Kontragent = d.SD_22.CA_NAME,
                        Date = d.DATE_START,
                        Note = null,
                        NomenklViewModel = null,
                        DocTypeCode = 0
                    };

                    switch (crsName)
                    {
                        case CurrencyCode.RURName:
                        case CurrencyCode.RUBName:
                            newOp.ProfitRUB = d.SUMMA_START;
                            newOp.LossRUB = 0;
                            newOp.ResultRUB = d.SUMMA_START;
                            break;
                        case CurrencyCode.USDName:
                            newOp.ProfitUSD = d.SUMMA_START;
                            newOp.LossUSD = 0;
                            newOp.ResultUSD = d.SUMMA_START;
                            break;
                        case CurrencyCode.EURName:
                            newOp.ProfitEUR = d.SUMMA_START;
                            newOp.LossEUR = 0;
                            newOp.ResultEUR = d.SUMMA_START;
                            break;
                        case CurrencyCode.GBPName:
                            newOp.ProfitGBP = d.SUMMA_START;
                            newOp.LossGBP = 0;
                            newOp.ResultGBP = d.SUMMA_START;
                            break;
                        case CurrencyCode.CHFName:
                            newOp.ProfitCHF = d.SUMMA_START;
                            newOp.LossCHF = 0;
                            newOp.ResultCHF = d.SUMMA_START;
                            break;
                        case CurrencyCode.SEKName:
                            newOp.ProfitSEK = d.SUMMA_START;
                            newOp.LossSEK = 0;
                            newOp.ResultSEK = d.SUMMA_START;
                            break;
                    }
                    Extend.Add(newOp);
                    ExtendNach.Add(newOp);
                }
            }
        }

        private void CalcStartBank()
        {
            // ReSharper disable once TooWideLocalVariableScope
            ProfitAndLossesExtendRowViewModel newOp;
            using (var ent = GlobalOptions.GetEntities())
            {
                var bankDates =
                    ent.SD_101.Where(_ => _.VV_START_DATE >= StartDate && _.VV_START_DATE <= EndDate).ToList();
                if (bankDates.Count == 0) return;
                var dates = bankDates.Select(_ => _.VV_ACC_DC)
                    .Distinct()
                    .ToDictionary(d => d, d => ent.SD_101.Where(_ => _.VV_ACC_DC == d).Min(_ => _.VV_START_DATE));
                foreach (var d in dates)
                {
                    if (d.Value < StartDate || d.Value > EndDate) continue;
                    var dc =
                        ent.SD_101.FirstOrDefault(_ => _.VV_ACC_DC == d.Key && _.VV_START_DATE == d.Value)?.DOC_CODE;
                    if (dc == null) continue;
                    var bank = ent.SD_114.FirstOrDefault(_ => _.DOC_CODE == d.Key);
                    // ReSharper disable once PossibleNullReferenceException
                    var bankName = bank.BA_BANK_NAME + " (" + bank.BA_ACC_SHORTNAME + ") " + "р/с " + bank.BA_RASH_ACC;
                    newOp = new ProfitAndLossesExtendRowViewModel
                    {
                        GroupId = Guid.Parse("{0AD95635-A46D-49F2-AE78-CBDF52BD6E27}"),
                        Name = bankName,
                        DocCode = d.Key,
                        Quantity = 0,
                        Kontragent = bankName,
                        Date = d.Value,
                        Note = null,
                        NomenklViewModel = null,
                        DocTypeCode = (DocumentType) 101
                    };
                    foreach (var c in ent.UD_101.Where(_ => _.DOC_CODE == dc && _.VVU_REST_TYPE == 0))
                        if (c.VVU_VAL_SUMMA > 0)
                        {
                            var crsName = MainReferences.Currencies[c.VVU_CRS_DC].Name;
                            switch (crsName)
                            {
                                case CurrencyCode.RURName:
                                case CurrencyCode.RUBName:
                                    // ReSharper disable PossibleInvalidOperationException
                                    newOp.ProfitRUB = (decimal) c.VVU_VAL_SUMMA;

                                    newOp.LossRUB = 0;
                                    newOp.ResultRUB = (decimal) c.VVU_VAL_SUMMA;
                                    break;
                                case CurrencyCode.USDName:
                                    newOp.ProfitUSD = (decimal) c.VVU_VAL_SUMMA;
                                    newOp.LossUSD = 0;
                                    newOp.ResultUSD = (decimal) c.VVU_VAL_SUMMA;
                                    break;
                                case CurrencyCode.EURName:
                                    newOp.ProfitEUR = (decimal) c.VVU_VAL_SUMMA;
                                    newOp.LossEUR = 0;
                                    newOp.ResultEUR = (decimal) c.VVU_VAL_SUMMA;
                                    break;
                                case CurrencyCode.GBPName:
                                    newOp.ProfitGBP = (decimal) c.VVU_VAL_SUMMA;
                                    newOp.LossGBP = 0;
                                    newOp.ResultGBP = (decimal) c.VVU_VAL_SUMMA;
                                    break;
                                case CurrencyCode.CHFName:
                                    newOp.ProfitCHF = (decimal) c.VVU_VAL_SUMMA;
                                    newOp.LossCHF = 0;
                                    newOp.ResultCHF = (decimal) c.VVU_VAL_SUMMA;
                                    break;
                                case CurrencyCode.SEKName:
                                    newOp.ProfitSEK = (decimal) c.VVU_VAL_SUMMA;
                                    newOp.LossSEK = 0;
                                    newOp.ResultSEK = (decimal) c.VVU_VAL_SUMMA;
                                    break;
                            }
                            // ReSharper restore PossibleInvalidOperationException
                        }
                    Extend.Add(newOp);
                    ExtendNach.Add(newOp);
                }
            }
        }

        private void CalcStartKontragentBalans()
        {
            using (var ent = GlobalOptions.GetEntities())
            {
                var ostatki =
                    ent.SD_43.Where(
                            _ =>
                                _.FLAG_BALANS == 1 && _.START_BALANS >= StartDate && _.START_BALANS <= EndDate &&
                                _.START_SUMMA != 0)
                        .ToList();

                foreach (var d in ostatki)
                {
                    // ReSharper disable once PossibleInvalidOperationException
                    // ReSharper disable once AssignNullToNotNullAttribute
                    var crsName = MainReferences.Currencies[d.VALUTA_DC.Value].Name;
                    var newOp = new ProfitAndLossesExtendRowViewModel();
                    if (d.START_SUMMA < 0)
                    {
                        newOp.GroupId = Guid.Parse("{15DF4D79-D608-412A-87A8-1560714A706A}");
                        newOp.Name = MainReferences.GetKontragent(d.DOC_CODE).Name;
                        newOp.DocCode = d.DOC_CODE;
                        newOp.Quantity = 0;
                        newOp.Kontragent = MainReferences.GetKontragent(d.DOC_CODE).Name;
                        // ReSharper disable once PossibleInvalidOperationException
                        newOp.Date = (DateTime) d.START_BALANS;
                        newOp.Note = d.NOTES;
                        newOp.NomenklViewModel = null;
                    }
                    else
                    {
                        newOp.GroupId = Guid.Parse("{2D07127B-72A8-4018-B9A8-62C7A78CB9C3}");
                        newOp.Name = MainReferences.GetKontragent(d.DOC_CODE).Name;
                        newOp.DocCode = d.DOC_CODE;
                        newOp.Quantity = 0;
                        newOp.Kontragent = MainReferences.GetKontragent(d.DOC_CODE).Name;
                        // ReSharper disable once PossibleInvalidOperationException
                        newOp.Date = (DateTime) d.START_BALANS;
                        newOp.Note = d.NOTES;
                        newOp.NomenklViewModel = null;
                    }
                    switch (crsName)
                    {
                        case CurrencyCode.RURName:
                        case CurrencyCode.RUBName:
                            // ReSharper disable once PossibleInvalidOperationException
                            newOp.ProfitRUB = (decimal) (d.START_SUMMA > 0 ? d.START_SUMMA : 0);
                            newOp.LossRUB = (decimal) (d.START_SUMMA < 0 ? -d.START_SUMMA : 0);
                            newOp.ResultRUB = d.START_SUMMA ?? 0;
                            break;
                        case CurrencyCode.USDName:
                            // ReSharper disable once PossibleInvalidOperationException
                            newOp.ProfitUSD = (decimal) (d.START_SUMMA > 0 ? d.START_SUMMA : 0);
                            newOp.LossUSD = (decimal) (d.START_SUMMA < 0 ? -d.START_SUMMA : 0);
                            newOp.ResultUSD = d.START_SUMMA ?? 0;
                            break;
                        case CurrencyCode.EURName:
                            // ReSharper disable once PossibleInvalidOperationException
                            newOp.ProfitEUR = (decimal) (d.START_SUMMA > 0 ? d.START_SUMMA : 0);
                            newOp.LossEUR = (decimal) (d.START_SUMMA < 0 ? -d.START_SUMMA : 0);
                            newOp.ResultEUR = d.START_SUMMA ?? 0;
                            break;
                        case CurrencyCode.GBPName:
                            // ReSharper disable once PossibleInvalidOperationException
                            newOp.ProfitGBP = (decimal) (d.START_SUMMA > 0 ? d.START_SUMMA : 0);
                            newOp.LossGBP = (decimal) (d.START_SUMMA < 0 ? -d.START_SUMMA : 0);
                            newOp.ResultGBP = d.START_SUMMA ?? 0;
                            break;
                        case CurrencyCode.CHFName:
                            // ReSharper disable once PossibleInvalidOperationException
                            newOp.ProfitCHF = (decimal) (d.START_SUMMA > 0 ? d.START_SUMMA : 0);
                            newOp.LossCHF = (decimal) (d.START_SUMMA < 0 ? -d.START_SUMMA : 0);
                            newOp.ResultCHF = d.START_SUMMA ?? 0;
                            break;
                        case CurrencyCode.SEKName:
                            // ReSharper disable once PossibleInvalidOperationException
                            newOp.ProfitSEK = (decimal) (d.START_SUMMA > 0 ? d.START_SUMMA : 0);
                            newOp.LossSEK = (decimal) (d.START_SUMMA < 0 ? -d.START_SUMMA : 0);
                            newOp.ResultSEK = d.START_SUMMA ?? 0;
                            break;
                    }
                    Extend.Add(newOp);
                    ExtendNach.Add(newOp);
                }
            }
        }

        private void CalcSpisanie()
        {
            //{66E0F763-7362-488D-B367-50AC84A72AD4}
            using (var ent = GlobalOptions.GetEntities())
            {
                var spisano = ent.TD_24.Include(_ => _.SD_24)
                    .Where(_ => _.SD_24.DD_TYPE_DC == 2010000010
                                && _.SD_24.DD_DATE >= StartDate && _.SD_24.DD_DATE <= EndDate
                    )
                    .ToList();
                foreach (var d in spisano)
                {
                    var nomPrice = NomenklViewModel.PriceWithOutNaklad(d.DDT_NOMENKL_DC, d.SD_24.DD_DATE);
                    var nom = MainReferences.GetNomenkl(d.DDT_NOMENKL_DC);
                    var newOp = new ProfitAndLossesExtendRowViewModel
                    {
                        GroupId = Guid.Parse("{66E0F763-7362-488D-B367-50AC84A72AD4}"),
                        Name = nom.Name,
                        DocCode = nom.DocCode,
                        Quantity = d.DDT_KOL_PRIHOD,
                        // ReSharper disable once AssignNullToNotNullAttribute
                        // ReSharper disable once PossibleInvalidOperationException
                        Kontragent = MainReferences.Sklads[d.SD_24.DD_SKLAD_OTPR_DC.Value].Name,
                        Date = d.SD_24.DD_DATE,
                        Note = $"ном № - {nom.NomenklNumber}",
                        NomenklViewModel = nom,
                        DocTypeCode = (DocumentType) 359
                    };
                    switch (nom.Currency.Name)
                    {
                        case CurrencyCode.RURName:
                        case CurrencyCode.RUBName:
                            newOp.ProfitRUB = 0;
                            newOp.LossRUB = nomPrice * d.DDT_KOL_RASHOD;
                            newOp.ResultRUB = -nomPrice * d.DDT_KOL_RASHOD;
                            break;
                        case CurrencyCode.USDName:
                            newOp.ProfitUSD = 0;
                            newOp.LossUSD = nomPrice * d.DDT_KOL_RASHOD;
                            newOp.ResultUSD = -nomPrice * d.DDT_KOL_RASHOD;
                            break;
                        case CurrencyCode.EURName:
                            newOp.ProfitEUR = 0;
                            newOp.LossEUR = nomPrice * d.DDT_KOL_RASHOD;
                            newOp.ResultEUR = -nomPrice * d.DDT_KOL_RASHOD;
                            break;
                        case CurrencyCode.GBPName:
                            newOp.ProfitGBP = 0;
                            newOp.LossGBP = nomPrice * d.DDT_KOL_RASHOD;
                            newOp.ResultGBP = -nomPrice * d.DDT_KOL_RASHOD;
                            break;
                        case CurrencyCode.CHFName:
                            newOp.ProfitCHF = 0;
                            newOp.LossCHF = nomPrice * d.DDT_KOL_RASHOD;
                            newOp.ResultCHF = -nomPrice * d.DDT_KOL_RASHOD;
                            break;
                        case CurrencyCode.SEKName:
                            newOp.ProfitSEK = 0;
                            newOp.LossSEK = nomPrice * d.DDT_KOL_RASHOD;
                            newOp.ResultSEK = -nomPrice * d.DDT_KOL_RASHOD;
                            break;
                    }
                    Extend.Add(newOp);
                    ExtendNach.Add(newOp);
                }
            }
        }

        private void CalcVozvrat()
        {
            using (var ent = GlobalOptions.GetEntities())
            {
                var vozvratTovara = ent.TD_24.Include(_ => _.SD_24)
                    .Where(_ => _.DDT_SPOST_DC == null
                                && _.SD_24.DD_DATE >= StartDate && _.SD_24.DD_DATE <= EndDate
                                && _.SD_24.DD_VOZVRAT == 1)
                    .ToList();
                //{C5C36299-FDEF-4251-B525-3DF10C0E8CB9}
                //{04A7B6BB-7B3C-49F1-8E10-F1AE5F5582E4}
                foreach (var d in vozvratTovara)
                {
                    var nomPrice = NomenklViewModel.PriceWithOutNaklad(d.DDT_NOMENKL_DC, d.SD_24.DD_DATE);

                    var kontr = MainReferences.GetKontragent(d.SD_24.DD_KONTR_OTPR_DC);
                    var nom = MainReferences.GetNomenkl(d.DDT_NOMENKL_DC);
                    var newOp = new ProfitAndLossesExtendRowViewModel
                    {
                        GroupId = Guid.Parse("{C5C36299-FDEF-4251-B525-3DF10C0E8CB9}"),
                        Name = nom.Name,
                        DocCode = nom.DocCode,
                        Quantity = d.DDT_KOL_PRIHOD,
                        Kontragent = kontr.Name,
                        Date = d.SD_24.DD_DATE,
                        Note = $"ном № - {nom.NomenklNumber}",
                        NomenklViewModel = nom,
                        DocTypeCode = (DocumentType) 357
                    };
                    switch (nom.Currency.Name)
                    {
                        case CurrencyCode.RUBName:
                        case CurrencyCode.RURName:
                            newOp.ProfitRUB = nomPrice * d.DDT_KOL_PRIHOD;
                            newOp.LossRUB = (d.DDT_KONTR_CRS_SUMMA ?? 0) *
                                            GetRate(myRates, kontr.BalansCurrency.DocCode,
                                                nom.Currency.DocCode, d.SD_24.DD_DATE);
                            newOp.ResultRUB =
                                -(((d.DDT_KONTR_CRS_SUMMA ?? 0) - nomPrice * d.DDT_KOL_PRIHOD) *
                                  GetRate(myRates, kontr.BalansCurrency.DocCode,
                                      nom.Currency.DocCode, d.SD_24.DD_DATE));
                            break;
                        case CurrencyCode.USDName:
                            newOp.ProfitUSD = nomPrice * d.DDT_KOL_PRIHOD;
                            newOp.LossUSD = (d.DDT_KONTR_CRS_SUMMA ?? 0) *
                                            GetRate(myRates, kontr.BalansCurrency.DocCode,
                                                nom.Currency.DocCode, d.SD_24.DD_DATE);
                            newOp.ResultUSD =
                                -(((d.DDT_KONTR_CRS_SUMMA ?? 0) - nomPrice * d.DDT_KOL_PRIHOD) *
                                  GetRate(myRates, kontr.BalansCurrency.DocCode,
                                      nom.Currency.DocCode, d.SD_24.DD_DATE));
                            break;
                        case CurrencyCode.EURName:
                            newOp.ProfitEUR = nomPrice * d.DDT_KOL_PRIHOD;
                            newOp.LossEUR = (d.DDT_KONTR_CRS_SUMMA ?? 0) *
                                            GetRate(myRates, kontr.BalansCurrency.DocCode,
                                                nom.Currency.DocCode, d.SD_24.DD_DATE);
                            newOp.ResultEUR =
                                -(((d.DDT_KONTR_CRS_SUMMA ?? 0) - nomPrice * d.DDT_KOL_PRIHOD) *
                                  GetRate(myRates, kontr.BalansCurrency.DocCode,
                                      nom.Currency.DocCode, d.SD_24.DD_DATE));
                            break;
                        case CurrencyCode.GBPName:
                            newOp.ProfitGBP = nomPrice * d.DDT_KOL_PRIHOD;
                            newOp.LossGBP = (d.DDT_KONTR_CRS_SUMMA ?? 0) *
                                            GetRate(myRates, kontr.BalansCurrency.DocCode,
                                                nom.Currency.DocCode, d.SD_24.DD_DATE);
                            newOp.ResultGBP =
                                -(((d.DDT_KONTR_CRS_SUMMA ?? 0) - nomPrice * d.DDT_KOL_PRIHOD) *
                                  GetRate(myRates, kontr.BalansCurrency.DocCode,
                                      nom.Currency.DocCode, d.SD_24.DD_DATE));
                            break;
                        case CurrencyCode.CHFName:
                            newOp.ProfitCHF = nomPrice * d.DDT_KOL_PRIHOD;
                            newOp.LossCHF = (d.DDT_KONTR_CRS_SUMMA ?? 0) *
                                            GetRate(myRates, kontr.BalansCurrency.DocCode,
                                                nom.Currency.DocCode, d.SD_24.DD_DATE);
                            newOp.ResultCHF =
                                -(((d.DDT_KONTR_CRS_SUMMA ?? 0) - nomPrice * d.DDT_KOL_PRIHOD) *
                                  GetRate(myRates, kontr.BalansCurrency.DocCode,
                                      nom.Currency.DocCode, d.SD_24.DD_DATE));
                            break;
                        case CurrencyCode.SEKName:
                            newOp.ProfitSEK = nomPrice * d.DDT_KOL_PRIHOD;
                            newOp.LossSEK = (d.DDT_KONTR_CRS_SUMMA ?? 0) *
                                            GetRate(myRates, kontr.BalansCurrency.DocCode,
                                                nom.Currency.DocCode, d.SD_24.DD_DATE);
                            newOp.ResultSEK =
                                -(((d.DDT_KONTR_CRS_SUMMA ?? 0) - nomPrice * d.DDT_KOL_PRIHOD) *
                                  GetRate(myRates, kontr.BalansCurrency.DocCode,
                                      nom.Currency.DocCode, d.SD_24.DD_DATE));
                            break;
                    }
                    Extend.Add(newOp);
                    ExtendNach.Add(newOp);
                    var newOp1 = new ProfitAndLossesExtendRowViewModel
                    {
                        GroupId = Guid.Parse("{04A7B6BB-7B3C-49F1-8E10-F1AE5F5582E4}"),
                        Name = nom.Name,
                        DocCode = nom.DocCode,
                        Quantity = d.DDT_KOL_PRIHOD,
                        Kontragent = kontr.Name,
                        Date = d.SD_24.DD_DATE,
                        Note = $"ном № - {nom.NomenklNumber}",
                        NomenklViewModel = nom,
                        DocTypeCode = (DocumentType) 357
                    };
                    switch (nom.Currency.Name)
                    {
                        case CurrencyCode.RUBName:
                        case CurrencyCode.RURName:
                            newOp1.ProfitRUB = nomPrice * d.DDT_KOL_PRIHOD;
                            newOp1.LossRUB = (d.DDT_KONTR_CRS_SUMMA ?? 0) *
                                             GetRate(myRates, kontr.BalansCurrency.DocCode,
                                                 nom.Currency.DocCode, d.SD_24.DD_DATE);
                            newOp1.ResultRUB =
                                -(((d.DDT_KONTR_CRS_SUMMA ?? 0) - nomPrice * d.DDT_KOL_PRIHOD) *
                                  GetRate(myRates, kontr.BalansCurrency.DocCode,
                                      nom.Currency.DocCode, d.SD_24.DD_DATE));
                            break;
                        case CurrencyCode.USDName:
                            newOp1.ProfitUSD = nomPrice * d.DDT_KOL_PRIHOD;
                            newOp1.LossUSD = (d.DDT_KONTR_CRS_SUMMA ?? 0) *
                                             GetRate(myRates, kontr.BalansCurrency.DocCode,
                                                 nom.Currency.DocCode, d.SD_24.DD_DATE);
                            newOp1.ResultUSD =
                                -(((d.DDT_KONTR_CRS_SUMMA ?? 0) - nomPrice * d.DDT_KOL_PRIHOD) *
                                  GetRate(myRates, kontr.BalansCurrency.DocCode,
                                      nom.Currency.DocCode, d.SD_24.DD_DATE));
                            break;
                        case CurrencyCode.EURName:
                            newOp1.ProfitEUR = nomPrice * d.DDT_KOL_PRIHOD;
                            newOp1.LossEUR = (d.DDT_KONTR_CRS_SUMMA ?? 0) *
                                             GetRate(myRates, kontr.BalansCurrency.DocCode,
                                                 nom.Currency.DocCode, d.SD_24.DD_DATE);
                            newOp1.ResultEUR =
                                -(((d.DDT_KONTR_CRS_SUMMA ?? 0) - nomPrice * d.DDT_KOL_PRIHOD) *
                                  GetRate(myRates, kontr.BalansCurrency.DocCode,
                                      nom.Currency.DocCode, d.SD_24.DD_DATE));
                            break;
                        case CurrencyCode.GBPName:
                            newOp1.ProfitGBP = nomPrice * d.DDT_KOL_PRIHOD;
                            newOp1.LossGBP = (d.DDT_KONTR_CRS_SUMMA ?? 0) *
                                             GetRate(myRates, kontr.BalansCurrency.DocCode,
                                                 nom.Currency.DocCode, d.SD_24.DD_DATE);
                            newOp1.ResultGBP =
                                -(((d.DDT_KONTR_CRS_SUMMA ?? 0) - nomPrice * d.DDT_KOL_PRIHOD) *
                                  GetRate(myRates, kontr.BalansCurrency.DocCode,
                                      nom.Currency.DocCode, d.SD_24.DD_DATE));
                            break;
                        case CurrencyCode.CHFName:
                            newOp1.ProfitCHF = nomPrice * d.DDT_KOL_PRIHOD;
                            newOp1.LossCHF = (d.DDT_KONTR_CRS_SUMMA ?? 0) *
                                             GetRate(myRates, kontr.BalansCurrency.DocCode,
                                                 nom.Currency.DocCode, d.SD_24.DD_DATE);
                            newOp1.ResultCHF =
                                -(((d.DDT_KONTR_CRS_SUMMA ?? 0) - nomPrice * d.DDT_KOL_PRIHOD) *
                                  GetRate(myRates, kontr.BalansCurrency.DocCode,
                                      nom.Currency.DocCode, d.SD_24.DD_DATE));
                            break;
                        case CurrencyCode.SEKName:
                            newOp1.ProfitSEK = nomPrice * d.DDT_KOL_PRIHOD;
                            newOp1.LossSEK = (d.DDT_KONTR_CRS_SUMMA ?? 0) *
                                             GetRate(myRates, kontr.BalansCurrency.DocCode,
                                                 nom.Currency.DocCode, d.SD_24.DD_DATE);
                            newOp1.ResultSEK =
                                -(((d.DDT_KONTR_CRS_SUMMA ?? 0) - nomPrice * d.DDT_KOL_PRIHOD) *
                                  GetRate(myRates, kontr.BalansCurrency.DocCode,
                                      nom.Currency.DocCode, d.SD_24.DD_DATE));
                            break;
                    }
                    Extend.Add(newOp1);
                    ExtendNach.Add(newOp1);
                }
            }
        }

        private void CalcDilers()
        {
            using (var ctx = GlobalOptions.GetEntities())
            {
                var data = ctx.TD_24.Include(_ => _.SD_24)
                    .Include(_ => _.TD_84)
                    .Include(_ => _.TD_84.SD_84)
                    .Where(_ => _.SD_24.DD_DATE >= StartDate && _.SD_24.DD_DATE <= EndDate
                                && _.TD_84.SD_84.SF_DILER_DC != null)
                    .ToList();
                foreach (var d in data)
                {
                    var kontr = MainReferences.GetKontragent(d.TD_84.SD_84.SF_DILER_DC);
                    var nom = MainReferences.GetNomenkl(d.DDT_NOMENKL_DC);
                    var newOp = new ProfitAndLossesExtendRowViewModel
                    {
                        GroupId = Guid.Parse("{BA628F86-6AE4-4CF3-832B-C6F7388DD01B}"),
                        Name = nom.Name,
                        DocCode = nom.DocCode,
                        Quantity = d.DDT_KOL_RASHOD,
                        Kontragent = kontr.Name,
                        DocTypeCode = (DocumentType) 84
                    };
                    if (d.TD_84 != null)
                        switch (kontr.BalansCurrency.Name)
                        {
                            case CurrencyCode.RUBName:
                            case CurrencyCode.RURName:
                                newOp.ProfitRUB = 0;
                                newOp.LossRUB = (d.TD_84.SFT_NACENKA_DILERA ?? 0) * d.DDT_KOL_RASHOD;
                                newOp.ResultRUB = -(d.TD_84.SFT_NACENKA_DILERA ?? 0) * d.DDT_KOL_RASHOD;
                                break;
                            case CurrencyCode.USDName:
                                newOp.ProfitUSD = 0;
                                newOp.LossUSD = (d.TD_84.SFT_NACENKA_DILERA ?? 0) * d.DDT_KOL_RASHOD;
                                newOp.ResultUSD = -(d.TD_84.SFT_NACENKA_DILERA ?? 0) * d.DDT_KOL_RASHOD;
                                break;
                            case CurrencyCode.EURName:
                                newOp.ProfitEUR = 0;
                                newOp.LossEUR = (d.TD_84.SFT_NACENKA_DILERA ?? 0) * d.DDT_KOL_RASHOD;
                                newOp.ResultEUR = -(d.TD_84.SFT_NACENKA_DILERA ?? 0) * d.DDT_KOL_RASHOD;
                                break;
                            case CurrencyCode.GBPName:
                                newOp.ProfitGBP = 0;
                                newOp.LossGBP = (d.TD_84.SFT_NACENKA_DILERA ?? 0) * d.DDT_KOL_RASHOD;
                                newOp.ResultGBP = -(d.TD_84.SFT_NACENKA_DILERA ?? 0) * d.DDT_KOL_RASHOD;
                                break;
                            case CurrencyCode.CHFName:
                                newOp.ProfitCHF = 0;
                                newOp.LossCHF = (d.TD_84.SFT_NACENKA_DILERA ?? 0) * d.DDT_KOL_RASHOD;
                                newOp.ResultCHF = -(d.TD_84.SFT_NACENKA_DILERA ?? 0) * d.DDT_KOL_RASHOD;
                                break;
                            case CurrencyCode.SEKName:
                                newOp.ProfitSEK = 0;
                                newOp.LossSEK = (d.TD_84.SFT_NACENKA_DILERA ?? 0) * d.DDT_KOL_RASHOD;
                                newOp.ResultSEK = -(d.TD_84.SFT_NACENKA_DILERA ?? 0) * d.DDT_KOL_RASHOD;
                                break;
                        }
                    Extend.Add(newOp);
                    ExtendNach.Add(newOp);
                }
            }
        }

        public void UpdateExtend(Guid id)
        {
            ExtendActual.Clear();
            foreach (var d in Extend.Where(d => d.GroupId == id))
                ExtendActual.Add(d);
            ResetCurrencyDetailColumns();
        }

        public void UpdateExtend2(Guid id)
        {
            ExtendActual.Clear();
            foreach (var d in ExtendNach.Where(d => d.GroupId == id))
                ExtendActual.Add(d);
            ResetCurrencyDetailColumns();
        }

        public void UpdateExtend2()
        {
            ExtendActual.Clear();
            if (BalansFact == null) return;
            foreach (var d in Extend.Where(d => d.GroupId == BalansFact.Id))
                ExtendActual.Add(d);
            ResetCurrencyDetailColumns();
            RaisePropertyChanged(nameof(ExtendActual));
        }

        public void UpdateExtend()
        {
            ExtendActual.Clear();
            if (BalansCalc == null) return;
            foreach (var d in ExtendNach.Where(d => d.GroupId == BalansCalc.Id))
                ExtendActual.Add(d);
            ResetCurrencyDetailColumns();
            RaisePropertyChanged(nameof(ExtendActual));
        }

        private void CalcZarplata()
        {
            using (var ent = GlobalOptions.GetEntities())
            {
                var data = (from sd34 in ent.SD_34
                    from sd2 in ent.SD_2
                    where sd34.TABELNUMBER == sd2.TABELNUMBER
                          && sd34.DATE_ORD >= StartDate && sd34.DATE_ORD <= EndDate
                          && sd34.NCODE == 100
                    select new
                    {
                        Date = sd34.DATE_ORD,
                        SotrCrsDC = sd2.crs_dc,
                        TabelNumber = sd2.TABELNUMBER,
                        Name = sd2.NAME,
                        Summa = sd34.SUMM_ORD,
                        OperCrsDC = sd34.CRS_DC
                    }).ToList();
                var emps = ent.SD_2.ToList();
                foreach (var d in data)
                {
                    var newOp = new ProfitAndLossesExtendRowViewModel
                    {
                        GroupId = Guid.Parse("{B96B2906-C5AA-4566-B77F-F3E4B912E72E}"),
                        Name = emps.Single(_ => _.TABELNUMBER == d.TabelNumber).NAME,
                        Date = d.Date.Value,
                        DocTypeCode = (DocumentType) 34
                    };
                    if (d.OperCrsDC.Value == CurrencyCode.RUB)
                    {
                        newOp.ProfitRUB = 0;
                        newOp.LossRUB =
                            (decimal) d.Summa;
                        newOp.ResultRUB = -(decimal) d.Summa;
                    }
                    if (d.OperCrsDC.Value == CurrencyCode.USD)
                    {
                        newOp.ProfitUSD = 0;
                        newOp.LossUSD =
                            (decimal) d.Summa;
                        newOp.ResultUSD = -(decimal) d.Summa;
                    }
                    if (d.OperCrsDC.Value == CurrencyCode.EUR)
                    {
                        newOp.ProfitEUR = 0;
                        newOp.LossEUR =
                            (decimal) d.Summa;
                        newOp.ResultEUR = -(decimal) d.Summa;
                    }

                    if (d.OperCrsDC.Value == CurrencyCode.GBP)
                    {
                        newOp.ProfitGBP = 0;
                        newOp.LossGBP =
                            (decimal) d.Summa;
                        newOp.ResultGBP = -(decimal) d.Summa;
                    }
                    if (d.OperCrsDC.Value == CurrencyCode.CHF)
                    {
                        newOp.ProfitCHF = 0;
                        newOp.LossCHF =
                            (decimal) d.Summa;
                        newOp.ResultCHF = -(decimal) d.Summa;
                    }
                    if (d.OperCrsDC.Value == CurrencyCode.SEK)
                    {
                        newOp.ProfitSEK = 0;
                        newOp.LossSEK =
                            (decimal) d.Summa;
                        newOp.ResultSEK = -(decimal) d.Summa;
                    }

                    Extend.Add(newOp);
                }
            }
        }

        private void CalcZarplataNach()
        {
            using (var ent = GlobalOptions.GetEntities())
            {
                var dataNach = (from empRows in ent.EMP_PR_ROWS
                    from sd2 in ent.SD_2
                    from empNachHead in ent.EMP_PR_DOC
                    where empRows.EMP_DC == sd2.DOC_CODE
                          && empNachHead.ID == empRows.ID
                          && empNachHead.Date >= StartDate && empNachHead.Date <= EndDate
                    select new
                    {
                        empNachHead.Date,
                        SotrCrsDC = sd2.crs_dc,
                        TabelNumber = sd2.TABELNUMBER,
                        Name = sd2.NAME,
                        Summa = empRows.SUMMA,
                        OperCrsDC = empRows.CRS_DC,
                        IsShablon = empNachHead.IS_TEMPLATE
                    }).ToList();
                var emps = ent.SD_2.ToList();
                foreach (var d in dataNach.Where(d => StartDate == EndDate || d.Date != StartDate))
                {
                    if (d.IsShablon == 1) continue;
                    var newOp = new ProfitAndLossesExtendRowViewModel
                    {
                        GroupId = Guid.Parse("{B96B2906-C5AA-4566-B77F-F3E4B912E72E}"),
                        Name = emps.Single(_ => _.TABELNUMBER == d.TabelNumber).NAME,
                        Date = d.Date,
                        DocTypeCode = (DocumentType) 903
                        //Profit = 0,
                        //Loss = d.SotrCrsDC.Value,
                        //Result =-d.SotrCrsDC.Value,
                    };
                    if (d.OperCrsDC == CurrencyCode.RUB)
                    {
                        newOp.ProfitRUB = 0;
                        newOp.LossRUB =
                            d.Summa;
                        newOp.ResultRUB = -d.Summa;
                    }
                    if (d.OperCrsDC == CurrencyCode.USD)
                    {
                        newOp.ProfitUSD = 0;
                        newOp.LossUSD =
                            d.Summa;
                        newOp.ResultUSD = -d.Summa;
                    }
                    if (d.OperCrsDC == CurrencyCode.EUR)
                    {
                        newOp.ProfitEUR = 0;
                        newOp.LossEUR =
                            d.Summa;
                        newOp.ResultEUR = -d.Summa;
                    }

                    if (d.OperCrsDC == CurrencyCode.GBP)
                    {
                        newOp.ProfitGBP = 0;
                        newOp.LossGBP =
                            d.Summa;
                        newOp.ResultGBP = -d.Summa;
                    }
                    if (d.OperCrsDC == CurrencyCode.CHF)
                    {
                        newOp.ProfitCHF = 0;
                        newOp.LossCHF =
                            d.Summa;
                        newOp.ResultCHF = -d.Summa;
                    }
                    if (d.OperCrsDC == CurrencyCode.SEK)
                    {
                        newOp.ProfitSEK = 0;
                        newOp.LossSEK =
                            d.Summa;
                        newOp.ResultSEK = -d.Summa;
                    }
                    ExtendNach.Add(newOp);
                }
            }
        }

        private void CalcTovarTransfer()
        {
            using (var ctx = GlobalOptions.GetEntities())
            {
                var data = ctx.NomenklTransferRow
                    .Include(_ => _.NomenklTransfer)
                    .Include(_ => _.SD_83)
                    .Include(_ => _.SD_831)
                    .Where(
                        _ =>
                            _.NomenklTransfer.Date >= StartDate && _.NomenklTransfer.Date <= EndDate &&
                            _.IsAccepted);
                foreach (var row in data)
                {
                    // ReSharper disable once AssignNullToNotNullAttribute
                    // ReSharper disable once PossibleInvalidOperationException
                    var crs = MainReferences.Currencies[row.SD_831.NOM_SALE_CRS_DC.Value];
                    // ReSharper disable once AssignNullToNotNullAttribute
                    // ReSharper disable once PossibleInvalidOperationException
                    var crs1 = MainReferences.Currencies[row.SD_83.NOM_SALE_CRS_DC.Value];
                    var newOp = new ProfitAndLossesExtendRowViewModel
                    {
                        GroupId = Guid.Parse("{564DB69C-6DAD-4B16-8BF5-118F5AF2D07F}"),
                        DocTypeCode = DocumentType.NomenklTransfer,
                        Name = row.SD_83.NOM_NAME,
                        Note = row.Note,
                        //DocCode = row.DocCode,
                        Quantity = row.Quantity,
                        Price = row.PriceIn,
                        Date = row.NomenklTransfer.Date,
                        Kontragent = null,
                        CurrencyName = crs.Name,
                        NomenklViewModel = MainReferences.GetNomenkl(row.SD_83.DOC_CODE),
                        ProfitRUB = crs.DocCode == CurrencyCode.RUB ? row.PriceIn * row.Quantity : 0,
                        ProfitEUR = crs.DocCode == CurrencyCode.EUR ? row.PriceIn * row.Quantity : 0,
                        ProfitUSD = crs.DocCode == CurrencyCode.USD ? row.PriceIn * row.Quantity : 0,
                        ProfitGBP = crs.DocCode == CurrencyCode.GBP ? row.PriceIn * row.Quantity : 0,
                        ProfitCHF = crs.DocCode == CurrencyCode.CHF ? row.PriceIn * row.Quantity : 0,
                        ProfitSEK = crs.DocCode == CurrencyCode.SEK ? row.PriceIn * row.Quantity : 0,
                        LossRUB = 0,
                        LossEUR = 0,
                        LossUSD = 0,
                        LossGBP = 0,
                        LossCHF = 0,
                        LossSEK = 0,
                        ResultRUB = crs.DocCode == CurrencyCode.RUB ? row.PriceIn * row.Quantity : 0,
                        ResultEUR = crs.DocCode == CurrencyCode.EUR ? row.PriceIn * row.Quantity : 0,
                        ResultUSD = crs.DocCode == CurrencyCode.USD ? row.PriceIn * row.Quantity : 0,
                        ResultGBP = crs.DocCode == CurrencyCode.GBP ? row.PriceIn * row.Quantity : 0,
                        ResultCHF = crs.DocCode == CurrencyCode.CHF ? row.PriceIn * row.Quantity : 0,
                        ResultSEK = crs.DocCode == CurrencyCode.SEK ? row.PriceIn * row.Quantity : 0
                    };
                    var price = NomenklViewModel.PriceWithOutNaklad(row.SD_83.DOC_CODE, row.NomenklTransfer.Date);
                    var newOp1 = new ProfitAndLossesExtendRowViewModel
                    {
                        GroupId = Guid.Parse("{564DB69C-6DAD-4B16-8BF5-118F5AF2D07F}"),
                        Name = row.SD_831.NOM_NAME,
                        Note = row.Note,
                        DocTypeCode = DocumentType.NomenklTransfer,
                        //DocCode = row.DocCode,
                        Quantity = row.Quantity,
                        Price = price,
                        Date = row.NomenklTransfer.Date,
                        Kontragent = null,
                        CurrencyName = crs1.Name,
                        NomenklViewModel = MainReferences.GetNomenkl(row.SD_83.DOC_CODE),
                        ProfitRUB = 0,
                        ProfitEUR = 0,
                        ProfitUSD = 0,
                        LossRUB = crs1.DocCode == CurrencyCode.RUB ? price * row.Quantity : 0,
                        LossEUR = crs1.DocCode == CurrencyCode.EUR ? price * row.Quantity : 0,
                        LossUSD = crs1.DocCode == CurrencyCode.USD ? price * row.Quantity : 0,
                        ResultRUB = crs1.DocCode == CurrencyCode.RUB ? price * row.Quantity : 0,
                        ResultEUR = crs1.DocCode == CurrencyCode.EUR ? price * row.Quantity : 0,
                        ResultUSD = crs1.DocCode == CurrencyCode.USD ? price * row.Quantity : 0,
                        ProfitGBP = 0,
                        ProfitCHF = 0,
                        ProfitSEK = 0,
                        LossGBP = crs1.DocCode == CurrencyCode.GBP ? price * row.Quantity : 0,
                        LossCHF = crs1.DocCode == CurrencyCode.CHF ? price * row.Quantity : 0,
                        LossSEK = crs1.DocCode == CurrencyCode.SEK ? price * row.Quantity : 0,
                        ResultGBP = crs1.DocCode == CurrencyCode.GBP ? price * row.Quantity : 0,
                        ResultCHF = crs1.DocCode == CurrencyCode.CHF ? price * row.Quantity : 0,
                        ResultSEK = crs1.DocCode == CurrencyCode.SEK ? price * row.Quantity : 0
                    };
                    Extend.Add(newOp);
                    ExtendNach.Add(newOp);
                    Extend.Add(newOp1);
                    ExtendNach.Add(newOp1);
                }
                var idNach = Guid.Parse("{564DB69C-6DAD-4B16-8BF5-118F5AF2D07F}");
                //var idNach1 = Guid.Parse("{04EBD711-D11C-415B-9ECD-BAC074EF588D}");
                var n = Main.FirstOrDefault(_ => _.Id == Guid.Parse("{564DB69C-6DAD-4B16-8BF5-118F5AF2D07F}"));
                var n1 = MainNach.FirstOrDefault(_ => _.Id == Guid.Parse("{564DB69C-6DAD-4B16-8BF5-118F5AF2D07F}"));

                n.LossRUB = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.LossRUB);
                n.ProfitRUB = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.ProfitRUB);
                n.ResultRUB = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.ProfitRUB - _.LossRUB);

                n.LossUSD = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.LossUSD);
                n.ProfitUSD = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.ProfitUSD);
                n.ResultUSD = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.ProfitUSD - _.LossUSD);

                n.LossEUR = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.LossEUR);
                n.ProfitEUR = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.ProfitEUR);
                n.ResultEUR = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.ProfitEUR - _.LossEUR);

                n.LossGBP = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.LossGBP);
                n.ProfitGBP = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.ProfitGBP);
                n.ResultGBP = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.ProfitGBP - _.LossGBP);

                n.LossCHF = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.LossCHF);
                n.ProfitCHF = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.ProfitCHF);
                n.ResultCHF = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.ProfitCHF - _.LossCHF);

                n.LossSEK = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.LossSEK);
                n.ProfitSEK = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.ProfitSEK);
                n.ResultSEK = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.ProfitSEK - _.LossSEK);

                //
                n1.LossRUB = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.LossRUB);
                n1.ProfitRUB = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.ProfitRUB);
                n1.ResultRUB = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.ProfitRUB - _.LossRUB);

                n1.LossUSD = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.LossUSD);
                n1.ProfitUSD = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.ProfitUSD);
                n1.ResultUSD = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.ProfitUSD - _.LossUSD);

                n1.LossEUR = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.LossEUR);
                n1.ProfitEUR = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.ProfitEUR);
                n1.ResultEUR = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.ProfitEUR - _.LossEUR);

                n1.LossGBP = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.LossGBP);
                n1.ProfitGBP = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.ProfitGBP);
                n1.ResultGBP = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.ProfitGBP - _.LossGBP);

                n1.LossCHF = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.LossCHF);
                n1.ProfitCHF = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.ProfitCHF);
                n1.ResultCHF = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.ProfitCHF - _.LossCHF);

                n1.LossSEK = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.LossSEK);
                n1.ProfitSEK = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.ProfitSEK);
                n1.ResultSEK = Extend.Where(_ => _.GroupId == idNach).Sum(_ => _.ProfitSEK - _.LossSEK);
            }
        }

        private void CalcTovar()
        {
            using (var ent = GlobalOptions.GetEntities())
            {
                //var cos = ent.SD_40.ToList();
                string sql = null;
                switch (GlobalOptions.SystemProfile.NomenklCalcType)
                {
                    case NomenklCalcType.Standart:
                        sql =
                            "SELECT s83.NOM_0MATER_1USLUGA IsUsluga, DD_DATE DATE ,SFT_NEMENKL_DC NomenklDC, s50.PROD_NAME AS TypeProdName ,ISNULL(SF_CENTR_OTV_DC, 0) CentrOfResponsibility ,ISNULL(SF_CLIENT_DC, 0) KontragentDC " +
                            " ,ISNULL(SF_CRS_DC, 0) Currency ,ISNULL(S2.DOC_CODE, 0) Manager ,CAST(DDT_KOL_RASHOD AS NUMERIC(18, 8)) Quantity ,CAST(ISNULL(SFT_ED_CENA, 0) AS NUMERIC(18, 4)) Price , " +
                            " CAST(ISNULL(KONTR_CRS, 0) AS NUMERIC(18, 4)) SummaKontrCrs ,CAST(ISNULL(NomenklSum, 0) AS NUMERIC(18, 4)) NomSumm ,SF_DATE AS SF_DATE ,SF_NUM AS SF_NUM " +
                            " ,ISNULL(SF_NOTES, '') AS SF_NOTES, NAKL_NUM AS NAKL_NUM, ISNULL(NAKL_NOTES, '') AS NAKL_NOTES, ISNULL(SF_DILER_DC, 0) Diler ,ISNULL(DILER_SUMMA, 0) DilerSumma ,ISNULL(NomenklSumWOReval, 0) AS NomenklSumWOReval " +
                            " , s43.VALUTA_DC KontrCrsDC, s83.NOM_SALE_CRS_DC NomenklCrsDC " +
                            " FROM(SELECT " +
                            "   S83.NOM_0MATER_1USLUGA, S84.SF_DATE SF_DATE, CAST(S84.SF_IN_NUM AS VARCHAR(50)) + '/' + ISNULL(S84.SF_OUT_NUM, '') SF_NUM " +
                            "  , S84.SF_NOTE + ' / ' + T84.SFT_TEXT AS SF_NOTES, CAST(S24.DD_IN_NUM AS VARCHAR(50)) + '/' + ISNULL(S24.DD_EXT_NUM, '') NAKL_NUM " +
                            "  , S24.DD_NOTES AS NAKL_NOTES, DD_DATE, SFT_NEMENKL_DC, SF_CENTR_OTV_DC, SF_CLIENT_DC, SF_CRS_DC, S84.CREATOR, DDT_KOL_RASHOD " +
                            "  , SFT_ED_CENA, (SFT_SUMMA_K_OPLATE_KONTR_CRS * (DDT_KOL_RASHOD / SFT_KOL)) AS KONTR_CRS " +
                            "  , CAST((SELECT p1.PRICE FROM NOM_PRICE p1(NOLOCK) WHERE NOM_DC = T84.SFT_NEMENKL_DC AND p1.DATE = ISNULL((SELECT MAX(p2.DATE) " +
                            "        FROM NOM_PRICE p2(NOLOCK) WHERE p1.NOM_DC = p2.NOM_DC AND p2.DATE < S24.DD_DATE) " +
                            "      , (SELECT MAX(p2.DATE) FROM NOM_PRICE p2(NOLOCK) WHERE p1.NOM_DC = p2.NOM_DC  AND p2.DATE = S24.DD_DATE))) *T24.DDT_KOL_RASHOD AS NUMERIC(18, 4)) NomenklSum " +
                            "  ,S84.SF_DILER_DC,ISNULL(SFT_NACENKA_DILERA, 0) * DDT_KOL_RASHOD DILER_SUMMA " +
                            "  ,CAST((SELECT p1.PRICE_WO_REVAL FROM NOM_PRICE p1(NOLOCK) WHERE NOM_DC = T84.SFT_NEMENKL_DC AND p1.DATE = ISNULL((SELECT MAX(p2.DATE) FROM NOM_PRICE p2(NOLOCK)  WHERE p1.NOM_DC = p2.NOM_DC AND p2.DATE < S24.DD_DATE) " +
                            "      , (SELECT MAX(p2.DATE) FROM NOM_PRICE p2(NOLOCK) WHERE p1.NOM_DC = p2.NOM_DC AND p2.DATE = S24.DD_DATE))) *T24.DDT_KOL_RASHOD AS NUMERIC(18, 4)) AS NomenklSumWOReval " +
                            "   FROM TD_84 T84 " +
                            "  INNER JOIN SD_84 S84 ON S84.DOC_CODE = T84.DOC_CODE " +
                            "  INNER JOIN TD_24 T24 ON T24.DDT_SFACT_DC = S84.DOC_CODE " +
                            "   AND T24.DDT_SFACT_ROW_CODE = T84.CODE AND DDT_KOL_RASHOD > 0 " +
                            $"  INNER JOIN SD_24 S24  ON S24.DOC_CODE = T24.DOC_CODE AND S24.DD_DATE BETWEEN '{CustomFormat.DateTimeToString(StartDate)}' AND '{CustomFormat.DateTimeToString(EndDate)}' " +
                            "  INNER JOIN SD_83 S83 ON T84.SFT_NEMENKL_DC = S83.DOC_CODE) TAB " +
                            " INNER JOIN SD_43 s43 ON s43.DOC_CODE = TAB.SF_CLIENT_DC  AND s43.FLAG_BALANS=1 " +
                            " INNER JOIN SD_83 s83 ON s83.DOC_CODE = TAB.SFT_NEMENKL_DC " +
                            " INNER JOIN SD_50 s50 ON s83.NOM_PRODUCT_DC = s50.DOC_CODE " +
                            " LEFT OUTER JOIN EXT_USERS EU ON TAB.CREATOR = EU.USR_NICKNAME " +
                            " LEFT OUTER JOIN SD_2 S2 ON S2.TABELNUMBER = EU.TABELNUMBER ";
                        break;
                    case NomenklCalcType.NakladSeparately:
                        sql =
                            "SELECT s83.NOM_0MATER_1USLUGA IsUsluga, DD_DATE DATE ,SFT_NEMENKL_DC NomenklDC, s50.PROD_NAME AS TypeProdName ,ISNULL(SF_CENTR_OTV_DC, 0) CentrOfResponsibility ,ISNULL(SF_CLIENT_DC, 0) KontragentDC " +
                            " ,ISNULL(SF_CRS_DC, 0) Currency ,ISNULL(S2.DOC_CODE, 0) Manager ,CAST(DDT_KOL_RASHOD AS NUMERIC(18, 8)) Quantity ,CAST(ISNULL(SFT_ED_CENA, 0) AS NUMERIC(18, 4)) Price , " +
                            " CAST(ISNULL(KONTR_CRS, 0) AS NUMERIC(18, 4)) SummaKontrCrs ,CAST(ISNULL(NomenklSum, 0) AS NUMERIC(18, 4)) NomSumm ,SF_DATE AS SF_DATE ,SF_NUM AS SF_NUM " +
                            " ,ISNULL(SF_NOTES, '') AS SF_NOTES, NAKL_NUM AS NAKL_NUM, ISNULL(NAKL_NOTES, '') AS NAKL_NOTES, ISNULL(SF_DILER_DC, 0) Diler ,ISNULL(DILER_SUMMA, 0) DilerSumma ,ISNULL(NomenklSumWOReval, 0) AS NomenklSumWOReval " +
                            " , s43.VALUTA_DC KontrCrsDC, s83.NOM_SALE_CRS_DC NomenklCrsDC " +
                            " FROM(SELECT " +
                            "   S83.NOM_0MATER_1USLUGA, S84.SF_DATE SF_DATE, CAST(S84.SF_IN_NUM AS VARCHAR(50)) + '/' + ISNULL(S84.SF_OUT_NUM, '') SF_NUM " +
                            "  , S84.SF_NOTE + ' / ' + T84.SFT_TEXT AS SF_NOTES, CAST(S24.DD_IN_NUM AS VARCHAR(50)) + '/' + ISNULL(S24.DD_EXT_NUM, '') NAKL_NUM " +
                            "  , S24.DD_NOTES AS NAKL_NOTES, DD_DATE, SFT_NEMENKL_DC, SF_CENTR_OTV_DC, SF_CLIENT_DC, SF_CRS_DC, S84.CREATOR, DDT_KOL_RASHOD " +
                            "  , SFT_ED_CENA, (SFT_SUMMA_K_OPLATE_KONTR_CRS * (DDT_KOL_RASHOD / SFT_KOL)) AS KONTR_CRS " +
                            "  , CAST((SELECT p1.PRICE_WO_NAKLAD FROM NOM_PRICE p1(NOLOCK) WHERE NOM_DC = T84.SFT_NEMENKL_DC AND p1.DATE = ISNULL((SELECT MAX(p2.DATE) " +
                            "        FROM NOM_PRICE p2(NOLOCK) WHERE p1.NOM_DC = p2.NOM_DC AND p2.DATE <= S24.DD_DATE) " +
                            "      , (SELECT MAX(p2.DATE) FROM NOM_PRICE p2(NOLOCK) WHERE p1.NOM_DC = p2.NOM_DC  AND p2.DATE = S24.DD_DATE))) * T24.DDT_KOL_RASHOD AS NUMERIC(18, 4)) NomenklSum " +
                            "  ,S84.SF_DILER_DC,ISNULL(SFT_NACENKA_DILERA, 0) * DDT_KOL_RASHOD DILER_SUMMA " +
                            "  ,CAST((SELECT p1.PRICE_WO_REVAL FROM NOM_PRICE p1(NOLOCK) WHERE NOM_DC = T84.SFT_NEMENKL_DC AND p1.DATE = ISNULL((SELECT MAX(p2.DATE) FROM NOM_PRICE p2(NOLOCK)  WHERE p1.NOM_DC = p2.NOM_DC AND p2.DATE <= S24.DD_DATE) " +
                            "      , (SELECT MAX(p2.DATE) FROM NOM_PRICE p2(NOLOCK) WHERE p1.NOM_DC = p2.NOM_DC AND p2.DATE = S24.DD_DATE))) *T24.DDT_KOL_RASHOD AS NUMERIC(18, 4)) AS NomenklSumWOReval " +
                            "   FROM TD_84 T84 " +
                            "  INNER JOIN SD_84 S84 ON S84.DOC_CODE = T84.DOC_CODE " +
                            "  INNER JOIN TD_24 T24 ON T24.DDT_SFACT_DC = S84.DOC_CODE " +
                            "   AND T24.DDT_SFACT_ROW_CODE = T84.CODE AND DDT_KOL_RASHOD > 0 " +
                            $"  INNER JOIN SD_24 S24  ON S24.DOC_CODE = T24.DOC_CODE AND S24.DD_DATE BETWEEN '{CustomFormat.DateTimeToString(StartDate)}' AND '{CustomFormat.DateTimeToString(EndDate)}' " +
                            "  INNER JOIN SD_83 S83 ON T84.SFT_NEMENKL_DC = S83.DOC_CODE) TAB " +
                            " INNER JOIN SD_43 s43 ON s43.DOC_CODE = TAB.SF_CLIENT_DC  AND s43.FLAG_BALANS=1 " +
                            " INNER JOIN SD_83 s83 ON s83.DOC_CODE = TAB.SFT_NEMENKL_DC " +
                            " INNER JOIN SD_50 s50 ON s83.NOM_PRODUCT_DC = s50.DOC_CODE " +
                            " LEFT OUTER JOIN EXT_USERS EU ON TAB.CREATOR = EU.USR_NICKNAME " +
                            " LEFT OUTER JOIN SD_2 S2 ON S2.TABELNUMBER = EU.TABELNUMBER ";
                        break;
                }

                var data = ent.Database.SqlQuery<BreakEvenTemp>(sql).ToList();
                var dictProds = data.Select(_ => _.TypeProdName)
                    .Distinct()
                    .ToDictionary(d => d, d => Guid.NewGuid());
                var dictLosses = data.Select(_ => _.TypeProdName)
                    .Distinct()
                    .ToDictionary(d => d, d => Guid.NewGuid());

                foreach (var e in from d in data
                    let nom = MainReferences.GetNomenkl(d.NomenklDC)
                    let kontr = MainReferences.ActiveKontragents[d.KontragentDC]
                    // ReSharper disable once PossibleInvalidOperationException
                    let nomRate = GetRate(myRates, (decimal) nom.NOM_SALE_CRS_DC,
                        GlobalOptions.SystemProfile.MainCurrency.DocCode, d.DATE)
                    // ReSharper disable once PossibleInvalidOperationException
                    let kontrRate = GetRate(myRates, (decimal) kontr.VALUTA_DC,
                        GlobalOptions.SystemProfile.MainCurrency.DocCode, d.DATE)
                    select new
                    {
                        // ReSharper disable once PossibleMultipleEnumeration
                        GroupId = dictProds[d.TypeProdName],
                        Name = nom.NOM_NAME,
                        Note = "Ном.№ - " + nom.NOM_NOMENKL,
                        DocCode = nom.DOC_CODE,
                        Quantity = Convert.ToDecimal(d.Quantity),
                        d.Price,
                        Profit = d.Quantity * d.Price,
                        Loss = d.NomSumm,
                        Result = d.Quantity * d.Price - d.NomSumm,
                        Date = d.DATE,
                        Kontragent = kontr.Name,
                        Nomenkl = nom,
                        Kontr = kontr
                    })
                {
                    var newOp = new ProfitAndLossesExtendRowViewModel
                    {
                        GroupId = e.GroupId,
                        Name = e.Name,
                        Note = e.Note,
                        DocCode = e.DocCode,
                        Quantity = e.Quantity,
                        Price = e.Price,
                        Date = e.Date,
                        Kontragent = e.Kontragent,
                        CurrencyName = e.Kontr.BalansCurrency.Name,
                        NomenklViewModel = e.Nomenkl,
                        DocTypeCode = DocumentType.None
                    };
                    switch (e.Kontr.BalansCurrency.Name)
                    {
                        case CurrencyCode.RUBName:
                        case CurrencyCode.RURName:
                            newOp.ProfitRUB = e.Profit;
                            newOp.LossRUB = e.Loss * GetRate(myRates, e.Nomenkl.Currency.DocCode,
                                                e.Kontr.BalansCurrency.DocCode, newOp.Date);
                            newOp.ResultRUB = newOp.ProfitRUB - newOp.LossRUB;
                            break;
                        case CurrencyCode.USDName:
                            newOp.ProfitUSD = e.Profit;
                            newOp.LossUSD = e.Loss * GetRate(myRates, e.Nomenkl.Currency.DocCode,
                                                e.Kontr.BalansCurrency.DocCode, newOp.Date);
                            newOp.ResultUSD = newOp.ProfitUSD - newOp.LossUSD;
                            break;
                        case CurrencyCode.EURName:
                            newOp.ProfitEUR = e.Profit;
                            newOp.LossEUR = e.Loss * GetRate(myRates, e.Nomenkl.Currency.DocCode,
                                                e.Kontr.BalansCurrency.DocCode, newOp.Date);
                            newOp.ResultEUR = newOp.ProfitEUR - newOp.LossEUR;
                            break;
                        case CurrencyCode.GBPName:
                            newOp.ProfitGBP = e.Profit;
                            newOp.LossGBP = e.Loss * GetRate(myRates, e.Nomenkl.Currency.DocCode,
                                                e.Kontr.BalansCurrency.DocCode, newOp.Date);
                            newOp.ResultGBP = newOp.ProfitGBP - newOp.LossGBP;
                            break;
                        case CurrencyCode.CHFName:
                            newOp.ProfitCHF = e.Profit;
                            newOp.LossCHF = e.Loss * GetRate(myRates, e.Nomenkl.Currency.DocCode,
                                                e.Kontr.BalansCurrency.DocCode, newOp.Date);
                            newOp.ResultCHF = newOp.ProfitCHF - newOp.LossCHF;
                            break;
                        case CurrencyCode.SEKName:
                            newOp.ProfitSEK = e.Profit;
                            newOp.LossSEK = e.Loss * GetRate(myRates, e.Nomenkl.Currency.DocCode,
                                                e.Kontr.BalansCurrency.DocCode, newOp.Date);
                            newOp.ResultSEK = newOp.ProfitSEK - newOp.LossSEK;
                            break;
                    }
                    Extend.Add(newOp);
                    ExtendNach.Add(newOp);
                }
                foreach (var e in from d in data
                    let nom = MainReferences.GetNomenkl(d.NomenklDC)
                    let kontr = MainReferences.ActiveKontragents[d.KontragentDC]
                    // ReSharper disable once PossibleInvalidOperationException
                    let nomRate = GetRate(myRates, (decimal) nom.NOM_SALE_CRS_DC,
                        GlobalOptions.SystemProfile.MainCurrency.DocCode, d.DATE)
                    // ReSharper disable once PossibleInvalidOperationException
                    let kontrRate = GetRate(myRates, (decimal) kontr.VALUTA_DC,
                        GlobalOptions.SystemProfile.MainCurrency.DocCode, d.DATE)
                    select new
                    {
                        GroupId = dictLosses[d.TypeProdName],
                        Name = nom.NOM_NAME,
                        Note = "Ном.№ - " + nom.NOM_NOMENKL,
                        DocCode = nom.DOC_CODE,
                        d.Quantity,
                        d.Price,
                        Profit = d.Quantity * d.Price,
                        Loss = d.NomSumm,
                        Result = d.Quantity * d.Price - d.NomSumm,
                        Date = d.DATE,
                        Kontragent = kontr.Name,
                        Nomenkl = nom,
                        Kontr = kontr
                    })
                {
                    var newOp = new ProfitAndLossesExtendRowViewModel
                    {
                        GroupId = e.GroupId,
                        Name = e.Name,
                        Note = e.Note,
                        DocCode = e.DocCode,
                        Quantity = e.Quantity,
                        Price = e.Price,
                        Date = e.Date,
                        Kontragent = e.Kontragent,
                        CurrencyName = e.Kontr.BalansCurrency.Name,
                        NomenklViewModel = e.Nomenkl,
                        DocTypeCode = DocumentType.None
                    };
                    switch (e.Kontr.BalansCurrency.Name)
                    {
                        case CurrencyCode.RUBName:
                        case CurrencyCode.RURName:
                            newOp.ProfitRUB = e.Profit;
                            newOp.LossRUB = e.Loss * GetRate(myRates, e.Nomenkl.Currency.DocCode,
                                                e.Kontr.BalansCurrency.DocCode, newOp.Date);
                            newOp.ResultRUB = newOp.ProfitRUB - newOp.LossRUB;
                            break;
                        case CurrencyCode.USDName:
                            newOp.ProfitUSD = e.Profit;
                            newOp.LossUSD = e.Loss * GetRate(myRates, e.Nomenkl.Currency.DocCode,
                                                e.Kontr.BalansCurrency.DocCode, newOp.Date);
                            newOp.ResultUSD = newOp.ProfitUSD - newOp.LossUSD;
                            break;
                        case CurrencyCode.EURName:
                            newOp.ProfitEUR = e.Profit;
                            newOp.LossEUR = e.Loss * GetRate(myRates, e.Nomenkl.Currency.DocCode,
                                                e.Kontr.BalansCurrency.DocCode, newOp.Date);
                            newOp.ResultEUR = newOp.ProfitEUR - newOp.LossEUR;
                            break;

                        case CurrencyCode.GBPName:
                            newOp.ProfitGBP = e.Profit;
                            newOp.LossGBP = e.Loss * GetRate(myRates, e.Nomenkl.Currency.DocCode,
                                                e.Kontr.BalansCurrency.DocCode, newOp.Date);
                            newOp.ResultGBP = newOp.ProfitGBP - newOp.LossGBP;
                            break;
                        case CurrencyCode.CHFName:
                            newOp.ProfitCHF = e.Profit;
                            newOp.LossCHF = e.Loss * GetRate(myRates, e.Nomenkl.Currency.DocCode,
                                                e.Kontr.BalansCurrency.DocCode, newOp.Date);
                            newOp.ResultCHF = newOp.ProfitCHF - newOp.LossCHF;
                            break;
                        case CurrencyCode.SEKName:
                            newOp.ProfitSEK = e.Profit;
                            newOp.LossSEK = e.Loss * GetRate(myRates, e.Nomenkl.Currency.DocCode,
                                                e.Kontr.BalansCurrency.DocCode, newOp.Date);
                            newOp.ResultSEK = newOp.ProfitSEK - newOp.LossSEK;
                            break;
                    }
                    Extend.Add(newOp);
                    ExtendNach.Add(newOp);
                }

                foreach (var n in dictProds.Select(d => new ProfitAndLossesMainRowViewModel
                {
                    Id = d.Value,
                    ParentId = Guid.Parse("{334973B4-1652-4473-9DED-FD4B31B31FC1}"),
                    Name = d.Key,
                    CalcType = TypeProfitAndLossCalc.IsProfit,
                    LossRUB = 0,
                    ProfitRUB = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ProfitRUB),
                    ResultRUB = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ProfitRUB),
                    LossUSD = 0,
                    ProfitUSD = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ProfitUSD),
                    ResultUSD = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ProfitUSD),
                    LossEUR = 0,
                    ProfitEUR = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ProfitEUR),
                    ResultEUR = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ProfitEUR),
                    LossGBP = 0,
                    ProfitGBP = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ProfitGBP),
                    ResultGBP = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ProfitGBP),
                    LossCHF = 0,
                    ProfitCHF = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ProfitCHF),
                    ResultCHF = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ProfitCHF),
                    LossSEK = 0,
                    ProfitSEK = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ProfitSEK),
                    ResultSEK = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ProfitEUR)
                }))
                {
                    Main.Add(n);
                    MainNach.Add(n);
                }
                foreach (var d in dictLosses)
                {
                    var n = new ProfitAndLossesMainRowViewModel
                    {
                        Id = d.Value,
                        ParentId = Guid.Parse("{D89B1E18-074E-4A7D-A0EE-9537DC1585D8}"),
                        Name = d.Key,
                        CalcType = TypeProfitAndLossCalc.IsLoss,
                        LossRUB = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.LossRUB),
                        ProfitRUB = 0,
                        ResultRUB = -Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.LossRUB),
                        LossUSD = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.LossUSD),
                        ProfitUSD = 0,
                        ResultUSD = -Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.LossUSD),
                        LossEUR = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.LossEUR),
                        ProfitEUR = 0,
                        ResultEUR = -Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.LossEUR),
                        LossGBP = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.LossGBP),
                        ProfitGBP = 0,
                        ResultGBP = -Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.LossGBP),
                        LossCHF = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.LossCHF),
                        ProfitCHF = 0,
                        ResultCHF = -Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.LossCHF),
                        LossSEK = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.LossSEK),
                        ProfitSEK = 0,
                        ResultSEK = -Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.LossSEK)
                    };
                    Main.Add(n);
                    MainNach.Add(n);
                }

                var nomPrihod = ent.TD_24
                    .Include(_ => _.SD_24)
                    .Where(
                        _ =>
                            _.SD_24.DD_DATE >= StartDate && _.SD_24.DD_DATE <= EndDate &&
                            _.SD_24.DD_TYPE_DC == 2010000005);
                var newPrihodId = Guid.NewGuid();
                var newPrihodId2 = Guid.NewGuid();
                foreach (var d in nomPrihod)
                {
                    var nom = MainReferences.GetNomenkl(d.DDT_NOMENKL_DC);
                    var e = new
                    {
                        GroupId = newPrihodId,
                        Name = nom.NOM_NAME,
                        Note = "Ном.№ - " + nom.NOM_NOMENKL,
                        DocCode = nom.DOC_CODE,
                        Quantity = Convert.ToDecimal(d.DDT_KOL_PRIHOD),
                        Price = (decimal) d.DDT_TAX_CENA,
                        // ReSharper disable once PossibleInvalidOperationException
                        Profit = d.DDT_KOL_PRIHOD * (decimal) d.DDT_TAX_CENA,
                        Loss = d.DDT_KOL_RASHOD * NomenklViewModel.PriceWithOutNaklad(d.DDT_NOMENKL_DC, d.SD_24.DD_DATE),
                        Result =
                        // ReSharper disable once PossibleInvalidOperationException
                        d.DDT_KOL_PRIHOD * (decimal) d.DDT_TAX_CENA -
                        d.DDT_KOL_RASHOD * NomenklViewModel.PriceWithOutNaklad(d.DDT_NOMENKL_DC, d.SD_24.DD_DATE),
                        Date = d.SD_24.DD_DATE,
                        Kontragent = "Приход",
                        Nomenkl = nom
                    };
                    if (d.DDT_KOL_PRIHOD > 0)
                    {
                        var newOp = new ProfitAndLossesExtendRowViewModel
                        {
                            GroupId = newPrihodId,
                            Name = e.Name,
                            Note = e.Note,
                            DocCode = e.DocCode,
                            Quantity = e.Quantity,
                            Price = e.Price,
                            Date = e.Date,
                            Kontragent = e.Kontragent,
                            CurrencyName = e.Nomenkl.Currency.Name,
                            NomenklViewModel = e.Nomenkl,
                            DocTypeCode = DocumentType.StoreOrderIn
                        };
                        switch (e.Nomenkl.Currency.Name)
                        {
                            case CurrencyCode.RUBName:
                            case CurrencyCode.RURName:
                                newOp.ProfitRUB = e.Profit;
                                newOp.LossRUB = 0;
                                newOp.ResultRUB = e.Profit;
                                break;
                            case CurrencyCode.USDName:
                                newOp.ProfitUSD = e.Profit;
                                newOp.LossUSD = 0;
                                newOp.ResultUSD = e.Profit;
                                break;
                            case CurrencyCode.EURName:
                                newOp.ProfitEUR = e.Profit;
                                newOp.LossEUR = 0;
                                newOp.ResultEUR = e.Profit;
                                break;
                            case CurrencyCode.GBPName:
                                newOp.ProfitGBP = e.Profit;
                                newOp.LossGBP = 0;
                                newOp.ResultGBP = e.Profit;
                                break;
                            case CurrencyCode.CHFName:
                                newOp.ProfitCHF = e.Profit;
                                newOp.LossCHF = 0;
                                newOp.ResultCHF = e.Profit;
                                break;
                            case CurrencyCode.SEKName:
                                newOp.ProfitSEK = e.Profit;
                                newOp.LossSEK = 0;
                                newOp.ResultSEK = e.Profit;
                                break;
                        }

                        Extend.Add(newOp);
                        ExtendNach.Add(newOp);
                    }
                    if (d.DDT_KOL_RASHOD > 0)
                    {
                        var newOp = new ProfitAndLossesExtendRowViewModel
                        {
                            GroupId = newPrihodId2,
                            Name = e.Name,
                            Note = e.Note,
                            DocCode = e.DocCode,
                            Quantity = e.Quantity,
                            Price = e.Price,
                            Date = e.Date,
                            Kontragent = e.Kontragent,
                            CurrencyName = e.Nomenkl.Currency.Name,
                            NomenklViewModel = e.Nomenkl,
                            DocTypeCode = DocumentType.Waybill
                        };
                        switch (e.Nomenkl.Currency.Name)
                        {
                            case CurrencyCode.RUBName:
                            case CurrencyCode.RURName:
                                newOp.ProfitRUB = 0;
                                newOp.LossRUB = e.Loss;
                                newOp.ResultRUB = -e.Loss;
                                break;
                            case CurrencyCode.USDName:
                                newOp.ProfitUSD = 0;
                                newOp.LossUSD = e.Loss;
                                newOp.ResultUSD = -e.Loss;
                                break;
                            case CurrencyCode.EURName:
                                newOp.ProfitEUR = 0;
                                newOp.LossEUR = e.Loss;
                                newOp.ResultEUR = -e.Loss;
                                break;
                            case CurrencyCode.GBPName:
                                newOp.ProfitGBP = 0;
                                newOp.LossGBP = e.Loss;
                                newOp.ResultGBP = -e.Loss;
                                break;
                            case CurrencyCode.CHFName:
                                newOp.ProfitCHF = 0;
                                newOp.LossCHF = e.Loss;
                                newOp.ResultCHF = -e.Loss;
                                break;
                            case CurrencyCode.SEKName:
                                newOp.ProfitSEK = 0;
                                newOp.LossSEK = e.Loss;
                                newOp.ResultSEK = -e.Loss;
                                break;
                        }

                        Extend.Add(newOp);
                        ExtendNach.Add(newOp);
                    }
                }
                var newPrih = new ProfitAndLossesMainRowViewModel
                {
                    Id = newPrihodId,
                    ParentId = Guid.Parse("{334973B4-1652-4473-9DED-FD4B31B31FC1}"),
                    Name = "Приход товара (инвентаризация)",
                    CalcType = TypeProfitAndLossCalc.IsProfit,
                    LossRUB = 0,
                    ProfitRUB = Extend.Where(_ => _.GroupId == newPrihodId).Sum(_ => _.ProfitRUB),
                    ResultRUB = Extend.Where(_ => _.GroupId == newPrihodId).Sum(_ => _.ProfitRUB),
                    LossUSD = 0,
                    ProfitUSD = Extend.Where(_ => _.GroupId == newPrihodId).Sum(_ => _.ProfitUSD),
                    ResultUSD = Extend.Where(_ => _.GroupId == newPrihodId).Sum(_ => _.ProfitUSD),
                    LossEUR = 0,
                    ProfitEUR = Extend.Where(_ => _.GroupId == newPrihodId).Sum(_ => _.ProfitEUR),
                    ResultEUR = Extend.Where(_ => _.GroupId == newPrihodId).Sum(_ => _.ProfitEUR),
                    LossGBP = 0,
                    ProfitGBP = Extend.Where(_ => _.GroupId == newPrihodId).Sum(_ => _.ProfitGBP),
                    ResultGBP = Extend.Where(_ => _.GroupId == newPrihodId).Sum(_ => _.ProfitGBP),
                    LossCHF = 0,
                    ProfitCHF = Extend.Where(_ => _.GroupId == newPrihodId).Sum(_ => _.ProfitCHF),
                    ResultCHF = Extend.Where(_ => _.GroupId == newPrihodId).Sum(_ => _.ProfitCHF),
                    LossSEK = 0,
                    ProfitSEK = Extend.Where(_ => _.GroupId == newPrihodId).Sum(_ => _.ProfitSEK),
                    ResultSEK = Extend.Where(_ => _.GroupId == newPrihodId).Sum(_ => _.ProfitSEK)
                };
                Main.Add(newPrih);
                MainNach.Add(newPrih);
                newPrih = new ProfitAndLossesMainRowViewModel
                {
                    Id = newPrihodId2,
                    ParentId = Guid.Parse("{D89B1E18-074E-4A7D-A0EE-9537DC1585D8}"),
                    Name = "Списание товара (инвентаризация)",
                    CalcType = TypeProfitAndLossCalc.IsLoss,
                    LossRUB = Extend.Where(_ => _.GroupId == newPrihodId2).Sum(_ => _.LossRUB),
                    ProfitRUB = 0,
                    ResultRUB = -Extend.Where(_ => _.GroupId == newPrihodId2).Sum(_ => _.LossRUB),
                    LossUSD = Extend.Where(_ => _.GroupId == newPrihodId2).Sum(_ => _.LossUSD),
                    ProfitUSD = 0,
                    ResultUSD = -Extend.Where(_ => _.GroupId == newPrihodId2).Sum(_ => _.LossUSD),
                    LossEUR = Extend.Where(_ => _.GroupId == newPrihodId2).Sum(_ => _.LossEUR),
                    ProfitEUR = 0,
                    ResultEUR = -Extend.Where(_ => _.GroupId == newPrihodId2).Sum(_ => _.LossUSD),
                    LossGBP = Extend.Where(_ => _.GroupId == newPrihodId2).Sum(_ => _.LossGBP),
                    ProfitGBP = 0,
                    ResultGBP = -Extend.Where(_ => _.GroupId == newPrihodId2).Sum(_ => _.LossUSD),
                    LossCHF = Extend.Where(_ => _.GroupId == newPrihodId2).Sum(_ => _.LossCHF),
                    ProfitCHF = 0,
                    ResultCHF = -Extend.Where(_ => _.GroupId == newPrihodId2).Sum(_ => _.LossUSD),
                    LossSEK = Extend.Where(_ => _.GroupId == newPrihodId2).Sum(_ => _.LossSEK),
                    ProfitSEK = 0,
                    ResultSEK = -Extend.Where(_ => _.GroupId == newPrihodId2).Sum(_ => _.LossUSD)
                };
                Main.Add(newPrih);
                MainNach.Add(newPrih);
            }
        }

        // ReSharper disable once UnusedMember.Local
        private void CalcNomInRounding()
        {
            using (var ent = GlobalOptions.GetEntities())
            {
                var dataTemp = ent.TD_24
                    .Include(_ => _.SD_24)
                    .Include(_ => _.TD_26)
                    .Where(
                        _ =>
                            _.TD_26 != null && _.SD_24.DD_DATE >= StartDate && _.SD_24.DD_DATE <= EndDate &&
                            // ReSharper disable once EqualExpressionComparison
                            _.TD_26.SFT_ED_CENA.Value != _.TD_26.SFT_ED_CENA.Value);

                foreach (var d in dataTemp)
                {
                    var kontr = MainReferences.GetKontragent(d.SD_24.DD_KONTR_OTPR_DC);
                    // ReSharper disable once EqualExpressionComparison
                    // ReSharper disable once PossibleInvalidOperationException
                    if (d.TD_26.SFT_ED_CENA.Value < d.TD_26.SFT_ED_CENA.Value)
                    {
                        var e = new ProfitAndLossesExtendRowViewModel
                        {
                            GroupId = Guid.Parse("{510BCC25-5EE0-467D-B459-8F51BDA0A4D9}"),
                            Name = "Приход товара",
                            Note = "",
                            DocCode = d.DOC_CODE,
                            Quantity = d.DDT_KOL_PRIHOD,
                            Price = d.TD_26.SFT_ED_CENA.Value - d.TD_26.SFT_ED_CENA.Value,
                            Date = d.SD_24.DD_DATE,
                            Kontragent = kontr.Name,
                            CurrencyName = kontr.BalansCurrency.Name,
                            DocTypeCode = DocumentType.StoreOrderIn
                        };
                        switch (kontr.BalansCurrency.Name)
                        {
                            case CurrencyCode.RUBName:
                            case CurrencyCode.RURName:
                                e.ProfitRUB = 0;

                                e.LossRUB =
                                    Convert.ToDecimal(d.TD_26.SFT_ED_CENA.Value -
                                                      d.TD_26.SFT_ED_CENA.Value) *
                                    d.DDT_KOL_PRIHOD;
                                e.ResultRUB =
                                    -Convert.ToDecimal(d.TD_26.SFT_ED_CENA.Value -
                                                       d.TD_26.SFT_ED_CENA.Value) *
                                    d.DDT_KOL_PRIHOD;
                                break;
                            case CurrencyCode.USDName:
                                e.ProfitUSD = 0;

                                e.LossUSD =
                                    Convert.ToDecimal(d.TD_26.SFT_ED_CENA.Value -
                                                      d.TD_26.SFT_ED_CENA.Value) *
                                    d.DDT_KOL_PRIHOD;
                                e.ResultUSD =
                                    -Convert.ToDecimal(d.TD_26.SFT_ED_CENA.Value -
                                                       d.TD_26.SFT_ED_CENA.Value) *
                                    d.DDT_KOL_PRIHOD;
                                break;
                            case CurrencyCode.EURName:
                                e.ProfitEUR = 0;

                                e.LossEUR =
                                    Convert.ToDecimal(d.TD_26.SFT_ED_CENA.Value -
                                                      d.TD_26.SFT_ED_CENA.Value) *
                                    d.DDT_KOL_PRIHOD;
                                e.ResultEUR =
                                    -Convert.ToDecimal(d.TD_26.SFT_ED_CENA.Value -
                                                       d.TD_26.SFT_ED_CENA.Value) *
                                    d.DDT_KOL_PRIHOD;
                                break;

                            case CurrencyCode.GBPName:
                                e.ProfitGBP = 0;

                                e.LossGBP =
                                    Convert.ToDecimal(d.TD_26.SFT_ED_CENA.Value -
                                                      d.TD_26.SFT_ED_CENA.Value) *
                                    d.DDT_KOL_PRIHOD;
                                e.ResultGBP =
                                    -Convert.ToDecimal(d.TD_26.SFT_ED_CENA.Value -
                                                       d.TD_26.SFT_ED_CENA.Value) *
                                    d.DDT_KOL_PRIHOD;
                                break;
                            case CurrencyCode.CHFName:
                                e.ProfitCHF = 0;

                                e.LossCHF =
                                    Convert.ToDecimal(d.TD_26.SFT_ED_CENA.Value -
                                                      d.TD_26.SFT_ED_CENA.Value) *
                                    d.DDT_KOL_PRIHOD;
                                e.ResultCHF =
                                    -Convert.ToDecimal(d.TD_26.SFT_ED_CENA.Value -
                                                       d.TD_26.SFT_ED_CENA.Value) *
                                    d.DDT_KOL_PRIHOD;
                                break;
                            case CurrencyCode.SEKName:
                                e.ProfitSEK = 0;

                                e.LossSEK =
                                    Convert.ToDecimal(d.TD_26.SFT_ED_CENA.Value -
                                                      d.TD_26.SFT_ED_CENA.Value) *
                                    d.DDT_KOL_PRIHOD;
                                e.ResultSEK =
                                    -Convert.ToDecimal(d.TD_26.SFT_ED_CENA.Value -
                                                       d.TD_26.SFT_ED_CENA.Value) *
                                    d.DDT_KOL_PRIHOD;
                                break;
                        }

                        Extend.Add(e);
                        ExtendNach.Add(e);
                    }
                    else
                    {
                        var e = new ProfitAndLossesExtendRowViewModel
                        {
                            GroupId = Guid.Parse("{3520934E-61CC-4964-9E7B-D3D19913E52B}"),
                            Name = "Приход товара",
                            Note = "",
                            DocCode = d.DOC_CODE,
                            Quantity = d.DDT_KOL_PRIHOD,
                            Price = d.TD_26.SFT_ED_CENA.Value - d.TD_26.SFT_ED_CENA.Value,
                            Date = d.SD_24.DD_DATE,
                            Kontragent = kontr.Name,
                            CurrencyName = kontr.BalansCurrency.Name,
                            DocTypeCode = DocumentType.StoreOrderIn
                        };

                        switch (kontr.BalansCurrency.Name)
                        {
                            case CurrencyCode.RUBName:
                            case CurrencyCode.RURName:
                                e.ProfitRUB =
                                    Convert.ToDecimal(d.TD_26.SFT_ED_CENA.Value -
                                                      d.TD_26.SFT_ED_CENA.Value) *
                                    d.DDT_KOL_PRIHOD;
                                e.LossRUB = 0;

                                e.ResultRUB =
                                    Convert.ToDecimal(d.TD_26.SFT_ED_CENA.Value -
                                                      d.TD_26.SFT_ED_CENA.Value) * d.DDT_KOL_PRIHOD;
                                break;
                            case CurrencyCode.USDName:
                                e.ProfitUSD =
                                    Convert.ToDecimal(d.TD_26.SFT_ED_CENA.Value -
                                                      d.TD_26.SFT_ED_CENA.Value) *
                                    d.DDT_KOL_PRIHOD;
                                e.LossUSD = 0;

                                e.ResultUSD =
                                    Convert.ToDecimal(d.TD_26.SFT_ED_CENA.Value -
                                                      d.TD_26.SFT_ED_CENA.Value) * d.DDT_KOL_PRIHOD;
                                break;
                            case CurrencyCode.EURName:
                                e.ProfitEUR =
                                    Convert.ToDecimal(d.TD_26.SFT_ED_CENA.Value -
                                                      d.TD_26.SFT_ED_CENA.Value) *
                                    d.DDT_KOL_PRIHOD;
                                e.LossEUR = 0;

                                e.ResultEUR =
                                    Convert.ToDecimal(d.TD_26.SFT_ED_CENA.Value -
                                                      d.TD_26.SFT_ED_CENA.Value) * d.DDT_KOL_PRIHOD;
                                break;
                            case CurrencyCode.GBPName:
                                e.ProfitGBP =
                                    Convert.ToDecimal(d.TD_26.SFT_ED_CENA.Value -
                                                      d.TD_26.SFT_ED_CENA.Value) *
                                    d.DDT_KOL_PRIHOD;
                                e.LossGBP = 0;

                                e.ResultGBP =
                                    Convert.ToDecimal(d.TD_26.SFT_ED_CENA.Value -
                                                      d.TD_26.SFT_ED_CENA.Value) * d.DDT_KOL_PRIHOD;
                                break;
                            case CurrencyCode.CHFName:
                                e.ProfitCHF =
                                    Convert.ToDecimal(d.TD_26.SFT_ED_CENA.Value -
                                                      d.TD_26.SFT_ED_CENA.Value) *
                                    d.DDT_KOL_PRIHOD;
                                e.LossCHF = 0;

                                e.ResultCHF =
                                    Convert.ToDecimal(d.TD_26.SFT_ED_CENA.Value -
                                                      d.TD_26.SFT_ED_CENA.Value) * d.DDT_KOL_PRIHOD;
                                break;
                            case CurrencyCode.SEKName:
                                e.ProfitSEK =
                                    Convert.ToDecimal(d.TD_26.SFT_ED_CENA.Value -
                                                      d.TD_26.SFT_ED_CENA.Value) *
                                    d.DDT_KOL_PRIHOD;
                                e.LossSEK = 0;

                                e.ResultSEK =
                                    Convert.ToDecimal(d.TD_26.SFT_ED_CENA.Value -
                                                      d.TD_26.SFT_ED_CENA.Value) * d.DDT_KOL_PRIHOD;
                                break;
                        }
                        Extend.Add(e);
                        ExtendNach.Add(e);
                    }
                }
            }
        }

        // ReSharper disable once FunctionComplexityOverflow
        private void CalcUslugi()
        {
            // ReSharper disable once JoinDeclarationAndInitializer
            // ReSharper disable once CollectionNeverQueried.Local
            Dictionary<decimal, string> co;
            co
                =
                new Dictionary<decimal, string>
                {
                    {
                        -1,
                        "ЦО не указан"
                    }
                }
                ;
            foreach (
                var c
                in
                MainReferences.COList.Values
            )
                co.Add(c.DOC_CODE, c.CENT_NAME);
            using (
                var ent = GlobalOptions.GetEntities())
            {
                var dataIn = (from sd84 in ent.SD_84.Include(_ => _.SD_40)
                    // ReSharper disable once AccessToDisposedClosure
                    from td84 in ent.TD_84
                    // ReSharper disable once AccessToDisposedClosure
                    from sd83 in ent.SD_83
                    //from sd40 in ent.SD_40
                    // ReSharper disable once AccessToDisposedClosure
                    from sd43 in ent.SD_43
                    where sd84.DOC_CODE == td84.DOC_CODE && sd84.SF_ACCEPTED == 1
                          && sd83.DOC_CODE == td84.SFT_NEMENKL_DC
                          && sd43.DOC_CODE == sd84.SF_CLIENT_DC
                          && sd84.SF_DATE >= StartDate
                          && sd43.FLAG_BALANS == 1
                          && sd83.NOM_0MATER_1USLUGA == 1
                          && sd84.SF_DATE >= StartDate && sd84.SF_DATE <= EndDate
                    //&& (sd84.SF_DATE >= sd43.START_BALANS)
                    select new
                    {
                        Id = Guid.NewGuid(),
                        Date = sd84.SF_DATE,
                        NomenklDC = sd83.DOC_CODE,
                        Name = sd83.NOM_NAME,
                        // ReSharper disable once MergeConditionalExpression
                        COName = sd84.SD_40 != null ? sd84.SD_40.CENT_NAME : "ЦО не указан",
                        Quantity = td84.SFT_KOL,
                        Summa = td84.SFT_SUMMA_K_OPLATE_KONTR_CRS,
                        KontrCrsDC = sd43.VALUTA_DC,
                        Kontragent = sd43.NAME,
                        KontragentDC = sd43.DOC_CODE
                    }).ToList();

                var dataOut = (from sd26 in ent.SD_26.Include(_ => _.SD_40)
                    // ReSharper disable once AccessToDisposedClosure
                    from td26 in ent.TD_26
                    // ReSharper disable once AccessToDisposedClosure
                    from sd83 in ent.SD_83
                    //from sd40 in ent.SD_40
                    // ReSharper disable once AccessToDisposedClosure
                    from sd43 in ent.SD_43
                    where sd26.DOC_CODE == td26.DOC_CODE && sd26.SF_ACCEPTED == 1
                          && sd83.DOC_CODE == td26.SFT_NEMENKL_DC
                          && sd43.DOC_CODE == sd26.SF_POST_DC
                          && sd26.SF_POSTAV_DATE >= StartDate
                          && sd43.FLAG_BALANS == 1
                          && sd83.NOM_0MATER_1USLUGA == 1
                          && (td26.SFT_NAKLAD_KONTR_DC == null || td26.SFT_NAKLAD_KONTR_DC == sd26.SF_POST_DC)
                          //&& td26.SFT_IS_NAKLAD == 0
                          && sd26.SF_POSTAV_DATE >= StartDate && sd26.SF_POSTAV_DATE <= EndDate
                    select new NakladTemp
                    {
                        Id = Guid.NewGuid(),
                        Date = sd26.SF_POSTAV_DATE,
                        NomenklDC = sd83.DOC_CODE,
                        Name = sd83.NOM_NAME,
                        // ReSharper disable once MergeConditionalExpression
                        COName = sd26.SD_40 != null ? sd26.SD_40.CENT_NAME : "ЦО не указан",
                        Quantity = td26.SFT_KOL,
                        Summa = (decimal) td26.SFT_SUMMA_K_OPLATE_KONTR_CRS,
                        KontrCrsDC = sd43.VALUTA_DC,
                        Kontragent = sd43.NAME,
                        KontragentDC = sd43.DOC_CODE
                    }).ToList();

                var dataOutNaklad = (from sd26 in ent.SD_26.Include(_ => _.SD_40)
                    // ReSharper disable once AccessToDisposedClosure
                    from td26 in ent.TD_26
                    // ReSharper disable once AccessToDisposedClosure
                    from sd83 in ent.SD_83
                    //from sd40 in ent.SD_40
                    // ReSharper disable once AccessToDisposedClosure
                    from sd43 in ent.SD_43
                    where sd26.DOC_CODE == td26.DOC_CODE && sd26.SF_ACCEPTED == 1
                          && sd83.DOC_CODE == td26.SFT_NEMENKL_DC
                          && sd43.DOC_CODE == td26.SFT_NAKLAD_KONTR_DC
                          && sd26.SF_POSTAV_DATE >= StartDate
                          && sd43.FLAG_BALANS == 1
                          && sd83.NOM_0MATER_1USLUGA == 1
                          && td26.SFT_NAKLAD_KONTR_DC != sd26.SF_POST_DC
                          //&& td26.SFT_IS_NAKLAD == 0
                          && sd26.SF_POSTAV_DATE >= StartDate && sd26.SF_POSTAV_DATE <= EndDate
                    select new NakladTemp
                    {
                        Id = Guid.NewGuid(),
                        SfCrsDC = sd26.SF_CRS_DC,
                        SfUchCurrencyRate = sd26.SF_UCHET_VALUTA_RATE,
                        Date = sd26.SF_POSTAV_DATE,
                        NomenklDC = sd83.DOC_CODE,
                        Name = sd83.NOM_NAME,
                        // ReSharper disable once MergeConditionalExpression
                        COName = sd26.SD_40 != null ? sd26.SD_40.CENT_NAME : "ЦО не указан",
                        Quantity = td26.SFT_KOL,
                        Summa = td26.SFT_SUMMA_K_OPLATE_KONTR_CRS,
                        KontrCrsDC = sd43.VALUTA_DC,
                        Kontragent = sd43.NAME,
                        KontragentDC = sd43.DOC_CODE
                    }).ToList();
                foreach (var d in dataOutNaklad.Where(_ => _.SfCrsDC != _.KontrCrsDC))
                {
                    //var crsRates = new CurrencyRates(d.Date, d.Date);
                    //d.Summa = crsRates.GetRate(d.SfCrsDC, GlobalOptions.SystemProfile.MainCurrency.DocCode,
                    //              d.Date) * d.Summa;
                    d.Summa = d.Summa * (decimal)d.SfUchCurrencyRate;
                }

                var dictCOIns1 = new List<string>(dataIn.Select(_ => _.COName).Distinct());
                var dictCOIns = dictCOIns1.ToDictionary(d => d, d => Guid.NewGuid());
                foreach (var d in dataIn)
                    if (!dictCOIns.ContainsKey(d.COName))
                        dictCOIns.Add(d.COName, Guid.NewGuid());

                var dictCOOut1 = new List<string>(dataOut.Concat(dataOutNaklad).Select(_ => _.COName).Distinct());
                var dictCOOuts = dictCOOut1.ToDictionary(d => d, d => Guid.NewGuid());
                foreach (var d in dataOut.Concat(dataOutNaklad))
                    if (!dictCOOuts.ContainsKey(d.COName))
                        dictCOOuts.Add(d.COName, Guid.NewGuid());

                foreach (var d in dataIn)
                {
                    var nom = MainReferences.GetNomenkl(d.NomenklDC);
                    var kontr = MainReferences.GetKontragent(d.KontragentDC);
                    //var kontrRate = GetRate(myRates, (decimal) d.KontrCrsDC,
                    //    GlobalOptions.SystemProfile.MainCurrency.DocCode, d.Date);

                    var e = new ProfitAndLossesExtendRowViewModel
                    {
                        GroupId = dictCOIns[d.COName],
                        Name = nom.NOM_NAME,
                        Note = "Ном.№ - " + nom.NOM_NOMENKL,
                        DocCode = nom.DOC_CODE,
                        Quantity = (decimal) d.Quantity,
                        Price = (decimal) d.Summa / (decimal) d.Quantity,
                        Date = d.Date,
                        Kontragent = d.Kontragent,
                        DocTypeCode = DocumentType.SFClient
                    };

                    switch (kontr.BalansCurrency.Name)
                    {
                        case CurrencyCode.RUBName:
                        case CurrencyCode.RURName:
                            e.ProfitRUB = (decimal) d.Summa;
                            e.LossRUB = 0;
                            e.ResultRUB = (decimal) d.Summa;
                            break;
                        case CurrencyCode.USDName:
                            e.ProfitUSD = (decimal) d.Summa;
                            e.LossUSD = 0;
                            e.ResultUSD = (decimal) d.Summa;
                            break;
                        case CurrencyCode.EURName:
                            e.ProfitEUR = (decimal) d.Summa;
                            e.LossEUR = 0;
                            e.ResultEUR = (decimal) d.Summa;
                            break;

                        case CurrencyCode.GBPName:
                            e.ProfitGBP = (decimal) d.Summa;
                            e.LossGBP = 0;
                            e.ResultGBP = (decimal) d.Summa;
                            break;
                        case CurrencyCode.CHFName:
                            e.ProfitCHF = (decimal) d.Summa;
                            e.LossCHF = 0;
                            e.ResultCHF = (decimal) d.Summa;
                            break;
                        case CurrencyCode.SEKName:
                            e.ProfitSEK = (decimal) d.Summa;
                            e.LossSEK = 0;
                            e.ResultSEK = (decimal) d.Summa;
                            break;
                    }

                    Extend.Add(e);
                    ExtendNach.Add(e);
                }

                foreach (var d in dataOut.Concat(dataOutNaklad))
                {
                    var nom = MainReferences.GetNomenkl(d.NomenklDC);
                    var kontr = MainReferences.GetKontragent(d.KontragentDC);
                    //var kontrRate = GetRate(myRates, (decimal) d.KontrCrsDC,
                    //    GlobalOptions.SystemProfile.MainCurrency.DocCode, d.Date);

                    var e = new ProfitAndLossesExtendRowViewModel
                    {
                        GroupId = dictCOOuts[d.COName],
                        Name = nom.NOM_NAME,
                        Note = "Ном.№ - " + nom.NOM_NOMENKL,
                        DocCode = nom.DOC_CODE,
                        Quantity = d.Quantity,
                        Price = (decimal) d.Summa / d.Quantity,
                        Date = d.Date,
                        Kontragent = d.Kontragent,
                        DocTypeCode = DocumentType.SFProvider
                    };

                    switch (kontr.BalansCurrency.Name)
                    {
                        case CurrencyCode.RUBName:
                        case CurrencyCode.RURName:
                            e.ProfitRUB = 0;
                            e.LossRUB = (decimal) d.Summa;
                            e.ResultRUB = (decimal) d.Summa;
                            break;
                        case CurrencyCode.USDName:
                            e.ProfitUSD = 0;
                            e.LossUSD = (decimal) d.Summa;
                            e.ResultUSD = (decimal) d.Summa;
                            break;
                        case CurrencyCode.EURName:
                            e.ProfitEUR = 0;
                            e.LossEUR = (decimal) d.Summa;
                            e.ResultEUR = (decimal) d.Summa;
                            break;

                        case CurrencyCode.GBPName:
                            e.ProfitGBP = 0;
                            e.LossGBP = (decimal) d.Summa;
                            e.ResultGBP = (decimal) d.Summa;
                            break;
                        case CurrencyCode.CHFName:
                            e.ProfitCHF = 0;
                            e.LossCHF = (decimal) d.Summa;
                            e.ResultCHF = (decimal) d.Summa;
                            break;
                        case CurrencyCode.SEKName:
                            e.ProfitSEK = 0;
                            e.LossSEK = (decimal) d.Summa;
                            e.ResultSEK = (decimal) d.Summa;
                            break;
                    }

                    Extend.Add(e);
                    ExtendNach.Add(e);
                }

                foreach (
                    var n in dictCOIns.Select(d =>
                        new
                            ProfitAndLossesMainRowViewModel
                            {
                                Id = d.Value,
                                ParentId = Guid.Parse
                                    ("{2FA1DD9F-6842-4209-B0CC-DDEF3B920496}"),
                                Name = d.Key,
                                CalcType = TypeProfitAndLossCalc.IsProfit,
                                LossRUB = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.LossRUB),
                                ProfitRUB = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ProfitRUB),
                                ResultRUB = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ResultRUB),
                                LossUSD = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.LossUSD),
                                ProfitUSD = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ProfitUSD),
                                ResultUSD = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ResultUSD),
                                LossEUR = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.LossEUR),
                                ProfitEUR = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ProfitEUR),
                                ResultEUR = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ResultEUR),
                                LossGBP = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.LossGBP),
                                ProfitGBP = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ProfitGBP),
                                ResultGBP = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ResultGBP),
                                LossCHF = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.LossCHF),
                                ProfitCHF = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ProfitCHF),
                                ResultCHF = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ResultCHF),
                                LossSEK = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.LossSEK),
                                ProfitSEK = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ProfitSEK),
                                ResultSEK = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ResultSEK)
                            }
                    ))
                {
                    Main.Add(n);
                    MainNach.Add(n);
                }
                foreach (
                    var n in dictCOOuts.Select(d =>
                        new
                            ProfitAndLossesMainRowViewModel
                            {
                                Id = d.Value,
                                ParentId = Guid.Parse("{E47EF726-3BEA-4B18-9773-E564D624FDF6}"),
                                Name = d.Key,
                                CalcType = TypeProfitAndLossCalc.IsLoss,
                                LossRUB = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.LossRUB),
                                ProfitRUB = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ProfitRUB),
                                ResultRUB = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ResultRUB),
                                LossUSD = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.LossUSD),
                                ProfitUSD = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ProfitUSD),
                                ResultUSD = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ResultUSD),
                                LossEUR = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.LossEUR),
                                ProfitEUR = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ProfitEUR),
                                ResultEUR = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ResultEUR),
                                LossGBP = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.LossGBP),
                                ProfitGBP = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ProfitGBP),
                                ResultGBP = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ResultGBP),
                                LossCHF = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.LossCHF),
                                ProfitCHF = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ProfitCHF),
                                ResultCHF = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ResultCHF),
                                LossSEK = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.LossSEK),
                                ProfitSEK = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ProfitSEK),
                                ResultSEK = Extend.Where(_ => _.GroupId == d.Value).Sum(_ => _.ResultSEK)
                            }
                    ))
                {
                    Main.Add(n);
                    MainNach.Add(n);
                }
            }
        }

        private void CalcOutBalans()
        {
            using (var ent = GlobalOptions.GetEntities())
            {
                var dataTovarPoluchen = (from td24 in ent.TD_24
                    from sd24 in ent.SD_24
                    from sd43 in ent.SD_43
                    from td26 in ent.TD_26
                    from sd83 in ent.SD_83
                    from sd26 in ent.SD_26
                    where td24.DOC_CODE == sd24.DOC_CODE
                          && sd24.DD_DATE >= StartDate && sd24.DD_DATE <= EndDate
                          && sd43.DOC_CODE == sd24.DD_KONTR_POL_DC
                          && sd43.FLAG_BALANS == 0 && sd24.DD_DATE >= StartDate
                          && sd83.DOC_CODE == td24.DDT_NOMENKL_DC
                          && td26.DOC_CODE == td24.DDT_SPOST_DC && td26.CODE == td24.DDT_SPOST_ROW_CODE
                          && sd26.DOC_CODE == td26.DOC_CODE
                          && sd24.DD_KONTR_OTPR_DC != GlobalOptions.SystemProfile.OwnerKontragent.DOC_CODE
                    select new
                    {
                        Date = sd24.DD_DATE,
                        NomenklCrsDC = sd83.NOM_SALE_CRS_DC,
                        Name = sd83.NOM_NAME + "(" + sd83.NOM_NOMENKL + ")",
                        Note = "С/ф №" + sd26.SF_IN_NUM + " от " + sd26.SF_POSTAV_DATE + " Поставщик - " + sd43.NAME,
                        DocCode = sd83.DOC_CODE,
                        Price = td26.SFT_ED_CENA,
                        Quantity = td24.DDT_KOL_PRIHOD,
                        Profit = td26.SFT_ED_CENA * (td26.SFT_KOL / td24.DDT_KOL_PRIHOD),
                        Loss = 0,
                        Result = td26.SFT_ED_CENA * (td26.SFT_KOL / td24.DDT_KOL_PRIHOD),
                        KontrName = sd43.NAME,
                        NomenklDC = sd83.DOC_CODE
                    }).ToList();

                foreach (var d in dataTovarPoluchen)
                {
                    var nom = MainReferences.GetNomenkl(d.NomenklDC);
                    var newOp = new ProfitAndLossesExtendRowViewModel
                    {
                        GroupId = Guid.Parse("{297D2727-5161-48ED-969E-651811906526}"),
                        Name = d.Name,
                        Note = d.Note,
                        DocCode = d.DocCode,
                        Quantity = d.Quantity,
                        Price = (decimal) d.Price,
                        Date = d.Date,
                        Kontragent = d.KontrName,
                        DocTypeCode = DocumentType.StoreOrderIn
                    };
                    switch (nom.Currency.Name)
                    {
                        case CurrencyCode.RUBName:
                        case CurrencyCode.RURName:
                            newOp.ProfitRUB = (decimal) d.Profit;
                            newOp.LossRUB = 0;
                            newOp.ResultRUB = (decimal) d.Profit;
                            break;
                        case CurrencyCode.USDName:
                            newOp.ProfitUSD = (decimal) d.Profit;
                            newOp.LossUSD = 0;
                            newOp.ResultUSD = (decimal) d.Profit;
                            break;
                        case CurrencyCode.EURName:
                            newOp.ProfitEUR = (decimal) d.Profit;
                            newOp.LossEUR = 0;
                            newOp.ResultEUR = (decimal) d.Profit;
                            break;

                        case CurrencyCode.GBPName:
                            newOp.ProfitGBP = (decimal) d.Profit;
                            newOp.LossGBP = 0;
                            newOp.ResultGBP = (decimal) d.Profit;
                            break;
                        case CurrencyCode.CHFName:
                            newOp.ProfitCHF = (decimal) d.Profit;
                            newOp.LossCHF = 0;
                            newOp.ResultCHF = (decimal) d.Profit;
                            break;
                        case CurrencyCode.SEKName:
                            newOp.ProfitSEK = (decimal) d.Profit;
                            newOp.LossSEK = 0;
                            newOp.ResultSEK = (decimal) d.Profit;
                            break;
                    }

                    Extend.Add(newOp);
                    ExtendNach.Add(newOp);
                }
// ReSharper disable AccessToDisposedClosure
                var dataTovarOtgr = (from td24 in ent.TD_24
                    from sd24 in ent.SD_24
                    from sd43 in ent.SD_43
                    from td84 in ent.TD_84
                    from sd83 in ent.SD_83
                    from sd84 in ent.SD_84
                    from nomPrice in ent.NOM_PRICE
                    where td24.DOC_CODE == sd24.DOC_CODE
                          && sd24.DD_DATE >= StartDate && sd24.DD_DATE <= EndDate
                          && sd43.DOC_CODE == sd24.DD_KONTR_POL_DC
                          && sd43.FLAG_BALANS == 0
                          && sd83.DOC_CODE == td24.DDT_NOMENKL_DC
                          && td84.DOC_CODE == td24.DDT_SFACT_DC && td84.CODE == td24.DDT_SFACT_ROW_CODE
                          && sd84.DOC_CODE == td84.DOC_CODE
                          && sd24.DD_KONTR_OTPR_DC != GlobalOptions.SystemProfile.OwnerKontragent.DOC_CODE
                          && nomPrice.NOM_DC == td24.DDT_NOMENKL_DC && nomPrice.DATE == ent.NOM_PRICE.Where(
                                  _ =>
                                      _.NOM_DC ==
                                      td24.DDT_NOMENKL_DC &&
                                      _.DATE <= sd24.DD_DATE)
                              .Max(_ => _.DATE)
                    select new
                    {
                        Date = sd24.DD_DATE,
                        NomenklCrsDC = sd83.NOM_SALE_CRS_DC,
                        Name = sd83.NOM_NAME + "(" + sd83.NOM_NOMENKL + ")",
                        Note = "С/ф №" + sd84.SF_IN_NUM + " от " + sd84.SF_DATE + " Получатель - " + sd43.NAME,
                        DocCode = sd83.DOC_CODE,
                        Price = td84.SFT_ED_CENA,
                        NomPrice =
                        GlobalOptions.SystemProfile.NomenklCalcType == NomenklCalcType.NakladSeparately
                            ? nomPrice.PRICE_WO_NAKLAD
                            : nomPrice.PRICE,
                        Quantity = td24.DDT_KOL_RASHOD,
                        Quantity2 = td84.SFT_KOL,
                        KonrtName = sd43.NAME,
                        NomenklDC = sd83.DOC_CODE
                    }).ToList();
// ReSharper restore AccessToDisposedClosure

                foreach (var d in dataTovarOtgr)
                {
                    //var nomRate = GetRate(myRates, (decimal) d.NomenklCrsDC,
                    //    GlobalOptions.SystemProfile.MainCurrency.DocCode, d.Date);
                    var nom = MainReferences.GetNomenkl(d.NomenklDC);
                    var newOp = new ProfitAndLossesExtendRowViewModel
                    {
                        GroupId = Guid.Parse("{E47B2338-C42F-4B2A-8865-1024FC84F020}"),
                        Name = d.Name,
                        Note = d.Note,
                        DocCode = d.DocCode,
                        Quantity = d.Quantity,
                        Price = (decimal) d.Price,
                        Date = d.Date,
                        Kontragent = d.KonrtName,
                        DocTypeCode = DocumentType.Waybill
                    };
                    switch (nom.Currency.Name)
                    {
                        case CurrencyCode.RUBName:
                        case CurrencyCode.RURName:
                            newOp.ProfitRUB = 0;
                            newOp.LossRUB = d.Quantity * d.NomPrice;
                            newOp.ResultRUB = -d.Quantity * d.NomPrice;
                            break;
                        case CurrencyCode.USDName:
                            newOp.ProfitUSD = 0;
                            newOp.LossUSD = d.Quantity * d.NomPrice;
                            newOp.ResultUSD = -d.Quantity * d.NomPrice;
                            break;
                        case CurrencyCode.EURName:
                            newOp.ProfitEUR = 0;
                            newOp.LossEUR = d.Quantity * d.NomPrice;
                            newOp.ResultEUR = -d.Quantity * d.NomPrice;
                            break;

                        case CurrencyCode.GBPName:
                            newOp.ProfitGBP = 0;
                            newOp.LossGBP = d.Quantity * d.NomPrice;
                            newOp.ResultGBP = -d.Quantity * d.NomPrice;
                            break;
                        case CurrencyCode.CHFName:
                            newOp.ProfitCHF = 0;
                            newOp.LossCHF = d.Quantity * d.NomPrice;
                            newOp.ResultEUR = -d.Quantity * d.NomPrice;
                            break;
                        case CurrencyCode.SEKName:
                            newOp.ProfitSEK = 0;
                            newOp.LossSEK = d.Quantity * d.NomPrice;
                            newOp.ResultSEK = -d.Quantity * d.NomPrice;
                            break;
                    }
                    Extend.Add(newOp);
                    ExtendNach.Add(newOp);
                }

                var dataBankIn = (from sd101 in ent.SD_101
                    from td101 in ent.TD_101
                    from sd43 in ent.SD_43
                    where sd101.DOC_CODE == td101.DOC_CODE &&
                          sd43.DOC_CODE == (td101.VVT_KONTRAGENT ?? 0) && (sd43.FLAG_BALANS ?? 0) == 0 &&
                          sd101.VV_STOP_DATE >= StartDate && sd101.VV_STOP_DATE <= EndDate &&
                          td101.VVT_VAL_PRIHOD > 0
                          && td101.VVT_KONTRAGENT != GlobalOptions.SystemProfile.OwnerKontragent.DOC_CODE
                    select new
                    {
                        Date = sd101.VV_START_DATE,
                        CrsDC = td101.VVT_CRS_DC,
                        Name = "Банковская выписка",
                        Note = "№" + td101.VVT_DOC_NUM + " Контрагент - " + sd43.NAME,
                        DocCode = sd101.DOC_CODE,
                        Price = td101.VVT_VAL_PRIHOD,
                        KontrDc = td101.VVT_KONTRAGENT,
                        Quantity = 1,
                        Profit = td101.VVT_VAL_PRIHOD,
                        Loss = 0,
                        Result = td101.VVT_VAL_PRIHOD,
                        OperCrsDC = td101.VVT_CRS_DC
                    }).ToList();

                var dataBankOut = (from sd101 in ent.SD_101
                    from td101 in ent.TD_101
                    from sd43 in ent.SD_43
                    where sd101.DOC_CODE == td101.DOC_CODE && sd43.DOC_CODE == (td101.VVT_KONTRAGENT ?? 0) &&
                          (sd43.FLAG_BALANS ?? 0) == 0 && sd101.VV_STOP_DATE >= StartDate &&
                          sd101.VV_STOP_DATE <= EndDate && td101.VVT_VAL_RASHOD > 0
                          && td101.VVT_KONTRAGENT != GlobalOptions.SystemProfile.OwnerKontragent.DOC_CODE
                    select new
                    {
                        Date = sd101.VV_START_DATE,
                        CrsDC = td101.VVT_CRS_DC,
                        Name = "Банковская выписка",
                        Note = "№" + td101.VVT_DOC_NUM + " Контрагент - " + sd43.NAME,
                        DocCode = sd101.DOC_CODE,
                        KontrDc = td101.VVT_KONTRAGENT,
                        Price = td101.VVT_VAL_RASHOD,
                        Quantity = 1,
                        Profit = 0,
                        Loss = td101.VVT_VAL_RASHOD,
                        Result = -td101.VVT_VAL_RASHOD,
                        OperCrsDC = td101.VVT_CRS_DC
                    }).ToList();

                foreach (var d in dataBankIn)
                {
                    //var crsRate = GetRate(myRates, d.CrsDC,
                    //    GlobalOptions.SystemProfile.MainCurrency.DocCode, d.Date);
                    var kontr = MainReferences.GetKontragent(d.KontrDc);
                    var newOp = new ProfitAndLossesExtendRowViewModel
                    {
                        GroupId = Guid.Parse("{297D2727-5161-48ED-969E-651811906526}"),
                        Name = d.Name,
                        Note = d.Note,
                        DocCode = d.DocCode,
                        Quantity = d.Quantity,
                        Price = (decimal) d.Price,
                        Date = d.Date,
                        Kontragent = kontr.Name,
                        DocTypeCode = DocumentType.Bank
                    };
                    var operCRsName = MainReferences.Currencies[d.OperCrsDC].Name;
                    switch (operCRsName)
                    {
                        case CurrencyCode.RUBName:
                        case CurrencyCode.RURName:
                            newOp.ProfitRUB = (decimal) d.Price;
                            newOp.LossRUB = 0;
                            newOp.ResultRUB = (decimal) d.Result;
                            break;
                        case CurrencyCode.USDName:
                            newOp.ProfitUSD = (decimal) d.Price;
                            newOp.LossUSD = 0;
                            newOp.ResultUSD = (decimal) d.Result;
                            break;
                        case CurrencyCode.EURName:
                            newOp.ProfitEUR = (decimal) d.Price;
                            newOp.LossEUR = 0;
                            newOp.ResultEUR = (decimal) d.Result;
                            break;

                        case CurrencyCode.GBPName:
                            newOp.ProfitGBP = (decimal) d.Price;
                            newOp.LossGBP = 0;
                            newOp.ResultGBP = (decimal) d.Result;
                            break;
                        case CurrencyCode.CHFName:
                            newOp.ProfitCHF = (decimal) d.Price;
                            newOp.LossCHF = 0;
                            newOp.ResultCHF = (decimal) d.Result;
                            break;
                        case CurrencyCode.SEKName:
                            newOp.ProfitSEK = (decimal) d.Price;
                            newOp.LossSEK = 0;
                            newOp.ResultSEK = (decimal) d.Result;
                            break;
                    }
                    Extend.Add(newOp);
                    ExtendNach.Add(newOp);
                }
                foreach (var d in dataBankOut)
                {
                    //var crsRate = GetRate(myRates, d.CrsDC,
                    //    GlobalOptions.SystemProfile.MainCurrency.DocCode, d.Date);
                    var kontr = MainReferences.GetKontragent(d.KontrDc);
                    var newOp = new ProfitAndLossesExtendRowViewModel
                    {
                        GroupId = Guid.Parse("{E47B2338-C42F-4B2A-8865-1024FC84F020}"),
                        Name = d.Name,
                        Note = d.Note,
                        DocCode = d.DocCode,
                        Quantity = d.Quantity,
                        Price = (decimal) d.Price,
                        Date = d.Date,
                        Kontragent = kontr.Name,
                        DocTypeCode = DocumentType.Bank
                    };
                    var operCRsName = MainReferences.Currencies[d.OperCrsDC].Name;
                    switch (operCRsName)
                    {
                        case CurrencyCode.RUBName:
                        case CurrencyCode.RURName:
                            newOp.ProfitRUB = 0;
                            newOp.LossRUB = (decimal) d.Price;
                            newOp.ResultRUB = (decimal) d.Result;
                            break;
                        case CurrencyCode.USDName:
                            newOp.ProfitUSD = 0;
                            newOp.LossUSD = (decimal) d.Price;
                            newOp.ResultUSD = (decimal) d.Result;
                            break;
                        case CurrencyCode.EURName:
                            newOp.ProfitEUR = 0;
                            newOp.LossEUR = (decimal) d.Price;
                            newOp.ResultEUR = (decimal) d.Result;
                            break;

                        case CurrencyCode.GBPName:
                            newOp.ProfitGBP = 0;
                            newOp.LossGBP = (decimal) d.Price;
                            newOp.ResultGBP = (decimal) d.Result;
                            break;
                        case CurrencyCode.CHFName:
                            newOp.ProfitCHF = 0;
                            newOp.LossCHF = (decimal) d.Price;
                            newOp.ResultCHF = (decimal) d.Result;
                            break;
                        case CurrencyCode.SEKName:
                            newOp.ProfitSEK = 0;
                            newOp.LossSEK = (decimal) d.Price;
                            newOp.ResultSEK = (decimal) d.Result;
                            break;
                    }
                    Extend.Add(newOp);
                    ExtendNach.Add(newOp);
                }

                var dataCashIn = (from sd33 in ent.SD_33
                    // ReSharper disable once AccessToDisposedClosure
                    from sd43 in ent.SD_43
                    where sd33.DATE_ORD >= StartDate && sd33.DATE_ORD <= EndDate
                          && sd43.DOC_CODE == sd33.KONTRAGENT_DC
                          && sd43.FLAG_BALANS == 0
                          && sd33.KONTRAGENT_DC != GlobalOptions.SystemProfile.OwnerKontragent.DOC_CODE
                    select new
                    {
                        Date = sd33.DATE_ORD,
                        CrsDC = sd33.CRS_DC,
                        Name = "Приходный кассовый ордер",
                        Note = "№" + sd33.NUM_ORD + " от " + sd33.DATE_ORD + " Контрагент - " + sd43.NAME,
                        DocCode = sd33.DOC_CODE,
                        Price = sd33.SUMM_ORD,
                        Quantity = 1,
                        Profit = sd33.SUMM_ORD,
                        Loss = 0,
                        Result = sd33.SUMM_ORD,
                        KontrDC = sd33.KONTRAGENT_DC,
                        Percent = sd33.KONTR_CRS_SUM_CORRECT_PERCENT
                    }).ToList();

                var dataCashOut = (from sd34 in ent.SD_34
                    // ReSharper disable once AccessToDisposedClosure
                    from sd43 in ent.SD_43
                    where sd34.DATE_ORD >= StartDate && sd34.DATE_ORD <= EndDate
                          && sd43.DOC_CODE == sd34.KONTRAGENT_DC
                          && sd43.FLAG_BALANS == 0
                          && sd34.KONTRAGENT_DC != GlobalOptions.SystemProfile.OwnerKontragent.DOC_CODE
                    select new
                    {
                        Date = sd34.DATE_ORD,
                        CrsDC = sd34.CRS_DC,
                        Name = "Расходный кассовый ордер",
                        Note = "№" + sd34.NUM_ORD + " от " + sd34.DATE_ORD + " Контрагент - " + sd43.NAME,
                        DocCode = sd34.DOC_CODE,
                        Price = sd34.SUMM_ORD,
                        Quantity = 1,
                        Profit = 0,
                        Loss = sd34.SUMM_ORD,
                        Result = -sd34.SUMM_ORD,
                        KontrDC = sd34.KONTRAGENT_DC,
                        Percent = sd34.KONTR_CRS_SUM_CORRECT_PERCENT
                    }).ToList();
                foreach (var d in dataCashIn)
                {
                    //var crsRate = GetRate(myRates, (decimal) d.CrsDC,
                    //    GlobalOptions.SystemProfile.MainCurrency.DocCode, (DateTime) d.Date);
                    var crsName = MainReferences.Currencies[d.CrsDC.Value].Name;
                    //var kontr = MainReferences.GetKontragent(d.KontrDC);

                    var newOp = new ProfitAndLossesExtendRowViewModel
                    {
                        GroupId = Guid.Parse("{297D2727-5161-48ED-969E-651811906526}"),
                        Name = d.Name,
                        Note = d.Note,
                        DocCode = d.DocCode,
                        Quantity = d.Quantity,
                        Price = (decimal) d.Price,
                        Kontragent = MainReferences.GetKontragent(d.KontrDC).Name,
                        Date = (DateTime) d.Date,
                        DocTypeCode = DocumentType.CashIn
                    };
                    switch (crsName)
                    {
                        case CurrencyCode.RUBName:
                        case CurrencyCode.RURName:
                            newOp.ProfitRUB = d.Profit ?? 0;
                            newOp.LossRUB = 0;
                            newOp.ResultRUB = (decimal) d.Result;
                            break;
                        case CurrencyCode.USDName:
                            newOp.ProfitUSD = d.Profit ?? 0;
                            newOp.LossUSD = 0;
                            newOp.ResultUSD = (decimal) d.Result;
                            break;
                        case CurrencyCode.EURName:
                            newOp.ProfitEUR = d.Profit ?? 0;
                            newOp.LossEUR = 0;
                            newOp.ResultEUR = (decimal) d.Result;
                            break;

                        case CurrencyCode.GBPName:
                            newOp.ProfitGBP = d.Profit ?? 0;
                            newOp.LossGBP = 0;
                            newOp.ResultGBP = (decimal) d.Result;
                            break;
                        case CurrencyCode.CHFName:
                            newOp.ProfitCHF = d.Profit ?? 0;
                            newOp.LossCHF = 0;
                            newOp.ResultCHF = (decimal) d.Result;
                            break;
                        case CurrencyCode.SEKName:
                            newOp.ProfitSEK = d.Profit ?? 0;
                            newOp.LossSEK = 0;
                            newOp.ResultSEK = (decimal) d.Result;
                            break;
                    }
                    Extend.Add(newOp);
                    ExtendNach.Add(newOp);
                }

                foreach (var d in dataCashOut)
                {
                    //var crsRate = GetRate(myRates, (decimal) d.CrsDC,
                    //    GlobalOptions.SystemProfile.MainCurrency.DocCode, (DateTime) d.Date);
                    //var kontr = MainReferences.GetKontragent(d.KontrDC);
                    var crsName = MainReferences.Currencies[d.CrsDC.Value].Name;
                    var newOp = new ProfitAndLossesExtendRowViewModel
                    {
                        GroupId = Guid.Parse("{E47B2338-C42F-4B2A-8865-1024FC84F020}"),
                        Name = d.Name,
                        Note = d.Note,
                        DocCode = d.DocCode,
                        Quantity = d.Quantity,
                        Price = (decimal) d.Price,
                        Date = (DateTime) d.Date,
                        Kontragent = MainReferences.GetKontragent(d.KontrDC).Name,
                        DocTypeCode = DocumentType.CashOut
                    };
                    switch (crsName)
                    {
                        case CurrencyCode.RUBName:
                        case CurrencyCode.RURName:
                            newOp.ProfitRUB = 0;
                            newOp.LossRUB = (decimal) d.Loss;
                            newOp.ResultRUB = (decimal) d.Result;
                            break;
                        case CurrencyCode.USDName:
                            newOp.ProfitUSD = 0;
                            newOp.LossUSD = (decimal) d.Loss;
                            newOp.ResultUSD = (decimal) d.Result;
                            break;
                        case CurrencyCode.EURName:
                            newOp.ProfitEUR = 0;
                            newOp.LossEUR = (decimal) d.Loss;
                            newOp.ResultEUR = (decimal) d.Result;
                            break;

                        case CurrencyCode.GBPName:
                            newOp.ProfitGBP = 0;
                            newOp.LossGBP = (decimal) d.Loss;
                            newOp.ResultGBP = (decimal) d.Result;
                            break;
                        case CurrencyCode.CHFName:
                            newOp.ProfitCHF = 0;
                            newOp.LossCHF = (decimal) d.Loss;
                            newOp.ResultCHF = (decimal) d.Result;
                            break;
                        case CurrencyCode.SEKName:
                            newOp.ProfitSEK = 0;
                            newOp.LossSEK = (decimal) d.Loss;
                            newOp.ResultSEK = (decimal) d.Result;
                            break;
                    }
                    Extend.Add(newOp);
                    ExtendNach.Add(newOp);
                }
            }
        }

        private void CalcFinance()
        {
            using (var ent = GlobalOptions.GetEntities())
            {
                var data = (from sd110 in ent.SD_110
                    // ReSharper disable once AccessToDisposedClosure
                    from td110 in ent.TD_110
                    // ReSharper disable once AccessToDisposedClosure
                    from sd43 in ent.SD_43
                    from sd111 in ent.SD_111
                    where td110.DOC_CODE == sd110.DOC_CODE
                          && sd43.DOC_CODE == td110.VZT_KONTR_DC
                          && sd43.FLAG_BALANS == 1
                          && sd111.DOC_CODE == sd110.VZ_TYPE_DC
                          //&& (td110.VZT_DOC_DATE >= sd43.START_BALANS)
                          && td110.VZT_DOC_DATE >= StartDate && td110.VZT_DOC_DATE <= EndDate
                    select new
                    {
                        DateRow = td110.VZT_DOC_DATE,
                        Num = sd110.VZ_NUM,
                        Date = sd110.VZ_DATE,
                        KontrCrsDC = sd43.VALUTA_DC,
                        IsProfit = td110.VZT_1MYDOLZH_0NAMDOLZH == 1,
                        Note = td110.VZT_DOC_NOTES,
                        DocCode = td110.DOC_CODE,
                        Summa = td110.VZT_KONTR_CRS_SUMMA,
                        Kontragent = sd43.NAME,
                        KontrDC = sd43.DOC_CODE,
                        sd111.IsCurrencyConvert
                    }).ToList();

                foreach (var d in data)
                {
                    var kontrRate = GetRate(myRates, (decimal) d.KontrCrsDC,
                        GlobalOptions.SystemProfile.MainCurrency.DocCode, d.Date);
                    var kontr = MainReferences.GetKontragent(d.KontrDC);
                    var newOp = new ProfitAndLossesExtendRowViewModel
                    {
                        GroupId = GetGuidForActVzaimozachet(d.IsProfit, d.IsCurrencyConvert),

                        Name = d.IsCurrencyConvert ? "Акт конвертации" : "Взаимозачет",
                        Note =
                            string.Format("Дата {0} №{1}  {4}/ Дата строки {2} / {3}", d.Date.ToShortDateString(),
                                d.Num,
                                d.DateRow.ToShortDateString(), d.Note, d.Kontragent),
                        DocCode = d.DocCode,
                        Quantity = 1,
                        Price = (decimal) (d.IsProfit ? d.Summa * kontrRate : -d.Summa * kontrRate),
                        Kontragent = kontr.Name,
                        Date = d.DateRow,
                        DocTypeCode = DocumentType.MutualAccounting
                    };
                    switch (kontr.BalansCurrency.Name)
                    {
                        case CurrencyCode.RUBName:
                        case CurrencyCode.RURName:
                            newOp.ProfitRUB = d.IsProfit ? (decimal) d.Summa : 0;
                            newOp.LossRUB = d.IsProfit ? 0 : (decimal) -d.Summa;
                            newOp.ResultRUB = Convert.ToDecimal(d.Summa);
                            break;
                        case CurrencyCode.USDName:
                            newOp.ProfitUSD = d.IsProfit ? (decimal) d.Summa : 0;
                            newOp.LossUSD = d.IsProfit ? 0 : (decimal) -d.Summa;
                            newOp.ResultUSD = Convert.ToDecimal(d.Summa);
                            break;
                        case CurrencyCode.EURName:
                            newOp.ProfitEUR = d.IsProfit ? (decimal) d.Summa : 0;
                            newOp.LossEUR = d.IsProfit ? 0 : (decimal) -d.Summa;
                            newOp.ResultEUR = Convert.ToDecimal(d.Summa);
                            break;

                        case CurrencyCode.GBPName:
                            newOp.ProfitGBP = d.IsProfit ? (decimal) d.Summa : 0;
                            newOp.LossGBP = d.IsProfit ? 0 : (decimal) -d.Summa;
                            newOp.ResultGBP = Convert.ToDecimal(d.Summa);
                            break;
                        case CurrencyCode.CHFName:
                            newOp.ProfitCHF = d.IsProfit ? (decimal) d.Summa : 0;
                            newOp.LossCHF = d.IsProfit ? 0 : (decimal) -d.Summa;
                            newOp.ResultCHF = Convert.ToDecimal(d.Summa);
                            break;
                        case CurrencyCode.SEKName:
                            newOp.ProfitSEK = d.IsProfit ? (decimal) d.Summa : 0;
                            newOp.LossSEK = d.IsProfit ? 0 : (decimal) -d.Summa;
                            newOp.ResultSEK = Convert.ToDecimal(d.Summa);
                            break;
                    }
                    Extend.Add(newOp);
                    ExtendNach.Add(newOp);
                }
            }
        }

        private Guid GetGuidForActVzaimozachet(bool isProfit, bool isConvert)
        {
            if (isConvert)
            {
                if (isProfit)
                    return Guid.Parse("{B6F2540A-9593-42E3-B34F-8C0983BC39A2}");
                return Guid.Parse("{35EBABEC-EAC3-4C3C-8383-6326C5D64C8C}");
            }

            if (isProfit)
                return Guid.Parse("{30E9BD73-9BDA-4D75-B897-332F9210B9B1}");
            return Guid.Parse("{459937DF-085F-4825-9AE9-810B054D0276}");
        }

        private void CalcCashPercent()
        {
            using (var ent = GlobalOptions.GetEntities())
            {
                var dataCashIn = (from sd33 in ent.SD_33
                    // ReSharper disable once AccessToDisposedClosure
                    from sd43 in ent.SD_43
                    where sd33.DATE_ORD >= StartDate && sd33.DATE_ORD <= EndDate
                          && sd43.DOC_CODE == sd33.KONTRAGENT_DC
                          && sd43.FLAG_BALANS == 1
                          // ReSharper disable once CompareOfFloatsByEqualityOperator
                          && sd33.KONTR_CRS_SUM_CORRECT_PERCENT != null && sd33.KONTR_CRS_SUM_CORRECT_PERCENT != 0
                    select new
                    {
                        Date = sd33.DATE_ORD,
                        CrsDC = sd33.CRS_DC,
                        Name = "Приходный кассовый ордер",
                        Note = "№" + sd33.NUM_ORD + " от " + sd33.DATE_ORD + " Контрагент - " + sd43.NAME,
                        DocCode = sd33.DOC_CODE,
                        Price = sd33.SUMM_ORD,
                        Quantity = 1,
                        Profit = sd33.SUMM_ORD,
                        Loss = 0,
                        Result = sd33.SUMM_ORD,
                        KontrDC = sd33.KONTRAGENT_DC,
                        Percent = sd33.KONTR_CRS_SUM_CORRECT_PERCENT
                    }).ToList();

                var dataCashOut = (from sd34 in ent.SD_34
                    // ReSharper disable once AccessToDisposedClosure
                    from sd43 in ent.SD_43
                    where sd34.DATE_ORD >= StartDate && sd34.DATE_ORD <= EndDate
                          && sd43.DOC_CODE == sd34.KONTRAGENT_DC
                          && sd43.FLAG_BALANS == 1
                          // ReSharper disable once CompareOfFloatsByEqualityOperator
                          && sd34.KONTR_CRS_SUM_CORRECT_PERCENT != null && sd34.KONTR_CRS_SUM_CORRECT_PERCENT != 0
                    select new
                    {
                        Date = sd34.DATE_ORD,
                        CrsDC = sd34.CRS_DC,
                        Name = "Расходный кассовый ордер",
                        Note = "№" + sd34.NUM_ORD + " от " + sd34.DATE_ORD + " Контрагент - " + sd43.NAME,
                        DocCode = sd34.DOC_CODE,
                        Price = sd34.SUMM_ORD,
                        Quantity = 1,
                        Profit = 0,
                        Loss = sd34.SUMM_ORD,
                        Result = -sd34.SUMM_ORD,
                        KontrDC = sd34.KONTRAGENT_DC,
                        Percent = sd34.KONTR_CRS_SUM_CORRECT_PERCENT
                    }).ToList();
                foreach (var d in dataCashIn)
                {
                    var crsRate = GetRate(myRates, (decimal) d.CrsDC,
                        GlobalOptions.SystemProfile.MainCurrency.DocCode, (DateTime) d.Date);
                    var kontr = MainReferences.GetKontragent(d.KontrDC);
                    if (d.Percent == null) continue;
                    if (d.Percent > 0)
                    {
                        var newOp = new ProfitAndLossesExtendRowViewModel
                        {
                            GroupId = Guid.Parse("{E9D63300-829B-4CB1-AA05-68EC3A73C459}"),
                            Name = d.Name,
                            Note = d.Note,
                            DocCode = d.DocCode,
                            Quantity = d.Quantity,
                            Price = (decimal) d.Price * (decimal) d.Percent / (100 - (decimal) d.Percent),
                            Kontragent = MainReferences.GetKontragent(d.KontrDC).Name,
                            Date = (DateTime) d.Date,
                            DocTypeCode = DocumentType.CashIn
                        };
                        switch (kontr.BalansCurrency.Name)
                        {
                            case CurrencyCode.RUBName:
                            case CurrencyCode.RURName:
                                newOp.ProfitRUB = 0;
                                newOp.LossRUB = (d.Profit ?? 0) * (decimal) d.Percent / (100 - (decimal) d.Percent);
                                newOp.ResultRUB = -(d.Profit ?? 0) * (decimal) d.Percent / (100 - (decimal) d.Percent);
                                break;
                            case CurrencyCode.USDName:
                                newOp.ProfitUSD = 0;
                                newOp.LossUSD = (d.Profit ?? 0) * (decimal) d.Percent / (100 - (decimal) d.Percent);
                                newOp.ResultUSD = -(d.Profit ?? 0) * (decimal) d.Percent / (100 - (decimal) d.Percent);
                                break;
                            case CurrencyCode.EURName:
                                newOp.ProfitEUR = 0;
                                newOp.LossEUR = (d.Profit ?? 0) * (decimal) d.Percent / (100 - (decimal) d.Percent);
                                newOp.ResultEUR = -(d.Profit ?? 0) * (decimal) d.Percent / (100 - (decimal) d.Percent);
                                break;

                            case CurrencyCode.GBPName:
                                newOp.ProfitGBP = 0;
                                newOp.LossGBP = (d.Profit ?? 0) * (decimal) d.Percent / (100 - (decimal) d.Percent);
                                newOp.ResultGBP = -(d.Profit ?? 0) * (decimal) d.Percent / (100 - (decimal) d.Percent);
                                break;
                            case CurrencyCode.CHFName:
                                newOp.ProfitCHF = 0;
                                newOp.LossCHF = (d.Profit ?? 0) * (decimal) d.Percent / (100 - (decimal) d.Percent);
                                newOp.ResultCHF = -(d.Profit ?? 0) * (decimal) d.Percent / (100 - (decimal) d.Percent);
                                break;
                            case CurrencyCode.SEKName:
                                newOp.ProfitSEK = 0;
                                newOp.LossSEK = (d.Profit ?? 0) * (decimal) d.Percent / (100 - (decimal) d.Percent);
                                newOp.ResultSEK = -(d.Profit ?? 0) * (decimal) d.Percent / (100 - (decimal) d.Percent);
                                break;
                        }
                        Extend.Add(newOp);
                        ExtendNach.Add(newOp);
                    }
                    else
                    {
                        var newOp = new ProfitAndLossesExtendRowViewModel
                        {
                            GroupId = Guid.Parse("{836CC414-BEF4-4371-A253-47D2E8F4535F}"),
                            Name = d.Name,
                            Note = d.Note,
                            DocCode = d.DocCode,
                            Quantity = d.Quantity,
                            Price = (decimal) d.Price * (decimal) d.Percent / (100 - (decimal) d.Percent),
                            Kontragent = MainReferences.GetKontragent(d.KontrDC).Name,
                            Date = (DateTime) d.Date,
                            DocTypeCode = DocumentType.CashIn
                        };
                        switch (kontr.BalansCurrency.Name)
                        {
                            case CurrencyCode.RUBName:
                            case CurrencyCode.RURName:
                                newOp.ProfitRUB = (d.Profit ?? 0) * (decimal) d.Percent / (100 - (decimal) d.Percent);
                                newOp.LossRUB = 0;
                                newOp.ResultRUB = (d.Profit ?? 0) * (decimal) d.Percent / (100 - (decimal) d.Percent);
                                break;
                            case CurrencyCode.USDName:
                                newOp.ProfitUSD = (d.Profit ?? 0) * crsRate * (decimal) d.Percent /
                                                  (100 - (decimal) d.Percent);
                                newOp.LossUSD = 0;
                                newOp.ResultUSD = (d.Profit ?? 0) * (decimal) d.Percent / (100 - (decimal) d.Percent);
                                break;
                            case CurrencyCode.EURName:
                                newOp.ProfitEUR = (d.Profit ?? 0) * crsRate * (decimal) d.Percent /
                                                  (100 - (decimal) d.Percent);
                                newOp.LossEUR = 0;
                                newOp.ResultEUR = (d.Profit ?? 0) * (decimal) d.Percent / (100 - (decimal) d.Percent);
                                break;

                            case CurrencyCode.GBPName:
                                newOp.ProfitGBP = (d.Profit ?? 0) * crsRate * (decimal) d.Percent /
                                                  (100 - (decimal) d.Percent);
                                newOp.LossGBP = 0;
                                newOp.ResultGBP = (d.Profit ?? 0) * (decimal) d.Percent / (100 - (decimal) d.Percent);
                                break;
                            case CurrencyCode.CHFName:
                                newOp.ProfitCHF = (d.Profit ?? 0) * crsRate * (decimal) d.Percent /
                                                  (100 - (decimal) d.Percent);
                                newOp.LossCHF = 0;
                                newOp.ResultCHF = (d.Profit ?? 0) * (decimal) d.Percent / (100 - (decimal) d.Percent);
                                break;
                            case CurrencyCode.SEKName:
                                newOp.ProfitSEK = (d.Profit ?? 0) * crsRate * (decimal) d.Percent /
                                                  (100 - (decimal) d.Percent);
                                newOp.LossSEK = 0;
                                newOp.ResultSEK = (d.Profit ?? 0) * (decimal) d.Percent / (100 - (decimal) d.Percent);
                                break;
                        }
                        Extend.Add(newOp);
                        ExtendNach.Add(newOp);
                    }
                }
                foreach (var d in dataCashOut)
                {
                    var crsRate = GetRate(myRates, (decimal) d.CrsDC,
                        GlobalOptions.SystemProfile.MainCurrency.DocCode, (DateTime) d.Date);
                    var kontr = MainReferences.GetKontragent(d.KontrDC);
                    if (d.Percent == null) continue;
                    if (d.Percent > 0)
                    {
                        var newOp = new ProfitAndLossesExtendRowViewModel
                        {
                            GroupId = Guid.Parse("{836CC414-BEF4-4371-A253-47D2E8F4535F}"),
                            Name = d.Name,
                            Note = d.Note,
                            DocCode = d.DocCode,
                            Quantity = d.Quantity,
                            Price = (decimal) d.Price * (decimal) d.Percent / (100 - (decimal) d.Percent),
                            Kontragent = MainReferences.GetKontragent(d.KontrDC).Name,
                            Date = (DateTime) d.Date,
                            DocTypeCode = DocumentType.CashOut
                        };
                        switch (kontr.BalansCurrency.Name)
                        {
                            case CurrencyCode.RUBName:
                            case CurrencyCode.RURName:
                                newOp.ProfitRUB = (d.Loss ?? 0) * (decimal) d.Percent / (100 - (decimal) d.Percent);
                                newOp.LossRUB = 0;
                                newOp.ResultRUB = (decimal) d.Result * (decimal) d.Percent /
                                                  (100 - (decimal) d.Percent);
                                break;
                            case CurrencyCode.USDName:
                                newOp.ProfitUSD = (d.Loss ?? 0) * (decimal) d.Percent / (100 - (decimal) d.Percent);
                                newOp.LossUSD = 0;
                                newOp.ResultUSD = (decimal) d.Result * crsRate * (decimal) d.Percent /
                                                  (100 - (decimal) d.Percent);
                                break;
                            case CurrencyCode.EURName:
                                newOp.ProfitEUR = (d.Loss ?? 0) * (decimal) d.Percent / (100 - (decimal) d.Percent);
                                newOp.LossEUR = 0;
                                newOp.ResultEUR = (decimal) d.Result * crsRate * (decimal) d.Percent /
                                                  (100 - (decimal) d.Percent);
                                break;

                            case CurrencyCode.GBPName:
                                newOp.ProfitGBP = (d.Loss ?? 0) * (decimal) d.Percent / (100 - (decimal) d.Percent);
                                newOp.LossGBP = 0;
                                newOp.ResultGBP = (decimal) d.Result * crsRate * (decimal) d.Percent /
                                                  (100 - (decimal) d.Percent);
                                break;
                            case CurrencyCode.CHFName:
                                newOp.ProfitCHF = (d.Loss ?? 0) * (decimal) d.Percent / (100 - (decimal) d.Percent);
                                newOp.LossCHF = 0;
                                newOp.ResultCHF = (decimal) d.Result * crsRate * (decimal) d.Percent /
                                                  (100 - (decimal) d.Percent);
                                break;
                            case CurrencyCode.SEKName:
                                newOp.ProfitSEK = (d.Loss ?? 0) * (decimal) d.Percent / (100 - (decimal) d.Percent);
                                newOp.LossSEK = 0;
                                newOp.ResultSEK = (decimal) d.Result * crsRate * (decimal) d.Percent /
                                                  (100 - (decimal) d.Percent);
                                break;
                        }
                        Extend.Add(newOp);
                        ExtendNach.Add(newOp);
                    }
                    else
                    {
                        var newOp = new ProfitAndLossesExtendRowViewModel
                        {
                            GroupId = Guid.Parse("{E9D63300-829B-4CB1-AA05-68EC3A73C459}"),
                            Name = d.Name,
                            Note = d.Note,
                            DocCode = d.DocCode,
                            Quantity = d.Quantity,
                            Price = (decimal) d.Price * (decimal) d.Percent / (100 - (decimal) d.Percent),
                            Kontragent = MainReferences.GetKontragent(d.KontrDC).Name,
                            Date = (DateTime) d.Date,
                            DocTypeCode = DocumentType.CashOut
                        };
                        switch (kontr.BalansCurrency.Name)
                        {
                            case CurrencyCode.RUBName:
                            case CurrencyCode.RURName:
                                newOp.ProfitRUB = 0;
                                newOp.LossRUB = (d.Loss ?? 0) * (decimal) d.Percent / (100 - (decimal) d.Percent);
                                newOp.ResultRUB = -(decimal) d.Result * (decimal) d.Percent /
                                                  (100 - (decimal) d.Percent);
                                break;
                            case CurrencyCode.USDName:
                                newOp.ProfitUSD = 0;
                                newOp.LossUSD = (d.Loss ?? 0) * (decimal) d.Percent / (100 - (decimal) d.Percent);
                                newOp.ResultUSD = -(decimal) d.Result * crsRate * (decimal) d.Percent /
                                                  (100 - (decimal) d.Percent);
                                break;
                            case CurrencyCode.EURName:
                                newOp.ProfitEUR = 0;
                                newOp.LossEUR = (d.Loss ?? 0) * (decimal) d.Percent / (100 - (decimal) d.Percent);
                                newOp.ResultEUR = -(decimal) d.Result * crsRate * (decimal) d.Percent /
                                                  (100 - (decimal) d.Percent);
                                break;

                            case CurrencyCode.GBPName:
                                newOp.ProfitGBP = 0;
                                newOp.LossGBP = (d.Loss ?? 0) * (decimal) d.Percent / (100 - (decimal) d.Percent);
                                newOp.ResultGBP = -(decimal) d.Result * crsRate * (decimal) d.Percent /
                                                  (100 - (decimal) d.Percent);
                                break;
                            case CurrencyCode.CHFName:
                                newOp.ProfitCHF = 0;
                                newOp.LossCHF = (d.Loss ?? 0) * (decimal) d.Percent / (100 - (decimal) d.Percent);
                                newOp.ResultCHF = -(decimal) d.Result * crsRate * (decimal) d.Percent /
                                                  (100 - (decimal) d.Percent);
                                break;
                            case CurrencyCode.SEKName:
                                newOp.ProfitSEK = 0;
                                newOp.LossSEK = (d.Loss ?? 0) * (decimal) d.Percent / (100 - (decimal) d.Percent);
                                newOp.ResultSEK = -(decimal) d.Result * crsRate * (decimal) d.Percent /
                                                  (100 - (decimal) d.Percent);
                                break;
                        }
                        Extend.Add(newOp);
                        ExtendNach.Add(newOp);
                    }
                }
            }
        }

        public override void DocumentOpen(object obj)
        {
            DocumentsOpenManager.Open(CurrentExtend.DocTypeCode, CurrentExtend.DocCode);
        }

        private static decimal GetRate(List<CURRENCY_RATES_CB> rates, decimal firstDC, decimal secondDC, DateTime date)
        {
            CURRENCY_RATES_CB f, s;
            try
            {
                if (firstDC == secondDC) return 1;
                var dd = rates.Where(_ => _.RATE_DATE <= date).ToList();
                var date1 = dd.Max(_ => _.RATE_DATE);
                f = rates.SingleOrDefault(_ => _.CRS_DC == firstDC && _.RATE_DATE == date1);
                s = rates.SingleOrDefault(_ => _.CRS_DC == secondDC && _.RATE_DATE == date1);
                if (f != null && s != null && s.RATE != 0)
                    return f.RATE / f.NOMINAL / (s.RATE / s.NOMINAL);
                return -1;
            }
            catch (Exception)
            {
                return -1;
            }
        }

        public class NakladTemp
        {
            public Guid Id { set; get; }
            public DateTime Date { set; get; }
            public decimal NomenklDC { set; get; }
            public string Name { set; get; }

            // ReSharper disable once MergeConditionalExpression
            public string COName { set; get; }

            public decimal Quantity { set; get; }
            public decimal? Summa { set; get; }
            public decimal? KontrCrsDC { set; get; }
            public string Kontragent { set; get; }
            public decimal KontragentDC { set; get; }
            public decimal? SfCrsDC { get; set; }
            public double? SfUchCurrencyRate { get; set; }
        }
    }
}