using Core.Helper;
using DevExpress.Mvvm.DataAnnotations;
using KursDomain.References;
using System.ComponentModel.DataAnnotations;

namespace KursAM2.ViewModel.Management
{
     public class DataAnnotationVzaimozachetRow : DataAnnotationForFluentApiBase,
        IMetadataProvider<VzaimozachetRow>
    {
        void IMetadataProvider<VzaimozachetRow>.BuildMetadata(
            MetadataBuilder<VzaimozachetRow> builder)
        {
            SetNotAutoGenerated(builder);
            builder.Property(_ => _.Kontragent).AutoGenerated().DisplayName("Контрагент").ReadOnly();
            builder.Property(_ => _.SDRSchet).AutoGenerated().DisplayName("Счет доходов/расходов").ReadOnly();
            builder.Property(_ => _.CurrencyName).AutoGenerated().DisplayName("Валюта").ReadOnly();
            builder.Property(_ => _.Summa).AutoGenerated().DisplayName("Сумма").ReadOnly();
            builder.Property(_ => _.Note).AutoGenerated().DisplayName("Примечание").ReadOnly();

            builder.Property(_ => _.ProfitRUB).AutoGenerated().DisplayName("Доход").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.LossRUB).AutoGenerated().DisplayName("Расход").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.ResultRUB).AutoGenerated().DisplayName("Результат").DisplayFormatString("n2")
                .ReadOnly();

            builder.Property(_ => _.ProfitUSD).AutoGenerated().DisplayName("Доход").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.LossUSD).AutoGenerated().DisplayName("Расход").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.ResultUSD).AutoGenerated().DisplayName("Результат").DisplayFormatString("n2")
                .ReadOnly();

            builder.Property(_ => _.ProfitEUR).AutoGenerated().DisplayName("Доход").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.LossEUR).AutoGenerated().DisplayName("Расход").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.ResultEUR).AutoGenerated().DisplayName("Результат").DisplayFormatString("n2")
                .ReadOnly();

            builder.Property(_ => _.ProfitCNY).AutoGenerated().DisplayName("Доход").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.LossCNY).AutoGenerated().DisplayName("Расход").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.ResultCNY).AutoGenerated().DisplayName("Результат").DisplayFormatString("n2")
                .ReadOnly();

            builder.Property(_ => _.ProfitGBP).AutoGenerated().DisplayName("Доход").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.LossGBP).AutoGenerated().DisplayName("Расход").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.ResultGBP).AutoGenerated().DisplayName("Результат").DisplayFormatString("n2")
                .ReadOnly();

            builder.Property(_ => _.ProfitCHF).AutoGenerated().DisplayName("Доход").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.LossCHF).AutoGenerated().DisplayName("Расход").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.ResultCHF).AutoGenerated().DisplayName("Результат").DisplayFormatString("n2")
                .ReadOnly();

            builder.Property(_ => _.ProfitSEK).AutoGenerated().DisplayName("Доход").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.LossSEK).AutoGenerated().DisplayName("Расход").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.ResultSEK).AutoGenerated().DisplayName("Результат").DisplayFormatString("n2")
                .ReadOnly();

                        // @formatter:off
            builder.TableLayout()
                .Group("Основные данные")
                    .ContainsProperty(_ => _.Kontragent)
                    .ContainsProperty(_ => _.SDRSchet)
                    .ContainsProperty(_ => _.CurrencyName)
                    .ContainsProperty(_ => _.Summa)
                    .ContainsProperty(_ => _.Note)
                .EndGroup()
                .Group("RUB")
                    .ContainsProperty(_ => _.ProfitRUB)
                    .ContainsProperty(_ => _.LossRUB)
                    .ContainsProperty(_ => _.ResultRUB)
                .EndGroup()
                .Group("USD")
                    .ContainsProperty(_ => _.ProfitUSD)
                    .ContainsProperty(_ => _.LossUSD)
                    .ContainsProperty(_ => _.ResultUSD)
                .EndGroup()
                .Group("EUR")
                    .ContainsProperty(_ => _.ProfitEUR)
                    .ContainsProperty(_ => _.LossEUR)
                    .ContainsProperty(_ => _.ResultEUR)
                .EndGroup()
                .Group("CNY")
                    .ContainsProperty(_ => _.ProfitCNY)
                    .ContainsProperty(_ => _.LossCNY)
                    .ContainsProperty(_ => _.ResultCNY)
                .EndGroup()
                .Group("GBP")
                    .ContainsProperty(_ => _.ProfitGBP)
                    .ContainsProperty(_ => _.LossGBP)
                    .ContainsProperty(_ => _.ResultGBP)
                .EndGroup()
                .Group("CHF")
                    .ContainsProperty(_ => _.ProfitCHF)
                    .ContainsProperty(_ => _.LossCHF)
                    .ContainsProperty(_ => _.ResultCHF)
                .EndGroup()
                .Group("SEK")
                    .ContainsProperty(_ => _.ProfitSEK)
                    .ContainsProperty(_ => _.LossSEK)
                    .ContainsProperty(_ => _.ResultSEK)
                .EndGroup();
            // @formatter:on
        }
    }
    [MetadataType(typeof(DataAnnotationVzaimozachetRow))]
    public class VzaimozachetRow
    {
        public string Kontragent { set; get; }
        public SDRSchet SDRSchet { set; get; }
        public string CurrencyName { set; get; }
        public decimal Summa { set; get; }
        public string Note { set; get; }
        public decimal ProfitGBP { get; set; }
        public decimal LossGBP { get; set; }
        public decimal ResultGBP { get; set; }
        public decimal ProfitCHF { get; set; }
        public decimal LossCHF { get; set; }
        public decimal ResultCHF { get; set; }
        public decimal ProfitSEK { get; set; }
        public decimal LossSEK { get; set; }
        public decimal ResultSEK { get; set; }
        public decimal ProfitRUB { set; get; }
        public decimal LossRUB { set; get; }
        public decimal ResultRUB { set; get; }
        public decimal ProfitUSD { set; get; }
        public decimal LossUSD { set; get; }
        public decimal ResultUSD { set; get; }
        public decimal ProfitCNY { set; get; }
        public decimal LossCNY { set; get; }
        public decimal ResultCNY { set; get; }
        public decimal ProfitEUR { set; get; }
        public decimal LossEUR { set; get; }
        public decimal ResultEUR { set; get; }
    }
}
