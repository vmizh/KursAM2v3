using System;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using Core.Helper;
using Core.ViewModel.Base;
using DevExpress.Mvvm.DataAnnotations;
using FinanceAnalitic;
using KursAM2.Managers.Base;
using KursDomain.Documents.CommonReferences;
using KursDomain.Documents.Management;
using KursDomain.References;

namespace KursAM2.ViewModel.Management
{
    public class DataAnnotationProfitAndLossesExtendRowViewModel : DataAnnotationForFluentApiBase,
        IMetadataProvider<ProfitAndLossesExtendRowViewModel>
    {
        void IMetadataProvider<ProfitAndLossesExtendRowViewModel>.BuildMetadata(
            MetadataBuilder<ProfitAndLossesExtendRowViewModel> builder)
        {
            SetNotAutoGenerated(builder);
            builder.Property(_ => _.SDRSchet).AutoGenerated().DisplayName("Счет дох/расх").ReadOnly();
            builder.Property(_ => _.SDRState).NotAutoGenerated();
            builder.Property(_ => _.CalcType).NotAutoGenerated();
            builder.Property(_ => _.Nomenkl).NotAutoGenerated();
            builder.Property(_ => _.Currency).NotAutoGenerated();
            builder.Property(_ => _.KontragentBase).NotAutoGenerated();
            
            builder.Property(_ => _.KontragentName).AutoGenerated().DisplayName("Контрагент").ReadOnly();
            builder.Property(_ => _.DirectPaySumma).AutoGenerated().DisplayName("Оплачено").ReadOnly().DisplayFormatString("n2");
            builder.Property(_ => _.Name).LocatedAt(0).AutoGenerated().DisplayName("Наименование").ReadOnly();
            builder.Property(_ => _.DocTypeCode).NotAutoGenerated();
            builder.Property(_ => _.DocTypeName).AutoGenerated().DisplayName("Документ").ReadOnly();
            builder.Property(_ => _.DocNum).LocatedAt(1).AutoGenerated().DisplayName("№").ReadOnly();
            builder.Property(_ => _.Date).LocatedAt(2).AutoGenerated().DisplayName("Дата").ReadOnly();
            builder.Property(_ => _.CurrencyName).LocatedAt(4).AutoGenerated().DisplayName("Валюта").ReadOnly();
            builder.Property(_ => _.AktZachetResult).LocatedAt(3).AutoGenerated().DisplayFormatString("n2")
                .DisplayName("Результат").ReadOnly();
            builder.Property(_ => _.Note).AutoGenerated().DisplayName("Примечание").ReadOnly();

            builder.Property(_ => _.ProfitRUB).AutoGenerated().DisplayName("Доход").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.LossRUB).AutoGenerated().DisplayName("Расход").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.ResultRUB).AutoGenerated().DisplayName("Результат").DisplayFormatString("n2")
                .ReadOnly();

            builder.Property(_ => _.ProfitUSD).AutoGenerated().DisplayName("Доход").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.LossUSD).AutoGenerated().DisplayName("Расход").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.ResultUSD).AutoGenerated().DisplayName("Результат").DisplayFormatString("n2")
                .ReadOnly();

            builder.Property(_ => _.ProfitEUR).AutoGenerated().DisplayName("Доход").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.LossEUR).AutoGenerated().DisplayName("Расход").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.ResultEUR).AutoGenerated().DisplayName("Результат").DisplayFormatString("n2")
                .ReadOnly();

            builder.Property(_ => _.ProfitCNY).AutoGenerated().DisplayName("Доход").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.LossCNY).AutoGenerated().DisplayName("Расход").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.ResultCNY).AutoGenerated().DisplayName("Результат").DisplayFormatString("n2")
                .ReadOnly();

            builder.Property(_ => _.ProfitGBP).AutoGenerated().DisplayName("Доход").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.LossGBP).AutoGenerated().DisplayName("Расход").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.ResultGBP).AutoGenerated().DisplayName("Результат").DisplayFormatString("n2")
                .ReadOnly();

            builder.Property(_ => _.ProfitCHF).AutoGenerated().DisplayName("Доход").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.LossCHF).AutoGenerated().DisplayName("Расход").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.ResultCHF).AutoGenerated().DisplayName("Результат").DisplayFormatString("n2")
                .ReadOnly();

            builder.Property(_ => _.ProfitSEK).AutoGenerated().DisplayName("Доход").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.LossSEK).AutoGenerated().DisplayName("Расход").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.ResultSEK).AutoGenerated().DisplayName("Результат").DisplayFormatString("n2")
                .ReadOnly();

            // @formatter:off
            builder.TableLayout()
                .Group("Основные данные")
                    .ContainsProperty(_ => _.Name)
                    .ContainsProperty(_ => _.SDRSchet)
                    .ContainsProperty(_ => _.DocNum)
                    .ContainsProperty(_ => _.Date)
                    .ContainsProperty(_ => _.AktZachetResult)
                    .ContainsProperty(_ => _.CurrencyName)
                .EndGroup()
                .Group("RUB")
                    .ContainsProperty(_ => _.ProfitRUB)
                    .ContainsProperty(_ => _.LossRUB)
                    .ContainsProperty(_ => _.ResultRUB)
                .EndGroup()
                .Group("USD")
                    .ContainsProperty(_ => _.ProfitUSD)
                    .ContainsProperty(_ => _.LossUSD)
                    .ContainsProperty(_ => _.ResultUSD)
                .EndGroup()
                .Group("EUR")
                    .ContainsProperty(_ => _.ProfitEUR)
                    .ContainsProperty(_ => _.LossEUR)
                    .ContainsProperty(_ => _.ResultEUR)
                .EndGroup()
                .Group("CNY")
                    .ContainsProperty(_ => _.ProfitCNY)
                    .ContainsProperty(_ => _.LossCNY)
                    .ContainsProperty(_ => _.ResultCNY)
                .EndGroup()
                .Group("GBP")
                    .ContainsProperty(_ => _.ProfitGBP)
                    .ContainsProperty(_ => _.LossGBP)
                    .ContainsProperty(_ => _.ResultGBP)
                .EndGroup()
                .Group("CHF")
                    .ContainsProperty(_ => _.ProfitCHF)
                    .ContainsProperty(_ => _.LossCHF)
                    .ContainsProperty(_ => _.ResultCHF)
                .EndGroup()
                .Group("SEK")
                    .ContainsProperty(_ => _.ProfitSEK)
                    .ContainsProperty(_ => _.LossSEK)
                    .ContainsProperty(_ => _.ResultSEK)
                .EndGroup()
                .Group("Примечание")
                    .ContainsProperty(_ => _.Note)
                .EndGroup();
            // @formatter:on
        }
    }
    [MetadataType(typeof(DataAnnotationProfitAndLossesExtendRowViewModel))]
    public class ProfitAndLossesExtendRowViewModel : RSViewModelBase, IProfitAndLossesBase
    {
        public DocumentType DocTypeCode { set; get; }
        public string DocTypeName => DocTypeCode.GetDisplayName();
        public string KontragentName { get; set; }
        public decimal? AktZachetResult { set; get; }

        public decimal DirectPaySumma { set; get; }

        public SDRSchet SDRSchet { set; get; }
        public SDRState SDRState { set; get; }
        public string AktZachet { set; get; }

        public ObservableCollection<VzaimozachetRow> VzaimozachetInfo { set; get; } =
            new ObservableCollection<VzaimozachetRow>();

        public decimal? DocumentDC { set; get; }
        public decimal ProfitGBP { get; set; }
        public decimal LossGBP { get; set; }
        public decimal ResultGBP { get; set; }
        public decimal ProfitCHF { get; set; }
        public decimal LossCHF { get; set; }
        public decimal ResultCHF { get; set; }
        public decimal ProfitSEK { get; set; }
        public decimal LossSEK { get; set; }
        public decimal ResultSEK { get; set; }

        public TypeProfitAndLossCalc CalcType { get; set; }
        public Guid GroupId { set; get; }
        public decimal Quantity { set; get; }
        public decimal Price { set; get; }
        public string CurrencyName { set; get; }
        public Currency Currency { get; set; }
        public decimal ProfitRUB { set; get; }
        public decimal LossRUB { set; get; }
        public decimal ResultRUB { set; get; }
        public decimal ProfitUSD { set; get; }
        public decimal LossUSD { set; get; }
        public decimal ResultUSD { set; get; }
        public decimal ProfitEUR { set; get; }
        public decimal LossEUR { set; get; }
        public decimal ResultEUR { set; get; }
        public decimal ProfitOther { get; set; }
        public decimal LossOther { get; set; }
        public decimal ResultOther { get; set; }
        public decimal ProfitCNY { get; set; }
        public decimal LossCNY { get; set; }
        public decimal ResultCNY { get; set; }
        public Nomenkl Nomenkl { set; get; }
        public Kontragent KontragentBase { get; set; }
        public string Kontragent { set; get; }
        public DateTime Docdate { set; get; }
        public DateTime Date { set; get; }
        public DateTime RowDate { set; get; }
        public string DocNum { set; get; }

        public static ProfitAndLossesExtendRowViewModel GetCopy(ProfitAndLossesExtendRowViewModel d)
        {
            var ret = new ProfitAndLossesExtendRowViewModel
            {
                DocTypeCode = d.DocTypeCode,
                KontragentName = d.KontragentName,
                AktZachetResult = d.AktZachetResult,
                ProfitGBP = d.ProfitGBP,
                LossGBP = d.LossGBP,
                ResultGBP = d.ResultGBP,
                ProfitCHF = d.ProfitCHF,
                LossCHF = d.LossCHF,
                ResultCHF = d.ResultCHF,
                ProfitSEK = d.ProfitSEK,
                LossSEK = d.LossSEK,
                ResultSEK = d.ResultSEK,
                SDRSchet = d.SDRSchet,
                SDRState = d.SDRState,
                AktZachet = d.AktZachet,
                CalcType = d.CalcType,
                GroupId = d.GroupId,
                Quantity = d.Quantity,
                Price = d.Price,
                CurrencyName = d.CurrencyName,
                Currency = d.Currency,
                ProfitRUB = d.ProfitRUB,
                LossRUB = d.LossRUB,
                ResultRUB = d.ResultRUB,
                ProfitUSD = d.ProfitUSD,
                LossUSD = d.LossUSD,
                ResultUSD = d.ResultUSD,
                ProfitEUR = d.ProfitEUR,
                LossEUR = d.LossEUR,
                ResultEUR = d.ResultEUR,
                ProfitCNY = d.ProfitCNY,
                LossCNY = d.LossCNY,
                ResultCNY = d.ResultCNY,
                ProfitOther = d.ProfitOther,
                LossOther = d.LossOther,
                ResultOther = d.ResultOther,
                Nomenkl = d.Nomenkl,
                KontragentBase = d.KontragentBase,
                Kontragent = d.Kontragent,
                Docdate = d.Docdate,
                Date = d.Date,
                RowDate = d.RowDate,
                DocNum = d.DocNum,
                Id = d.Id,
                DocCode = d.DocCode
            };
            if (d.VzaimozachetInfo != null && d.VzaimozachetInfo.Count > 0)
                ret.VzaimozachetInfo = new ObservableCollection<VzaimozachetRow>(d.VzaimozachetInfo);
            return ret;
        }
    }
}
