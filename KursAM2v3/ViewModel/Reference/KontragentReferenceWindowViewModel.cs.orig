using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Windows;
using System.Windows.Input;
using Core;
using Core.EntityViewModel;
using Core.Menu;
using Core.ViewModel.Base;
using Core.ViewModel.Common;
using Core.WindowsManager;
using KursAM2.View.KursReferences.KontragentControls;

namespace KursAM2.ViewModel.Reference
{
    public class KontragentReferenceWindowViewModel : RSWindowViewModelBase
    {
        private KontragentGroup myCurrentGroup;

        private Kontragent myCurrentKontragent;

        public KontragentReferenceWindowViewModel()
        {

            LeftMenuBar = MenuGenerator.BaseLeftBar(this);
            RightMenuBar = MenuGenerator.RightBarOfKontragentReferens(this);
            KontragentsInGroup = new ObservableCollection<Kontragent>();
            Groups = new ObservableCollection<KontragentGroup>();
            // ReSharper disable once VirtualMemberCallInConstructor
            RefreshData(null);
        }

        //public List<Kontragent> Kontragents => MainReferences.AllKontragents.Values.ToList();
        public ObservableCollection<Kontragent> Kontragents { set; get; } = new ObservableCollection<Kontragent>();
        public ObservableCollection<Kontragent> KontragentsInGroup { set; get; }
        public ObservableCollection<KontragentGroup> Groups { set; get; }

        public Kontragent CurrentKontragent
        {
            get => myCurrentKontragent;
            set
            {
                if (myCurrentKontragent == value) return;
                myCurrentKontragent = value;
                RaisePropertyChanged();
            }
        }

        public KontragentGroup CurrentGroup
        {
            get => myCurrentGroup;
            set
            {
                if (myCurrentGroup == value) return;
                myCurrentGroup = value;
                
                CurrentKontragent = null;
                if (myCurrentGroup != null)
                    SetKontragentsInGroup();
                RaisePropertyChanged();
                RaisePropertyChanged(nameof(IsNewEnabled));
            }
        }

        public bool IsNewEnabled
        {
            get
            {
                return myCurrentGroup != null && Groups.FirstOrDefault(_ => _.EG_PARENT_ID == myCurrentGroup.EG_ID) == null;
            }
        }

        private void SetKontragentsInGroup()
        {
            try
            {
                if (CurrentGroup.EG_ID == -1) return;
                KontragentsInGroup.Clear();
                using (var ctx = GlobalOptions.GetEntities())
                {
                    var data =
                        ctx.SD_43.AsNoTracking().Where(_ => _.EG_ID == CurrentGroup.EG_ID).ToList();
                    foreach (var i in data)
                    {
                        if (i.DELETED == 1) continue;
                        KontragentsInGroup.Add(new Kontragent(i));
                    }

                    if (CurrentGroup.EG_ID == 0)
                    {
                        var data2 =
                            ctx.SD_43.AsNoTracking().Where(_ => _.EG_ID == null).ToList();
                        foreach (var k in data2)
                        {
                            if (k.DELETED == 1) continue;
                            KontragentsInGroup.Add(new Kontragent(k));
                        }
                        RaisePropertyChanged(nameof(KontragentsInGroup));
                    }
                    RaisePropertyChanged(nameof(KontragentsInGroup));
                }
            }
            catch (Exception e)
            {
               WindowManager.ShowError(e);
            }
            
        }

        public void GetAllKontragent()
        {
            try
            {
                using (var ctx = GlobalOptions.GetEntities())
                {
                    var data =
                        ctx.SD_43.AsNoTracking().Where(_ => _.DELETED != 1).ToList();
                    foreach (var i in data)
                    {
                        KontragentsInGroup.Add(new Kontragent(i));
                    }
                }

            }
            catch (Exception e)
            {
                WindowManager.ShowError(e);
            }

        }

        public override void RefreshData(object data)
        {
            Groups = new ObservableCollection<KontragentGroup>();
            Groups.Add(new KontragentGroup { EG_ID = 0, EG_PARENT_ID = null, EG_NAME = "Все группы"});
            foreach (var item in GlobalOptions.GetEntities().UD_43.Where(_ => (_.EG_DELETED ?? 0) != 1))
            {
                Groups.Add(new KontragentGroup(item));
            }
            RaisePropertyChanged(nameof(Groups));
        }
        #region Commands
        public override bool IsDocumentOpenAllow => CurrentKontragent != null;
        public override bool IsCanDocNew => CurrentGroup != null;
        public override bool IsDocNewCopyAllow => CurrentKontragent != null;
        public override bool IsDocDeleteAllow => CurrentKontragent != null;
        public override void DocumentOpen(object obj)
        {
            var form = new KontragentCardView {Owner = Application.Current.MainWindow};
            var ctx = new KontragentCardWindowViewModel(CurrentKontragent.DocCode) {Window = form};
            form.DataContext = ctx;
            form.ShowDialog();
            SetKontragentsInGroup();
        }
        public override void DocNewEmpty(object obj)
        {
            var form = new KontragentCardView { Owner = Application.Current.MainWindow };
            var ctx = new KontragentCardWindowViewModel(-1, CurrentGroup.EG_ID, false) { Window = form };
            form.DataContext = ctx;
            form.ShowDialog();
            SetKontragentsInGroup();
        }

        public override void DocNewCopy(object obj)
        {
            var form = new KontragentCardView {Owner = Application.Current.MainWindow};
            var ctx = new KontragentCardWindowViewModel(CurrentKontragent.DocCode, CurrentGroup.EG_ID, true) { Window = form };
            form.DataContext = ctx;
            form.ShowDialog();
            SetKontragentsInGroup();
        }

        public ICommand NewCopyKontragentCommand
        {
            get { return new Command(NewCopyKontragent, _ => CurrentKontragent != null); }
        }
        public ICommand GroupAddCommand
        {
            get { return new Command(GroupAdd, param => CurrentGroup.EG_ID>=0); }
        }
        public ICommand GroupDeleteCommand
        {
            get { return new Command(GroupDelete, param => CurrentGroup != null 
                                                           && KontragentsInGroup.Count < 1
                                                           && Groups.All(_=>_.EG_PARENT_ID == CurrentGroup.EG_ID));}
        }

        public ICommand DocumentOpenMenuCommand
        {
            get
            {
                return new Command(DocumentOpen, param => CurrentKontragent != null);
            }
        }

        private void GroupDelete(object obj)
        {
            using (var ctx = GlobalOptions.GetEntities())
            {
                var firstOrDefault = ctx.UD_43.FirstOrDefault(_ => _.EG_ID == CurrentGroup.EG_ID);
                if (firstOrDefault != null )
                    firstOrDefault.EG_DELETED = 1;
                Groups.Remove(CurrentGroup);
               ctx.SaveChanges();
            }
        }

        private void GroupAdd(object obj)
        {
            KontragentGroup item = new KontragentGroup
            {
                EG_PARENT_ID = CurrentGroup.EG_ID,
                Id = Guid.NewGuid(),
                EG_ID = -1
            };
            Groups.Add(item);
            CurrentGroup = Groups.FirstOrDefault(_ => _.Id == item.Id);
        }

        public override void DocDelete(object form)
        {
            var res = MessageBox.Show("Вы уверены, что хотите удалить документ?", "Запрос",
                MessageBoxButton.YesNo,
                MessageBoxImage.Question);
            switch (res)
            {
                case MessageBoxResult.Yes:
                    using (var ctx = GlobalOptions.GetEntities() )
                    {
                        var firstOrDefault = ctx.SD_43.FirstOrDefault(_ => _.DOC_CODE == CurrentKontragent.DOC_CODE);
                        if (firstOrDefault != null)
                            firstOrDefault.DELETED = 1;
                        ctx.SaveChanges();
                        var orDefault = MainReferences.AllKontragents.Values
                            .FirstOrDefault(_ => _.DOC_CODE == CurrentKontragent.DOC_CODE);
                        if (orDefault != null)
                            orDefault
                                .DELETED = 1;
                        KontragentsInGroup.Remove(CurrentKontragent);
                        RaisePropertiesChanged(nameof(KontragentsInGroup));
                    }
                    CloseWindow(null);
                    break;
                case MessageBoxResult.No:
                    return;
            }
        }
        private void NewCopyKontragent(object obj)
        {
            WindowManager.ShowFunctionNotReleased();
        }
        #endregion
    }
}