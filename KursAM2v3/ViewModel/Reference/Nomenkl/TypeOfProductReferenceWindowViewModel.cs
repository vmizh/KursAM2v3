using System;
using System.Collections.ObjectModel;
using System.Data.Entity;
using System.Linq;
using System.Windows.Input;
using Core.ViewModel.Base;
using Core.WindowsManager;
using Data;
using DevExpress.Xpf.Core;
using DevExpress.Xpf.Editors.Settings;
using DevExpress.Xpf.Grid;
using KursAM2.Managers.Nomenkl;
using KursAM2.View.Base;
using KursDomain;
using KursDomain.Documents.Vzaimozachet;
using KursDomain.ICommon;
using KursDomain.Menu;
using KursDomain.References;

namespace KursAM2.ViewModel.Reference.Nomenkl
{
    public class TypeOfProductReferenceWindowViewModel : RSWindowViewModelBase, IOnAutoGeneratingColumn
    {
        #region Fields

        private readonly NomenklProductTypeManager NomenklProductTypeManager = new NomenklProductTypeManager();

        #endregion

        #region Constructors

        public TypeOfProductReferenceWindowViewModel()
        {
            WindowName = "Справочник типов продукции";
            LeftMenuBar = MenuGenerator.BaseLeftBar(this);
            RightMenuBar = MenuGenerator.ReferenceRightBar(this);
            // ReSharper disable once VirtualMemberCallInConstructor
            RefreshData(null);
        }

        #endregion

        public void OnAutoGeneratingColumn(DXWindow form, AutoGeneratingColumnEventArgs e)
        {
            switch (e.Column.Name)
            {
                case "SHPZ":
                    e.Column.EditSettings = new ComboBoxEditSettings
                    {
                        ItemsSource = GlobalOptions.ReferencesCache.GetSDRSchetAll().Cast<SDRSchet>()
                            .OrderBy(_ => _.Name).ToList(),
                        DisplayMember = "Name",
                        AutoComplete = true
                    };
                    break;
            }

            //throw new NotImplementedException();
        }

        public void OnAutoGeneratedColumns(DXWindow form)
        {
            //throw new NotImplementedException();
        }

        #region Properties

        public ObservableCollection<VzaimoraschetType> Rows { set; get; } =
            new ObservableCollection<VzaimoraschetType>();

        public ObservableCollection<VzaimoraschetType> DeletedRows { set; get; } =
            new ObservableCollection<VzaimoraschetType>();

        public ObservableCollection<VzaimoraschetType> SelectedRows { set; get; } =
            new ObservableCollection<VzaimoraschetType>();

        private VzaimoraschetType myCurrentRow;

        public VzaimoraschetType CurrentRow
        {
            get => myCurrentRow;
            set
            {
                if (Equals(myCurrentRow, value)) return;
                myCurrentRow = value;
                RaisePropertyChanged();
            }
        }

        #endregion

        #region Commands

        public override void SaveData(object data)
        {
            using (var ctx = GlobalOptions.GetEntities())
            {
                using (var tn = ctx.Database.BeginTransaction())
                {
                    try
                    {
                        foreach (var d in DeletedRows)
                        {
                            var old = ctx.SD_77.FirstOrDefault(_ => _.DOC_CODE == d.DOC_CODE);
                            {
                                if (old != null)
                                    ctx.SD_77.Remove(old);
                            }
                        }

                        var newDC = ctx.SD_77.Any() ? ctx.SD_77.Max(_ => _.DOC_CODE) : 10770000001;
                        foreach (var u in Rows)
                            switch (u.State)
                            {
                                case RowStatus.NewRow:
                                    newDC++;
                                    var sd77 = new SD_77
                                    {
                                        DOC_CODE = newDC,
                                        TV_NAME = u.TV_NAME,
                                        TV_TYPE = u.TV_TYPE,
                                        TV_SHPZ_DC = u.TV_SHPZ_DC
                                    };
                                    ctx.SD_77.Add(sd77);
                                    break;
                                case RowStatus.Edited:
                                    var old1 = ctx.SD_77.FirstOrDefault(_ => _.DOC_CODE == u.DocCode);
                                    if (old1 != null)
                                    {
                                        old1.TV_NAME = u.TV_NAME;
                                        old1.TV_TYPE = u.TV_TYPE;
                                        old1.TV_SHPZ_DC = u.TV_SHPZ_DC;
                                    }

                                    break;
                            }

                        ctx.SaveChanges();
                        tn.Commit();
                        DeletedRows.Clear();
                        RefreshData(null);
                    }
                    catch (Exception ex)
                    {
                        tn.Rollback();
                        WindowManager.ShowError(ex);
                    }
                }
            }
        }

        public ICommand ItemNewEmptyCommand
        {
            get { return new Command(ItemNewEmpty, _ => true); }
        }

        private void ItemNewEmpty(object obj)
        {
            Rows.Add(new VzaimoraschetType
            {
                State = RowStatus.NewRow
            });
        }

        public override void RefreshData(object obj)
        {
            Rows.Clear();
            using (var ctx = GlobalOptions.GetEntities())
            {
                foreach (var u in ctx.SD_77.Include(_ => _.SD_303))
                {
                    var newDoc = new VzaimoraschetType(u) { myState = RowStatus.NotEdited };
                    Rows.Add(newDoc);
                }
            }
        }

        public override bool IsCanSaveData =>
            (Rows != null && Rows.Any(_ => _.State != RowStatus.NotEdited)) || DeletedRows.Count > 0;

        //    ItemNewCopyCommand
        //}" />
        //</MenuItem>
        //<Separator />
        //<MenuItem Header = "Удалить выделенные строки" Command="{Binding ItemsDeleteCommand}"
        public ICommand ItemNewCopyCommand
        {
            get { return new Command(ItemNewCopy, _ => CurrentRow != null); }
        }

        private void ItemNewCopy(object obj)
        {
            Rows.Add(new VzaimoraschetType
                {
                    DOC_CODE = -1,
                    State = RowStatus.NewRow,
                    TV_TYPE = CurrentRow?.TV_TYPE,
                    TV_SHPZ_DC = CurrentRow?.TV_SHPZ_DC
                }
            );
        }

        public ICommand ItemsDeleteCommand
        {
            get { return new Command(ItemsDelete, _ => CurrentRow != null || SelectedRows.Count > 0); }
        }

        private void ItemsDelete(object obj)
        {
            foreach (var row in SelectedRows)
            {
                row.State = RowStatus.Deleted;
                DeletedRows.Add(row);
            }

            foreach (var row in DeletedRows) Rows.Remove(row);
        }

        #endregion
    }
}
