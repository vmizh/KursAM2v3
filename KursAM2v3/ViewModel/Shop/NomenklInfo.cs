using System.ComponentModel.DataAnnotations;
using Core.EntityViewModel.NomenklManagement;
using Core.Helper;
using Core.ViewModel.Base;
using DevExpress.Mvvm.DataAnnotations;

namespace KursAM2.ViewModel.Shop
{
    [MetadataType(typeof(DataAnnotationsNomenklInfo))]
    public class NomenklInfo : RSViewModelBase
    {
        private bool myIsInDataBase;

        public bool IsInDataBase
        {
            get => myIsInDataBase;
            set
            {
                if (myIsInDataBase == value) return;
                myIsInDataBase = value;
                RaisePropertyChanged();
            }
        }

        public string NomenklNumber { set; get; }
        public string FullName { set; get; }
        public bool IsUsluga { set; get; } = false;
        public bool IsNakladExpense { set; get; } = false;
        public bool IsComplex { set; get; } = false;
        public bool IsDelete { set; get; } = false;
        public bool IsRentabelnost { set; get; } = false;
        public bool IsCurrencyTransfer { set; get; } = false;
        public NomenklGroup Category { set; get; }
        public Unit Unit { set; get; }
        public NomenklProductType NomType { set; get; }
        public decimal Count { set; get; }
        public decimal Price { set; get; }
        public decimal Summa => Count * Price;
    }

    public class DataAnnotationsNomenklInfo : DataAnnotationForFluentApiBase, IMetadataProvider<NomenklInfo>
    {
        void IMetadataProvider<NomenklInfo>.BuildMetadata(MetadataBuilder<NomenklInfo> builder)
        {
            SetNotAutoGenerated(builder);
            builder.Property(_ => _.Name).AutoGenerated().DisplayName("Наименование");
            builder.Property(_ => _.Count).AutoGenerated().DisplayName("Кол-во").ReadOnly().DisplayFormatString("n4");
            builder.Property(_ => _.Price).AutoGenerated().DisplayName("Цена").ReadOnly().DisplayFormatString("n2");
            builder.Property(_ => _.Summa).AutoGenerated().DisplayName("Сумма").ReadOnly().DisplayFormatString("n2");
            builder.Property(_ => _.IsInDataBase).AutoGenerated().DisplayName("Сохранен в БД").ReadOnly();
            builder.Property(_ => _.NomenklNumber).AutoGenerated().DisplayName("Ном.№").ReadOnly();
            builder.Property(_ => _.FullName).AutoGenerated().DisplayName("Полное наименование");
            builder.Property(_ => _.Note).AutoGenerated().DisplayName("Примечания");
            builder.Property(_ => _.Unit).AutoGenerated().DisplayName("Ед.изм.").ReadOnly();
            builder.Property(_ => _.Category).AutoGenerated().DisplayName("Категория").ReadOnly();
            builder.Property(_ => _.NomType).AutoGenerated().DisplayName("Тип продукции").ReadOnly();
            builder.Property(_ => _.IsUsluga).AutoGenerated().DisplayName("Услуга").ReadOnly();
            builder.Property(_ => _.IsNakladExpense).AutoGenerated().DisplayName("Накл.расх.").ReadOnly();
            builder.Property(_ => _.IsComplex).NotAutoGenerated().DisplayName("Комплект").ReadOnly();
            builder.Property(_ => _.IsRentabelnost).NotAutoGenerated().DisplayName("Рентабельность").ReadOnly();
            builder.Property(_ => _.IsCurrencyTransfer).NotAutoGenerated().DisplayName("Рентабельность").ReadOnly();
        }
    }
}