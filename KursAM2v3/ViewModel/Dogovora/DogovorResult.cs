using System.ComponentModel.DataAnnotations;
using Core.EntityViewModel;
using Core.EntityViewModel.NomenklManagement;
using Core.Invoices.EntityViewModel;
using Core.Helper;
using Core.ViewModel.Base;
using DevExpress.Mvvm.DataAnnotations;

namespace KursAM2.ViewModel.Dogovora
{
    public class DogovorResult_FluentAPI : DataAnnotationForFluentApiBase,
        IMetadataProvider<DogovorResult>
    {
        void IMetadataProvider<DogovorResult>.BuildMetadata(
            MetadataBuilder<DogovorResult> builder)
        {
            SetNotAutoGenerated(builder);
            builder.Property(_ => _.Cost).AutoGenerated().DisplayName("Ceбестоимость").DisplayFormatString("n2")
                .ReadOnly();
            builder.Property(_ => _.CostWithNaklad).AutoGenerated().DisplayName("Ceбест.(с накл.)")
                .DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.DogPrice).AutoGenerated().DisplayName("Цена(дог)").DisplayFormatString("n2")
                .ReadOnly();
            builder.Property(_ => _.DogSumma).AutoGenerated().DisplayName("Сумма(дог)").DisplayFormatString("n2")
                .ReadOnly();
            builder.Property(_ => _.Nomenkl).AutoGenerated().DisplayName("Номенклатура").ReadOnly();
            builder.Property(_ => _.NumenklNumber).AutoGenerated().DisplayName("Ном №").ReadOnly();
            builder.Property(_ => _.PriceFact).AutoGenerated().DisplayName("Цена(факт)").DisplayFormatString("n2")
                .ReadOnly();
            builder.Property(_ => _.QuantityDog).AutoGenerated().DisplayName("Кол-во(дог)").DisplayFormatString("n2")
                .ReadOnly();
            builder.Property(_ => _.QuantityFact).AutoGenerated().DisplayName("Кол-во(факт)").DisplayFormatString("n2")
                .ReadOnly();
            builder.Property(_ => _.SummaFact).AutoGenerated().DisplayName("Сумма(факт)").DisplayFormatString("n2")
                .ReadOnly();
            builder.Property(_ => _.Unit).AutoGenerated().DisplayName("Ед.изм.").ReadOnly();
            builder.Property(_ => _.Result).AutoGenerated().DisplayName("Результат").DisplayFormatString("n2")
                .ReadOnly();
            builder.Property(_ => _.ResultWithNaklad).AutoGenerated().DisplayName("Результат(накл)")
                .DisplayFormatString("n2").ReadOnly();
        }
    }

    /// <summary>
    ///     Результат по договору
    /// </summary>
    [MetadataType(typeof(DogovorResult_FluentAPI))]
    public class DogovorResult : RSViewModelBase
    {
        private decimal myCost;
        private decimal myCostWithNaklad;
        private decimal myDogPrice;
        private decimal myDogSumma;
        private Nomenkl myNomenkl;
        private decimal myPriceFact;
        private decimal myQuantityDog;
        private decimal myQuantityFact;
        private decimal mySummaFact;

        public Nomenkl Nomenkl
        {
            get => myNomenkl;
            set
            {
                if (myNomenkl == value) return;
                myNomenkl = value;
                RaisePropertyChanged();
            }
        }

        public string NumenklNumber => Nomenkl?.NomenklNumber;

        public Unit Unit => Nomenkl?.Unit;

        public decimal QuantityDog
        {
            get => myQuantityDog;
            set
            {
                if (myQuantityDog == value) return;
                myQuantityDog = value;
                RaisePropertyChanged();
            }
        }

        public decimal DogPrice
        {
            get => myDogPrice;
            set
            {
                if (myDogPrice == value) return;
                myDogPrice = value;
                RaisePropertyChanged();
            }
        }

        public decimal DogSumma
        {
            get => myDogSumma;
            set
            {
                if (myDogSumma == value) return;
                myDogSumma = value;
                RaisePropertyChanged();
            }
        }

        public decimal QuantityFact
        {
            get => myQuantityFact;
            set
            {
                if (myQuantityFact == value) return;
                myQuantityFact = value;
                RaisePropertyChanged();
            }
        }

        public decimal PriceFact
        {
            get => myPriceFact;
            set
            {
                if (myPriceFact == value) return;
                myPriceFact = value;
                RaisePropertyChanged();
            }
        }

        public decimal SummaFact
        {
            get => mySummaFact;
            set
            {
                if (mySummaFact == value) return;
                mySummaFact = value;
                RaisePropertyChanged();
            }
        }

        /// <summary>
        ///     Себестоимость
        /// </summary>
        public decimal Cost
        {
            get => myCost;
            set
            {
                if (myCost == value) return;
                myCost = value;
                RaisePropertyChanged();
            }
        }

        /// <summary>
        ///     Себестоимость с наклад
        /// </summary>
        public decimal CostWithNaklad
        {
            get => myCostWithNaklad;
            set
            {
                if (myCostWithNaklad == value) return;
                myCostWithNaklad = value;
                RaisePropertyChanged();
            }
        }

        public decimal Result => SummaFact - Cost * QuantityFact;
        public decimal ResultWithNaklad => SummaFact - CostWithNaklad * QuantityFact;
    }
}