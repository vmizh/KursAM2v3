using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Windows.Input;
using Calculates.Materials;
using Core;
using Core.EntityViewModel;
using Core.Menu;
using Core.ViewModel.Base;
using Core.ViewModel.Common;
using Core.WindowsManager;

namespace KursAM2.ViewModel.Logistiks
{
    public class NomenklCostCalculatorWindowViewModel : RSWindowViewModelBase
    {
        private NomenklCalcCostOperation myCurrentOperation;
        private NomenklCost myNomenklCost;

        private NomenklViewModel mySelectedNomenkl;
        //private WindowManager WindowManager = new WindowManager();

        public NomenklCostCalculatorWindowViewModel()
        {
            LeftMenuBar = MenuGenerator.BaseLeftBar(this);
            RightMenuBar = MenuGenerator.ExitOnlyRightBar(this);
        }

        public List<NomenklViewModel> Nomenkls => MainReferences.ALLNomenkls.Values.Where(_ => _.IsUsluga == false).ToList();

        public NomenklViewModel SelectedNomenkl
        {
            get => mySelectedNomenkl;
            set
            {
                if (mySelectedNomenkl == value) return;
                SkladOstatki.Clear();
                RaisePropertyChanged(nameof(SkladOstatki));
                mySelectedNomenkl = value;
                if (mySelectedNomenkl != null)
                {
                    var clc = new NomenklCostMediumSliding();
                    myNomenklCost = new NomenklCost
                    {
                        NomenklViewModel = mySelectedNomenkl,
                        Operations = clc.GetOperations(mySelectedNomenkl.DocCode)
                    };
                }
                RaisePropertyChanged();
                RaisePropertyChanged(nameof(Operations));
            }
        }

        public NomenklCost NomenklCost
        {
            get => myNomenklCost;
            set
            {
                if (myNomenklCost == value) return;
                myNomenklCost = value;
                RaisePropertyChanged();
            }
        }

        public ObservableCollection<NomenklCalcCostOperation> Operations => NomenklCost?.Operations;

        public ICommand FinanceDocumentOpenCommand
        {
            get { return new Command(FinanceDocumentOpen, param => CurrentOperation.FinDocumentDC != null); }
        }

        public string FinanceDocumentName
        {
            get
            {
                if (CurrentOperation?.FinDocumentDC == null) return null;
                switch (CurrentOperation.OperCode)
                {
                    case 1:
                        return $"Открыть счет/фактура поставщика";
                    case 2:
                        return $"Открыть счет/фактура клиенту";
                    case 5:
                        return $"Открыть инвентаризационную ведомость";
                    case 12:
                        return $"Открыть счет/фактура клиенту";
                    case 18:
                        return $"Открыть Продажа за наличный расчет";
                }
                return "Финансовый документ отсутствует";
            }
        }

        public string TovarDocumentName
        {
            get
            {
                if (CurrentOperation.TovarDocument == null) return null;
                switch (CurrentOperation.OperCode)
                {
                    case 1:
                        return $"Открыть приходный складской ордер";
                    case 2:
                        return $"Открыть расходный складской ордер";
                    case 5:
                        return $"Открыть инвентаризационную ведомость";
                    case 12:
                        return $"Открыть расходную накладную";
                    case 18:
                        return $"Открыть Продажа за наличный расчет";
                }
                return "Товарный документ отсутствует";
            }
        }

        public NomenklCalcCostOperation CurrentOperation
        {
            get => myCurrentOperation;
            set
            {
                if (myCurrentOperation == value) return;
                myCurrentOperation = value;
                if (myCurrentOperation != null)
                    CalcOstatki(myCurrentOperation);
                RaisePropertyChanged();
                RaisePropertyChanged(nameof(SkladOstatki));
                RaisePropertyChanged(nameof(FinanceDocumentName));
                RaisePropertyChanged(nameof(TovarDocumentName));
            }
        }

        public ObservableCollection<NomenklOstatkiWithPrice> SkladOstatki { set; get; } =
            new ObservableCollection<NomenklOstatkiWithPrice>();


        private void CalcOstatki(NomenklCalcCostOperation op)
        {
            SkladOstatki.Clear();
            var skladsIn =
                Operations.Where(_ => _.DocDate <= op.DocDate)
                    .Select(_ => _.SkladInName)
                    .Where(_ => _ != null)
                    .ToList();
            var skladsOut =
                Operations.Where(_ => _.DocDate <= op.DocDate)
                    .Select(_ => _.SkladOutName)
                    .Where(_ => _ != null)
                    .ToList();
            var sklads = skladsIn.Concat(skladsOut).Distinct().ToList();
            var prcRow = Operations.Where(_ => _.DocDate <= op.DocDate).Max(_ => _.RowNumber);
            var prc = Operations.Single(_ => _.RowNumber == prcRow);
            foreach (var s in sklads)
            {
                var q =
                    Operations.Where(_ => _.SkladInName == s && _.DocDate <= op.DocDate)
                        .Sum(_ => _.QuantityIn) -
                    Operations.Where(_ => _.SkladOutName == s && _.DocDate <= op.DocDate)
                        .Sum(_ => _.QuantityOut);
                var newSklad = new NomenklOstatkiWithPrice
                {
                    Quantity = q,
                    StoreName = s,
                    PriceWONaklad = prc.CalcPrice,
                    Price = prc.CalcPriceNaklad,
                    SummaWONaklad = prc.CalcPrice * q,
                    Summa = prc.CalcPriceNaklad * q
                };
                if (newSklad.Quantity != 0)
                    SkladOstatki.Add(newSklad);
            }
            RaisePropertyChanged(nameof(SkladOstatki));
        }

        private void FinanceDocumentOpen(object obj)
        {
            switch (CurrentOperation.OperCode)
            {
                case 1:
                    WindowManager.ShowFunctionNotReleased();
                    //return $"Открыть счет/фактура поставщика";
                    break;
                case 2:
                    WindowManager.ShowFunctionNotReleased();
                    //return $"Открыть счет/фактура клиенту";
                    break;
                case 5:
                    WindowManager.ShowFunctionNotReleased();
                    //return $"Открыть инвентаризационную ведомость";
                    break;
                case 12:
                    WindowManager.ShowFunctionNotReleased();
                    //return $"Открыть счет/фактура клиенту";
                    break;
                case 18:
                    WindowManager.ShowFunctionNotReleased();
                    //return $"Открыть Продажа за наличный расчет";
                    break;
            }
        }
    }
}