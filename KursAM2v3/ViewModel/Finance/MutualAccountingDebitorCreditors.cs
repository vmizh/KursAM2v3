using System.ComponentModel.DataAnnotations;
using Core.Helper;
using DevExpress.Mvvm.DataAnnotations;
using KursDomain.Documents.Vzaimozachet;

namespace KursAM2.ViewModel.Finance
{
    public class MutualAccountingDebitorCreditors
    {
        public class DataAnnotationsMutualAccountingDebitorViewModel : DataAnnotationForFluentApiBase,
            IMetadataProvider<MutualAccountingDebitorViewModel>
        {
            void IMetadataProvider<MutualAccountingDebitorViewModel>.BuildMetadata(
                MetadataBuilder<MutualAccountingDebitorViewModel> builder)
            {
                SetNotAutoGenerated(builder);
                builder.Property(_ => _.SFProvider).NotAutoGenerated(); 
                builder.Property(_ => _.Currency).NotAutoGenerated();
                builder.Property(_ => _.VZT_DOC_NUM).AutoGenerated().DisplayName("Номер").LocatedAt(2);
                builder.Property(_ => _.VZT_DOC_DATE).AutoGenerated().DisplayName("Дата").LocatedAt(1);
                builder.Property(_ => _.VZT_DOC_NOTES).AutoGenerated().DisplayName("Документ").LocatedAt(4);
                builder.Property(_ => _.Kontragent).AutoGenerated().DisplayName("Контрагент").ReadOnly().LocatedAt(3);
                builder.Property(_ => _.VZT_CRS_SUMMA).AutoGenerated().DisplayName("Сумма документа").DisplayFormatString("n2").LocatedAt(5);
                builder.Property(_ => _.KontragentCurrency).AutoGenerated().DisplayName("Валюта").LocatedAt(6);
                builder.Property(_ => _.SfClient).AutoGenerated().DisplayName("Счет фактура").ReadOnly().LocatedAt(7);
                builder.Property(_ => _.VzaimoraschType).AutoGenerated().DisplayName("Тип продукции").LocatedAt(9);
                builder.Property(_ => _.SHPZ).AutoGenerated().DisplayName("Счет дох/расх").LocatedAt(8);
            }
        }

        [MetadataType(typeof(DataAnnotationsMutualAccountingDebitorViewModel))]
        public class MutualAccountingDebitorViewModel : TD_110ViewModel //, IEquatable<MutualAccountingDebitorViewModel>
        {
            public MutualAccountingDebitorViewModel(TD_110ViewModel vm) : base(vm.Entity)
            {
            }

            public MutualAccountingDebitorViewModel()
            {
            }
        }

        public class DataAnnotationsMutualAccountingCredtorViewModel : DataAnnotationForFluentApiBase,
            IMetadataProvider<MutualAccountingCreditorViewModel>
        {
            void IMetadataProvider<MutualAccountingCreditorViewModel>.BuildMetadata(
                MetadataBuilder<MutualAccountingCreditorViewModel> builder)
            {
                SetNotAutoGenerated(builder);
                builder.Property(_ => _.SfClient).NotAutoGenerated();
                builder.Property(_ => _.Currency).NotAutoGenerated();
                builder.Property(_ => _.VZT_DOC_NUM).AutoGenerated().DisplayName("Номер").LocatedAt(2);
                builder.Property(_ => _.VZT_DOC_DATE).AutoGenerated().DisplayName("Дата").LocatedAt(1);
                builder.Property(_ => _.VZT_DOC_NOTES).AutoGenerated().DisplayName("Документ").LocatedAt(4);
                builder.Property(_ => _.Kontragent).AutoGenerated().DisplayName("Контрагент").ReadOnly().LocatedAt(3);
                builder.Property(_ => _.VZT_CRS_SUMMA).AutoGenerated().DisplayName("Сумма документа").DisplayFormatString("n2").LocatedAt(5);
                builder.Property(_ => _.KontragentCurrency).AutoGenerated().DisplayName("Валюта").LocatedAt(6);
                builder.Property(_ => _.SFProvider).AutoGenerated().DisplayName("Счет фактура").ReadOnly().LocatedAt(7);
                builder.Property(_ => _.VZT_CRS_POGASHENO).AutoGenerated().DisplayName("Погашено").DisplayFormatString("n2").LocatedAt(10);
                builder.Property(_ => _.VzaimoraschType).AutoGenerated().DisplayName("Тип продукции").LocatedAt(9);
                builder.Property(_ => _.SHPZ).AutoGenerated().DisplayName("Счет дох/расх").LocatedAt(8);
            }
        }

        [MetadataType(typeof(DataAnnotationsMutualAccountingCredtorViewModel))]
        public class MutualAccountingCreditorViewModel : TD_110ViewModel
        {
            public MutualAccountingCreditorViewModel(TD_110ViewModel vm) : base(vm.Entity)
            {
            }

            public MutualAccountingCreditorViewModel()
            {
                VZT_UCH_CRS_RATE = 1;
                VZT_KONTR_CRS_RATE = 1;
            }
        }
    }
}
