using System.ComponentModel.DataAnnotations;
using Core.Helper;
using DevExpress.Mvvm.DataAnnotations;
using KursDomain.Documents.Vzaimozachet;

namespace KursAM2.ViewModel.Finance
{
    public class MutualAccountingDebitorCreditors
    {
        public class DataAnnotationsMutualAccountingDebitorViewModel : DataAnnotationForFluentApiBase,
            IMetadataProvider<MutualAccountingDebitorViewModel>
        {
            void IMetadataProvider<MutualAccountingDebitorViewModel>.BuildMetadata(
                MetadataBuilder<MutualAccountingDebitorViewModel> builder)
            {
                SetNotAutoGenerated(builder);
                builder.Property(_ => _.SFProvider).NotAutoGenerated();
                builder.Property(_ => _.VZT_CRS_SUMMA).AutoGenerated().DisplayName("Сумма документа");
                builder.Property(_ => _.Currency).AutoGenerated().DisplayName("Валюта документа");
                builder.Property(_ => _.VZT_DOC_DATE).AutoGenerated().DisplayName("Дата");
                builder.Property(_ => _.VZT_DOC_NUM).AutoGenerated().DisplayName("Номер");
                builder.Property(_ => _.VZT_DOC_NOTES).AutoGenerated().DisplayName("Документ");
                builder.Property(_ => _.SfClient).AutoGenerated().DisplayName("Счет фактура");
                builder.Property(_ => _.Kontragent).AutoGenerated().DisplayName("Контрагент");
                builder.Property(_ => _.VZT_CRS_POGASHENO).AutoGenerated().DisplayName("Погашено(опер)");
                builder.Property(_ => _.VZT_UCH_CRS_POGASHENO).AutoGenerated().DisplayName("Погашено(уч)");
                builder.Property(_ => _.VzaimoraschType).AutoGenerated().DisplayName("Тип продукции");
                builder.Property(_ => _.KontragentCurrency).AutoGenerated().DisplayName("Валюта контрагента");
                builder.Property(_ => _.SHPZ).AutoGenerated().DisplayName("Счет дох/расх");
                builder.Property(_ => _.VZT_UCH_CRS_RATE).AutoGenerated().DisplayName("Курс (учетная валюта");
            }
        }

        [MetadataType(typeof(DataAnnotationsMutualAccountingDebitorViewModel))]
        public class MutualAccountingDebitorViewModel : TD_110ViewModel //, IEquatable<MutualAccountingDebitorViewModel>
        {
            public MutualAccountingDebitorViewModel(TD_110ViewModel vm) : base(vm.Entity)
            {
            }

            public MutualAccountingDebitorViewModel()
            {
            }
        }

        public class DataAnnotationsMutualAccountingCredtorViewModel : DataAnnotationForFluentApiBase,
            IMetadataProvider<MutualAccountingCreditorViewModel>
        {
            void IMetadataProvider<MutualAccountingCreditorViewModel>.BuildMetadata(
                MetadataBuilder<MutualAccountingCreditorViewModel> builder)
            {
                SetNotAutoGenerated(builder);
                builder.Property(_ => _.SfClient).NotAutoGenerated();
                builder.Property(_ => _.VZT_CRS_SUMMA).AutoGenerated().DisplayName("Сумма документа");
                builder.Property(_ => _.Currency).AutoGenerated().DisplayName("Валюта документа");
                builder.Property(_ => _.VZT_DOC_DATE).AutoGenerated().DisplayName("Дата");
                builder.Property(_ => _.VZT_DOC_NUM).AutoGenerated().DisplayName("Номер");
                builder.Property(_ => _.VZT_DOC_NOTES).AutoGenerated().DisplayName("Документ");
                builder.Property(_ => _.SFProvider).AutoGenerated().DisplayName("Счет фактура");
                builder.Property(_ => _.Kontragent).AutoGenerated().DisplayName("Контрагент");
                builder.Property(_ => _.VZT_CRS_POGASHENO).AutoGenerated().DisplayName("Погашено(опер)");
                builder.Property(_ => _.VZT_UCH_CRS_POGASHENO).AutoGenerated().DisplayName("Погашено(уч)");
                builder.Property(_ => _.VzaimoraschType).AutoGenerated().DisplayName("Тип продукции");
                builder.Property(_ => _.KontragentCurrency).AutoGenerated().DisplayName("Валюта контрагента");
                builder.Property(_ => _.SHPZ).AutoGenerated().DisplayName("Счет дох/расх");
                builder.Property(_ => _.VZT_UCH_CRS_RATE).AutoGenerated().DisplayName("Курс (учетная валюта");
            }
        }

        [MetadataType(typeof(DataAnnotationsMutualAccountingCredtorViewModel))]
        public class MutualAccountingCreditorViewModel : TD_110ViewModel
        {
            public MutualAccountingCreditorViewModel(TD_110ViewModel vm) : base(vm.Entity)
            {
            }

            public MutualAccountingCreditorViewModel()
            {
                VZT_UCH_CRS_RATE = 1;
                VZT_KONTR_CRS_RATE = 1;
            }
        }
    }
}
