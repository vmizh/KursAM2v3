using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Transactions;
using Core;
using Core.EntityViewModel;
using Core.WindowsManager;
using Data;
using Helper;

namespace KursAM2.Managers
{
    public class SFClientManager
    {
        private decimal dc;
        public decimal SaveData(SFClientViewModel doc)
        {
            
            try
            {
                using (var ctx = GlobalOptions.GetEntities())
                {
                    
                    if (doc.DocCode == -1)
                    {
                        var GuidId = Guid.NewGuid();
                        var inNum = ctx.SD_84.Max(_ => _.SF_IN_NUM) + 1;
                        dc = ctx.SD_84.Max(_ => _.DOC_CODE) + 1;
                        ctx.SD_84.Add(new SD_84
                        {
                            Id = GuidId,
                            DOC_CODE = dc,
                            SF_IN_NUM = inNum,
                            SF_OUT_NUM = doc.SF_OUT_NUM,
                            SF_DATE = doc.SF_DATE,
                            REGISTER_DATE = doc.REGISTER_DATE,
                            SF_PAY_COND_DC = doc.SF_PAY_COND_DC,
                            SF_CRS_SUMMA_K_OPLATE = doc.SF_CRS_SUMMA_K_OPLATE,
                            SF_CRS_DC = doc.SF_CRS_DC,
                            SF_CRS_RATE = doc.SF_CRS_RATE,
                            SF_CLIENT_DC = doc.SF_CLIENT_DC,
                            SF_CLIENT_NAME = doc.SF_CLIENT_NAME,
                            SF_DILER_SUMMA = doc.SF_DILER_SUMMA,
                            SF_DILER_DC = doc.SF_DILER_DC,
                            SF_ACCEPTED = doc.SF_ACCEPTED,
                            SF_CENTR_OTV_DC = doc.SF_CENTR_OTV_DC,
                            CREATOR = "sysadm", //todo узнать как вывести
                            SF_VZAIMOR_TYPE_DC = doc.SF_VZAIMOR_TYPE_DC,
                            SF_FORM_RASCH_DC = doc.SF_FORM_RASCH_DC,
                            SF_NOTE = doc.Note,
                            SF_RECEIVER_KONTR_DC = doc.SF_RECEIVER_KONTR_DC
                    });
                        var myCode = doc.Rows.Max(_ => _.CODE) + 1;
                        foreach (var items in doc.Rows)
                        {
                            var data = ctx.TD_84.FirstOrDefault(_ => _.DOC_CODE == items.DOC_CODE && _.CODE == items.CODE);
                            if (items.DOC_CODE == -1)
                            {
                                ctx.TD_84.Add(new TD_84
                                {
                                    DOC_CODE = doc.DocCode,
                                    CODE = myCode,
                                    DocId = GuidId,
                                    SFT_TEXT = " ", //todo SFT_TEXT ЧТО ЭТО?
                                    SFT_NEMENKL_DC = items.SFT_NEMENKL_DC,
                                    SFT_KOL = items.SFT_KOL,
                                    SFT_NDS_PERCENT = items.SFT_NDS_PERCENT,

                                    OLD_NOM_NAME = items.OLD_NOM_NAME,
                                    OLD_NOM_NOMENKL = items.OLD_NOM_NOMENKL,
                                    OLD_OVERHEAD_CRS_NAME = items.OLD_OVERHEAD_CRS_NAME,
                                    OLD_OVERHEAD_NAME = items.OLD_OVERHEAD_NAME,
                                    OLD_UNIT_NAME = items.OLD_UNIT_NAME,
                                    SFT_ACCIZ = items.SFT_ACCIZ,
                                    SFT_COUNTRY_CODE = items.SFT_COUNTRY_CODE,
                                    SFT_DOG_OTGR_DC = items.SFT_DOG_OTGR_DC,
                                    SFT_DOG_OTGR_PLAN_CODE = items.SFT_DOG_OTGR_PLAN_CODE,
                                    SFT_ED_CENA = items.SFT_ED_CENA,
                                    SFT_KOMPLEKT = items.SFT_KOMPLEKT,
                                    SFT_UCHET_ED_IZM_DC = items.SFT_UCHET_ED_IZM_DC,
                                    SFT_NACENKA_DILERA = items.SFT_NACENKA_DILERA,
                                    SFT_NALOG_NA_PROD = items.SFT_NALOG_NA_PROD,
                                    SFT_N_GRUZ_DECLAR = items.SFT_N_GRUZ_DECLAR,
                                    SFT_PROCENT_ZS_RASHODOV = items.SFT_PROCENT_ZS_RASHODOV,
                                    SFT_SHPZ_DC = items.SFT_SHPZ_DC,
                                    SFT_STDP_DC = items.SFT_STDP_DC,
                                    SFT_STRANA_PROIS = items.SFT_STRANA_PROIS,
                                    SFT_SUMMA_K_OPLATE = items.SFT_SUMMA_K_OPLATE,
                                    SFT_SUMMA_K_OPLATE_KONTR_CRS = items.SFT_SUMMA_K_OPLATE_KONTR_CRS,
                                    SFT_SUMMA_NDS = items.SFT_SUMMA_NDS,
                                    SFT_TARA_DC = items.SFT_TARA_DC,
                                    SFT_TARA_FLAG = items.SFT_TARA_FLAG,
                                    SFT_TARA_MEST = items.SFT_TARA_MEST,
                                });
                                myCode += 1;
                            }
                            else
                            {
                                data.SFT_TEXT = " "; //todo SFT_TEXT ЧТО ЭТО?
                                data.SFT_NEMENKL_DC = items.SFT_NEMENKL_DC;
                                data.SFT_KOL = items.SFT_KOL;
                                data.SFT_NDS_PERCENT = items.SFT_NDS_PERCENT;

                                data.OLD_NOM_NAME = items.OLD_NOM_NAME;
                                data.OLD_NOM_NOMENKL = items.OLD_NOM_NOMENKL;
                                data.OLD_OVERHEAD_CRS_NAME = items.OLD_OVERHEAD_CRS_NAME;
                                data.OLD_OVERHEAD_NAME = items.OLD_OVERHEAD_NAME;
                                data.OLD_UNIT_NAME = items.OLD_UNIT_NAME;
                                data.SFT_ACCIZ = items.SFT_ACCIZ;
                                data.SFT_COUNTRY_CODE = items.SFT_COUNTRY_CODE;
                                data.SFT_DOG_OTGR_DC = items.SFT_DOG_OTGR_DC;
                                data.SFT_DOG_OTGR_PLAN_CODE = items.SFT_DOG_OTGR_PLAN_CODE;
                                data.SFT_ED_CENA = items.SFT_ED_CENA;
                                data.SFT_KOMPLEKT = items.SFT_KOMPLEKT;
                                data.SFT_UCHET_ED_IZM_DC = items.SFT_UCHET_ED_IZM_DC;
                                data.SFT_NACENKA_DILERA = items.SFT_NACENKA_DILERA;
                                data.SFT_NALOG_NA_PROD = items.SFT_NALOG_NA_PROD;
                                data.SFT_N_GRUZ_DECLAR = items.SFT_N_GRUZ_DECLAR;
                                data.SFT_PROCENT_ZS_RASHODOV = items.SFT_PROCENT_ZS_RASHODOV;
                                data.SFT_SHPZ_DC = items.SFT_SHPZ_DC;
                                data.SFT_STDP_DC = items.SFT_STDP_DC;
                                data.SFT_STRANA_PROIS = items.SFT_STRANA_PROIS;
                                data.SFT_SUMMA_K_OPLATE = items.SFT_SUMMA_K_OPLATE;
                                data.SFT_SUMMA_K_OPLATE_KONTR_CRS = items.SFT_SUMMA_K_OPLATE_KONTR_CRS;
                                data.SFT_SUMMA_NDS = items.SFT_SUMMA_NDS;
                                data.SFT_TARA_DC = items.SFT_TARA_DC;
                                data.SFT_TARA_FLAG = items.SFT_TARA_FLAG;
                                data.SFT_TARA_MEST = items.SFT_TARA_MEST;
                            }

                        }
                        if (doc.DeletedRows.Count > 0)
                        {
                            foreach (var item in doc.DeletedRows)
                            {
                                var DeletedItem = ctx.TD_84.FirstOrDefault(_ => _.Id == item.Id);
                                ctx.TD_84.Remove(DeletedItem);
                            }
                        }
                    }
                    else
                    {
                        dc = doc.DocCode;
                        var item = ctx.SD_84.FirstOrDefault(_ => _.DOC_CODE == doc.DocCode);
                        item.SF_OUT_NUM = doc.SF_OUT_NUM;
                        item.SF_DATE = doc.SF_DATE;
                        item.REGISTER_DATE = doc.REGISTER_DATE;
                        item.SF_PAY_COND_DC = doc.SF_PAY_COND_DC;
                        item.SF_CRS_SUMMA_K_OPLATE = doc.SF_CRS_SUMMA_K_OPLATE;
                        item.SF_CRS_DC = doc.SF_CRS_DC;
                        item.SF_CRS_RATE = doc.SF_CRS_RATE;
                        item.SF_CLIENT_DC = doc.SF_CLIENT_DC;
                        item.SF_CLIENT_NAME = doc.SF_CLIENT_NAME;
                        item.SF_DILER_SUMMA = doc.SF_DILER_SUMMA;
                        item.SF_DILER_DC = doc.SF_DILER_DC;
                        item.SF_ACCEPTED = doc.SF_ACCEPTED;
                        item.SF_CENTR_OTV_DC = doc.SF_CENTR_OTV_DC;
                        item.CREATOR = "sysadm"; //todo узнать как вывести
                        item.SF_VZAIMOR_TYPE_DC = doc.SF_VZAIMOR_TYPE_DC;
                        item.SF_FORM_RASCH_DC = doc.SF_FORM_RASCH_DC;
                        item.SF_NOTE = doc.Note;
                        item.SF_RECEIVER_KONTR_DC = doc.SF_RECEIVER_KONTR_DC;

                        var myCode = doc.Rows.Max(_ => _.CODE) + 1;
                        foreach (var items in doc.Rows)
                        {
                            var docGuid = ctx.SD_84.FirstOrDefault(_ => _.DOC_CODE == doc.DocCode).Id;
                            var data = ctx.TD_84.FirstOrDefault(_ => _.DOC_CODE == items.DOC_CODE && _.CODE == items.CODE);
                            if (items.DOC_CODE == -1)
                            {
                                ctx.TD_84.Add(new TD_84
                                {
                                    DOC_CODE = doc.DocCode,
                                    CODE = myCode,
                                    DocId = docGuid,
                                    SFT_TEXT = " ", //todo SFT_TEXT ЧТО ЭТО?
                                    SFT_NEMENKL_DC = items.SFT_NEMENKL_DC,
                                    SFT_KOL = items.SFT_KOL,
                                    SFT_NDS_PERCENT = items.SFT_NDS_PERCENT,
                                    Id = Guid.NewGuid(),

                                    OLD_NOM_NAME = items.OLD_NOM_NAME,
                                    OLD_NOM_NOMENKL = items.OLD_NOM_NOMENKL,
                                    OLD_OVERHEAD_CRS_NAME = items.OLD_OVERHEAD_CRS_NAME,
                                    OLD_OVERHEAD_NAME = items.OLD_OVERHEAD_NAME,
                                    OLD_UNIT_NAME = items.OLD_UNIT_NAME,
                                    SFT_ACCIZ = items.SFT_ACCIZ,
                                    SFT_COUNTRY_CODE = items.SFT_COUNTRY_CODE,
                                    SFT_DOG_OTGR_DC = items.SFT_DOG_OTGR_DC,
                                    SFT_DOG_OTGR_PLAN_CODE = items.SFT_DOG_OTGR_PLAN_CODE,
                                    SFT_ED_CENA = items.SFT_ED_CENA,
                                    SFT_KOMPLEKT = items.SFT_KOMPLEKT,
                                    SFT_UCHET_ED_IZM_DC = items.SFT_UCHET_ED_IZM_DC,
                                    SFT_NACENKA_DILERA = items.SFT_NACENKA_DILERA,
                                    SFT_NALOG_NA_PROD = items.SFT_NALOG_NA_PROD,
                                    SFT_N_GRUZ_DECLAR = items.SFT_N_GRUZ_DECLAR,
                                    SFT_PROCENT_ZS_RASHODOV = items.SFT_PROCENT_ZS_RASHODOV,
                                    SFT_SHPZ_DC = items.SFT_SHPZ_DC,
                                    SFT_STDP_DC = items.SFT_STDP_DC,
                                    SFT_STRANA_PROIS = items.SFT_STRANA_PROIS,
                                    SFT_SUMMA_K_OPLATE = items.SFT_SUMMA_K_OPLATE,
                                    SFT_SUMMA_K_OPLATE_KONTR_CRS = items.SFT_SUMMA_K_OPLATE_KONTR_CRS,
                                    SFT_SUMMA_NDS = items.SFT_SUMMA_NDS,
                                    SFT_TARA_DC = items.SFT_TARA_DC,
                                    SFT_TARA_FLAG = items.SFT_TARA_FLAG,
                                    SFT_TARA_MEST = items.SFT_TARA_MEST,
                                });
                                myCode += 1;
                            }
                            else
                            {
                                data.SFT_TEXT = " "; //todo SFT_TEXT ЧТО ЭТО?
                                data.SFT_NEMENKL_DC = items.SFT_NEMENKL_DC;
                                data.SFT_KOL = items.SFT_KOL;
                                data.SFT_NDS_PERCENT = items.SFT_NDS_PERCENT;

                                data.OLD_NOM_NAME = items.OLD_NOM_NAME;
                                data.OLD_NOM_NOMENKL = items.OLD_NOM_NOMENKL;
                                data.OLD_OVERHEAD_CRS_NAME = items.OLD_OVERHEAD_CRS_NAME;
                                data.OLD_OVERHEAD_NAME = items.OLD_OVERHEAD_NAME;
                                data.OLD_UNIT_NAME = items.OLD_UNIT_NAME;
                                data.SFT_ACCIZ = items.SFT_ACCIZ;
                                data.SFT_COUNTRY_CODE = items.SFT_COUNTRY_CODE;
                                data.SFT_DOG_OTGR_DC = items.SFT_DOG_OTGR_DC;
                                data.SFT_DOG_OTGR_PLAN_CODE = items.SFT_DOG_OTGR_PLAN_CODE;
                                data.SFT_ED_CENA = items.SFT_ED_CENA;
                                data.SFT_KOMPLEKT = items.SFT_KOMPLEKT;
                                data.SFT_UCHET_ED_IZM_DC = items.SFT_UCHET_ED_IZM_DC;
                                data.SFT_NACENKA_DILERA = items.SFT_NACENKA_DILERA;
                                data.SFT_NALOG_NA_PROD = items.SFT_NALOG_NA_PROD;
                                data.SFT_N_GRUZ_DECLAR = items.SFT_N_GRUZ_DECLAR;
                                data.SFT_PROCENT_ZS_RASHODOV = items.SFT_PROCENT_ZS_RASHODOV;
                                data.SFT_SHPZ_DC = items.SFT_SHPZ_DC;
                                data.SFT_STDP_DC = items.SFT_STDP_DC;
                                data.SFT_STRANA_PROIS = items.SFT_STRANA_PROIS;
                                data.SFT_SUMMA_K_OPLATE = items.SFT_SUMMA_K_OPLATE;
                                data.SFT_SUMMA_K_OPLATE_KONTR_CRS = items.SFT_SUMMA_K_OPLATE_KONTR_CRS;
                                data.SFT_SUMMA_NDS = items.SFT_SUMMA_NDS;
                                data.SFT_TARA_DC = items.SFT_TARA_DC;
                                data.SFT_TARA_FLAG = items.SFT_TARA_FLAG;
                                data.SFT_TARA_MEST = items.SFT_TARA_MEST;
                            }
                            
                        }
                        if (doc.DeletedRows.Count > 0)
                        {
                            foreach (var i in doc.DeletedRows)
                            {
                                var DeletedItem = ctx.TD_84.FirstOrDefault(_ => _.CODE == i.CODE && _.DOC_CODE == i.DOC_CODE);
                                ctx.TD_84.Remove(DeletedItem);
                            }
                        }
                    }
                    ctx.SaveChanges();
                }
            }
            catch (Exception e)
            {
                WindowManager.ShowError(e);
            }
            #region Old

            //using (var tnx = new TransactionScope())
            //{
            //    try
            //    {
            //        using (var ctx = GlobalOptions.GetEntities())
            //        {
            //            var d = ctx.SD_84.Include(_ => _.TD_84).SingleOrDefault(_ => _.DOC_CODE == doc.DocCode);
            //            WrapperUtility.AutoWrapper(doc.Entity, d, new List<string>
            //            {
            //                "DOC_CODE",
            //                "Id"
            //            });
            //            foreach (var row in d.TD_84)
            //            {
            //                var r = doc.Rows.SingleOrDefault(_ => _.CODE == row.CODE);
            //                if (r != null)
            //                    WrapperUtility.AutoWrapper(r.Entity, row, new List<string>
            //                    {
            //                        "DOC_CODE",
            //                        "CODE",
            //                        "Id",
            //                        "DocId"
            //                    });
            //            }
            //            ctx.SaveChanges();
            //        }
            //        tnx.Complete();
            //    }
            //    catch (Exception ex)
            //    {
            //        WindowManager.ShowError(ex);
            //    }
            //}
            #endregion
            return dc;
        }

        public void Deleted(SFClientViewModel currentSf)
        {
            try
            {
                using (var ctx = GlobalOptions.GetEntities())
                {
                    var deleteSD_84 = ctx.SD_84.FirstOrDefault(_ => _.DOC_CODE == currentSf.DocCode);
                    ctx.SD_84.Remove(deleteSD_84);
                    var deleteTD_84 = ctx.TD_84.Where(_ => _.DOC_CODE == currentSf.DocCode);
                    foreach (var i in deleteTD_84)
                    {
                        ctx.TD_84.Remove(i);
                    }
                    ctx.SaveChanges();
                }
            }
            catch (Exception e)
            {
                WindowManager.ShowError(e);
            }
        }
    }
}
