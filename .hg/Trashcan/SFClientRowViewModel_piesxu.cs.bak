using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using Core.Helper;
using Core.ViewModel.Base;
using Core.ViewModel.Common;
using Data;
using DevExpress.Mvvm.DataAnnotations;
using JetBrains.Annotations;

// ReSharper disable InconsistentNaming

namespace Core.EntityViewModel
{
    [MetadataType(typeof(DataAnnotationsSFClientRowViewModel))]

    public class SFClientRowViewModel : RSViewModelBase, IEntity<TD_84>
    {
        //public Country Country
        //{
        //    get
        //    {
        //        if (Entity.SFT_COUNTRY_CODE == null) return null;
        //        return MainReferences.Countries.Values.FirstOrDefault(_ => _.Sign3 == Entity.SFT_COUNTRY_CODE);
        //    }
        //    set
        //    {
        //        if (value == null)
        //        {
        //            Entity.SFT_COUNTRY_CODE = null;
        //        }
        //        else
        //        {
        //            Entity.SFT_COUNTRY_CODE = value.Sign3;
        //        }
        //        RaisePropertyChanged();
        //    }
        //}
        private TD_84 myEntity;

        public SFClientRowViewModel()
        {
            Entity = DefaultValue();
        }
        public SFClientRowViewModel(TD_84 entity)
        {
            Entity = entity ?? DefaultValue();
        }

        public string NomNomenkl => NomenklViewModel?.NOM_NOMENKL;

        public Guid DocId
        {
            get => Entity.DocId;
            set
            {
                if (Entity.DocId == value) return;
                Entity.DocId = value;
                RaisePropertyChanged();
            }
        }

        public decimal DOC_CODE
        {
            get => Entity.DOC_CODE;
            set
            {
                if (Entity.DOC_CODE == value) return;
                Entity.DOC_CODE = value;
                RaisePropertyChanged();
            }
        }

        public int CODE
        {
            get => Entity.CODE;
            set
            {
                if (Entity.CODE == value) return;
                Entity.CODE = value;
                RaisePropertyChanged();
            }
        }

        public string SFT_TEXT
        {
            get => Entity.SFT_TEXT;
            set
            {
                if (Entity.SFT_TEXT == value) return;
                Entity.SFT_TEXT = value;
                RaisePropertyChanged();
            }
        }

        public decimal SFT_NEMENKL_DC
        {
            get => Entity.SFT_NEMENKL_DC;
            set
            {
                if (Entity.SFT_NEMENKL_DC == value) return;
                Entity.SFT_NEMENKL_DC = value;
                RaisePropertyChanged();
            }
        }

        public double SFT_KOL
        {
            get => Entity.SFT_KOL;
            set
            {
                if (Entity.SFT_KOL == value) return;
                Entity.SFT_KOL = value;
                RaisePropertyChanged();
            }
        }

        public decimal? SFT_ED_CENA
        {
            get => Entity.SFT_ED_CENA;
            set
            {
                if (Entity.SFT_ED_CENA == value) return;
                Entity.SFT_ED_CENA = value;
                RaisePropertyChanged();
            }
        }

        public decimal? SFT_ACCIZ
        {
            get => Entity.SFT_ACCIZ;
            set
            {
                if (Entity.SFT_ACCIZ == value) return;
                Entity.SFT_ACCIZ = value;
                RaisePropertyChanged();
            }
        }

        public double SFT_NDS_PERCENT
        {
            get => Entity.SFT_NDS_PERCENT;
            set
            {
                if (Entity.SFT_NDS_PERCENT == value) return;
                Entity.SFT_NDS_PERCENT = value;
                RaisePropertyChanged();
            }
        }

        public decimal? SFT_SUMMA_NDS
        {
            get => Entity.SFT_SUMMA_NDS;
            set
            {
                if (Entity.SFT_SUMMA_NDS == value) return;
                Entity.SFT_SUMMA_NDS = value;
                RaisePropertyChanged();
            }
        }

        public decimal? SFT_SUMMA_K_OPLATE
        {
            get => Entity.SFT_SUMMA_K_OPLATE;
            set
            {
                if (Entity.SFT_SUMMA_K_OPLATE == value) return;
                Entity.SFT_SUMMA_K_OPLATE = value;
                RaisePropertyChanged();
            }
        }

        public decimal? SFT_STDP_DC
        {
            get => Entity.SFT_STDP_DC;
            set
            {
                if (Entity.SFT_STDP_DC == value) return;
                Entity.SFT_STDP_DC = value;
                RaisePropertyChanged();
            }
        }

        public decimal? SFT_UCHET_ED_IZM_DC
        {
            get => Entity.SFT_UCHET_ED_IZM_DC;
            set
            {
                if (Entity.SFT_UCHET_ED_IZM_DC == value) return;
                Entity.SFT_UCHET_ED_IZM_DC = value;
                RaisePropertyChanged();
            }
        }

        public short? SFT_KOMPLEKT
        {
            get => Entity.SFT_KOMPLEKT;
            set
            {
                if (Entity.SFT_KOMPLEKT == value) return;
                Entity.SFT_KOMPLEKT = value;
                RaisePropertyChanged();
            }
        }

        public decimal? SFT_NALOG_NA_PROD
        {
            get => Entity.SFT_NALOG_NA_PROD;
            set
            {
                if (Entity.SFT_NALOG_NA_PROD == value) return;
                Entity.SFT_NALOG_NA_PROD = value;
                RaisePropertyChanged();
            }
        }

        public decimal? SFT_DOG_OTGR_DC
        {
            get => Entity.SFT_DOG_OTGR_DC;
            set
            {
                if (Entity.SFT_DOG_OTGR_DC == value) return;
                Entity.SFT_DOG_OTGR_DC = value;
                RaisePropertyChanged();
            }
        }

        public int? SFT_DOG_OTGR_PLAN_CODE
        {
            get => Entity.SFT_DOG_OTGR_PLAN_CODE;
            set
            {
                if (Entity.SFT_DOG_OTGR_PLAN_CODE == value) return;
                Entity.SFT_DOG_OTGR_PLAN_CODE = value;
                RaisePropertyChanged();
            }
        }

        public decimal? SFT_NACENKA_DILERA
        {
            get => Entity.SFT_NACENKA_DILERA;
            set
            {
                if (Entity.SFT_NACENKA_DILERA == value) return;
                Entity.SFT_NACENKA_DILERA = value;
                RaisePropertyChanged();
            }
        }

        public double? SFT_PROCENT_ZS_RASHODOV
        {
            get => Entity.SFT_PROCENT_ZS_RASHODOV;
            set
            {
                if (Entity.SFT_PROCENT_ZS_RASHODOV == value) return;
                Entity.SFT_PROCENT_ZS_RASHODOV = value;
                RaisePropertyChanged();
            }
        }

        public decimal? SFT_SUMMA_K_OPLATE_KONTR_CRS
        {
            get => Entity.SFT_SUMMA_K_OPLATE_KONTR_CRS;
            set
            {
                if (Entity.SFT_SUMMA_K_OPLATE_KONTR_CRS == value) return;
                Entity.SFT_SUMMA_K_OPLATE_KONTR_CRS = value;
                RaisePropertyChanged();
            }
        }

        public decimal? SFT_SHPZ_DC
        {
            get => Entity.SFT_SHPZ_DC;
            set
            {
                if (Entity.SFT_SHPZ_DC == value) return;
                Entity.SFT_SHPZ_DC = value;
                RaisePropertyChanged();
            }
        }

        public string SFT_STRANA_PROIS
        {
            get => Entity.SFT_STRANA_PROIS;
            set
            {
                if (Entity.SFT_STRANA_PROIS == value) return;
                Entity.SFT_STRANA_PROIS = value;
                RaisePropertyChanged();
            }
        }

        public string SFT_N_GRUZ_DECLAR
        {
            get => Entity.SFT_N_GRUZ_DECLAR;
            set
            {
                if (Entity.SFT_N_GRUZ_DECLAR == value) return;
                Entity.SFT_N_GRUZ_DECLAR = value;
                RaisePropertyChanged();
            }
        }

        public double? SFT_TARA_MEST
        {
            get => Entity.SFT_TARA_MEST;
            set
            {
                if (Entity.SFT_TARA_MEST == value) return;
                Entity.SFT_TARA_MEST = value;
                RaisePropertyChanged();
            }
        }

        public decimal? SFT_TARA_DC
        {
            get => Entity.SFT_TARA_DC;
            set
            {
                if (Entity.SFT_TARA_DC == value) return;
                Entity.SFT_TARA_DC = value;
                RaisePropertyChanged();
            }
        }

        public short? SFT_TARA_FLAG
        {
            get => Entity.SFT_TARA_FLAG;
            set
            {
                if (Entity.SFT_TARA_FLAG == value) return;
                Entity.SFT_TARA_FLAG = value;
                RaisePropertyChanged();
            }
        }

        public byte[] TSTAMP
        {
            get => Entity.TSTAMP;
            set
            {
                if (Entity.TSTAMP == value) return;
                Entity.TSTAMP = value;
                RaisePropertyChanged();
            }
        }

        public string SFT_COUNTRY_CODE
        {
            get => Entity.SFT_COUNTRY_CODE;
            set
            {
                if (Entity.SFT_COUNTRY_CODE == value) return;
                Entity.SFT_COUNTRY_CODE = value;
                RaisePropertyChanged();
            }
        }

        public string OLD_NOM_NOMENKL
        {
            get => Entity.OLD_NOM_NOMENKL;
            set
            {
                if (Entity.OLD_NOM_NOMENKL == value) return;
                Entity.OLD_NOM_NOMENKL = value;
                RaisePropertyChanged();
            }
        }

        public string OLD_NOM_NAME
        {
            get => Entity.OLD_NOM_NAME;
            set
            {
                if (Entity.OLD_NOM_NAME == value) return;
                Entity.OLD_NOM_NAME = value;
                RaisePropertyChanged();
            }
        }

        public string OLD_OVERHEAD_NAME
        {
            get => Entity.OLD_OVERHEAD_NAME;
            set
            {
                if (Entity.OLD_OVERHEAD_NAME == value) return;
                Entity.OLD_OVERHEAD_NAME = value;
                RaisePropertyChanged();
            }
        }

        public string OLD_OVERHEAD_CRS_NAME
        {
            get => Entity.OLD_OVERHEAD_CRS_NAME;
            set
            {
                if (Entity.OLD_OVERHEAD_CRS_NAME == value) return;
                Entity.OLD_OVERHEAD_CRS_NAME = value;
                RaisePropertyChanged();
            }
        }

        public string OLD_UNIT_NAME
        {
            get => Entity.OLD_UNIT_NAME;
            set
            {
                if (Entity.OLD_UNIT_NAME == value) return;
                Entity.OLD_UNIT_NAME = value;
                RaisePropertyChanged();
            }
        }

        public SD_165 SD_165
        {
            get => Entity.SD_165;
            set
            {
                if (Entity.SD_165 == value) return;
                Entity.SD_165 = value;
                RaisePropertyChanged();
            }
        }

        public SD_175 SD_175
        {
            get => Entity.SD_175;
            set
            {
                if (Entity.SD_175 == value) return;
                Entity.SD_175 = value;
                RaisePropertyChanged();
            }
        }

        public SD_303 SD_303
        {
            get => Entity.SD_303;
            set
            {
                if (Entity.SD_303 == value) return;
                Entity.SD_303 = value;
                RaisePropertyChanged();
            }
        }

        public SD_83 SD_83
        {
            get => Entity.SD_83;
            set
            {
                if (Entity.SD_83 == value) return;
                Entity.SD_83 = value;
                RaisePropertyChanged();
            }
        }

        public SD_83 SD_831
        {
            get => Entity.SD_831;
            set
            {
                if (Entity.SD_831 == value) return;
                Entity.SD_831 = value;
                RaisePropertyChanged();
            }
        }

        public SD_84 SD_84
        {
            get => Entity.SD_84;
            set
            {
                if (Entity.SD_84 == value) return;
                Entity.SD_84 = value;
                RaisePropertyChanged();
            }
        }

        public VD_9 VD_9
        {
            get => Entity.VD_9;
            set
            {
                if (Entity.VD_9 == value) return;
                Entity.VD_9 = value;
                RaisePropertyChanged();
            }
        }

        public COUNTRY COUNTRY
        {
            get => Entity.COUNTRY;
            set
            {
                if (Entity.COUNTRY == value) return;
                Entity.COUNTRY = value;
                RaisePropertyChanged();
            }
        }

        public TD_84 Entity
        {
            get => myEntity;
            set
            {
                if (myEntity == value) return;
                myEntity = value;
                RaisePropertyChanged();
            }
        }

        public NomenklViewModel NomenklViewModel
        {
            get
            {
                return MainReferences.GetNomenkl(Entity.SFT_NEMENKL_DC);
            }
            set
            {
                if (Entity.SFT_NEMENKL_DC == value.DOC_CODE) return;
                Entity.SFT_NEMENKL_DC = value.DOC_CODE;
                RaisePropertyChanged();
            }
        }

        public string NomenklNumber => NomenklViewModel?.NomenklNumber;
        public bool IsUsluga => NomenklViewModel?.NOM_0MATER_1USLUGA == 1;
        private decimal myShipped;
        private decimal myRest;
        /// <summary>
        ///     Отгружено
        /// </summary>
        public decimal Shipped
        {
            get => myShipped;
            set
            {
                if (myShipped == value) return;
                myShipped = value;
                myRest = (decimal)(SFT_KOL - (double)myShipped);
                RaisePropertyChanged();
                RaisePropertyChanged(nameof(Rest));
            }
        }
        /// <summary>
        ///     остаток для отгрузки по счету
        /// </summary>
        public decimal Rest
        {
            get => myRest;
            set
            {
                if (myRest == value) return;
                myRest = value;
                RaisePropertyChanged();            }
        }
        /// <summary>
        ///     текущие остатки на складах
        /// </summary>
        private decimal myCurrentRemains;
        public decimal CurrentRemains
        {
            get => myCurrentRemains;
            set
            {
                if (myCurrentRemains == value) return;
                myCurrentRemains = value;
                RaisePropertyChanged();
            }
        }

        public virtual void Save(TD_84 doc)
        {
            throw new NotImplementedException();
        }

        public void Save()
        {
            throw new NotImplementedException();
        }

        public void Delete()
        {
            throw new NotImplementedException();
        }

        public void Delete(Guid id)
        {
            throw new NotImplementedException();
        }

        public void Delete(decimal dc)
        {
            throw new NotImplementedException();
        }

        public void UpdateFrom(TD_84 ent)
        {
            CODE = ent.CODE;
            SFT_TEXT = ent.SFT_TEXT;
            SFT_NEMENKL_DC = ent.SFT_NEMENKL_DC;
            SFT_KOL = ent.SFT_KOL;
            SFT_ED_CENA = ent.SFT_ED_CENA;
            SFT_ACCIZ = ent.SFT_ACCIZ;
            SFT_NDS_PERCENT = ent.SFT_NDS_PERCENT;
            SFT_SUMMA_NDS = ent.SFT_SUMMA_NDS;
            SFT_SUMMA_K_OPLATE = ent.SFT_SUMMA_K_OPLATE;
            SFT_STDP_DC = ent.SFT_STDP_DC;
            SFT_UCHET_ED_IZM_DC = ent.SFT_UCHET_ED_IZM_DC;
            SFT_KOMPLEKT = ent.SFT_KOMPLEKT;
            SFT_NALOG_NA_PROD = ent.SFT_NALOG_NA_PROD;
            SFT_DOG_OTGR_DC = ent.SFT_DOG_OTGR_DC;
            SFT_DOG_OTGR_PLAN_CODE = ent.SFT_DOG_OTGR_PLAN_CODE;
            SFT_NACENKA_DILERA = ent.SFT_NACENKA_DILERA;
            SFT_PROCENT_ZS_RASHODOV = ent.SFT_PROCENT_ZS_RASHODOV;
            SFT_SUMMA_K_OPLATE_KONTR_CRS = ent.SFT_SUMMA_K_OPLATE_KONTR_CRS;
            SFT_SHPZ_DC = ent.SFT_SHPZ_DC;
            SFT_STRANA_PROIS = ent.SFT_STRANA_PROIS;
            SFT_N_GRUZ_DECLAR = ent.SFT_N_GRUZ_DECLAR;
            SFT_TARA_MEST = ent.SFT_TARA_MEST;
            SFT_TARA_DC = ent.SFT_TARA_DC;
            SFT_TARA_FLAG = ent.SFT_TARA_FLAG;
            TSTAMP = ent.TSTAMP;
            SFT_COUNTRY_CODE = ent.SFT_COUNTRY_CODE;
            OLD_NOM_NOMENKL = ent.OLD_NOM_NOMENKL;
            OLD_NOM_NAME = ent.OLD_NOM_NAME;
            OLD_OVERHEAD_NAME = ent.OLD_OVERHEAD_NAME;
            OLD_OVERHEAD_CRS_NAME = ent.OLD_OVERHEAD_CRS_NAME;
            OLD_UNIT_NAME = ent.OLD_UNIT_NAME;
            SD_165 = ent.SD_165;
            SD_175 = ent.SD_175;
            SD_303 = ent.SD_303;
            SD_83 = ent.SD_83;
            SD_831 = ent.SD_831;
            SD_84 = ent.SD_84;
            VD_9 = ent.VD_9;
            COUNTRY = ent.COUNTRY;
            Id = ent.Id;
            DocId = ent.DocId;
        }

        public void UpdateTo(TD_84 ent)
        {
            ent.CODE = CODE;
            ent.SFT_TEXT = SFT_TEXT;
            ent.SFT_NEMENKL_DC = SFT_NEMENKL_DC;
            ent.SFT_KOL = SFT_KOL;
            ent.SFT_ED_CENA = SFT_ED_CENA;
            ent.SFT_ACCIZ = SFT_ACCIZ;
            ent.SFT_NDS_PERCENT = SFT_NDS_PERCENT;
            ent.SFT_SUMMA_NDS = SFT_SUMMA_NDS;
            ent.SFT_SUMMA_K_OPLATE = SFT_SUMMA_K_OPLATE;
            ent.SFT_STDP_DC = SFT_STDP_DC;
            ent.SFT_UCHET_ED_IZM_DC = SFT_UCHET_ED_IZM_DC;
            ent.SFT_KOMPLEKT = SFT_KOMPLEKT;
            ent.SFT_NALOG_NA_PROD = SFT_NALOG_NA_PROD;
            ent.SFT_DOG_OTGR_DC = SFT_DOG_OTGR_DC;
            ent.SFT_DOG_OTGR_PLAN_CODE = SFT_DOG_OTGR_PLAN_CODE;
            ent.SFT_NACENKA_DILERA = SFT_NACENKA_DILERA;
            ent.SFT_PROCENT_ZS_RASHODOV = SFT_PROCENT_ZS_RASHODOV;
            ent.SFT_SUMMA_K_OPLATE_KONTR_CRS = SFT_SUMMA_K_OPLATE_KONTR_CRS;
            ent.SFT_SHPZ_DC = SFT_SHPZ_DC;
            ent.SFT_STRANA_PROIS = SFT_STRANA_PROIS;
            ent.SFT_N_GRUZ_DECLAR = SFT_N_GRUZ_DECLAR;
            ent.SFT_TARA_MEST = SFT_TARA_MEST;
            ent.SFT_TARA_DC = SFT_TARA_DC;
            ent.SFT_TARA_FLAG = SFT_TARA_FLAG;
            ent.TSTAMP = TSTAMP;
            ent.SFT_COUNTRY_CODE = SFT_COUNTRY_CODE;
            ent.OLD_NOM_NOMENKL = OLD_NOM_NOMENKL;
            ent.OLD_NOM_NAME = OLD_NOM_NAME;
            ent.OLD_OVERHEAD_NAME = OLD_OVERHEAD_NAME;
            ent.OLD_OVERHEAD_CRS_NAME = OLD_OVERHEAD_CRS_NAME;
            ent.OLD_UNIT_NAME = OLD_UNIT_NAME;
            ent.SD_165 = SD_165;
            ent.SD_175 = SD_175;
            ent.SD_303 = SD_303;
            ent.SD_83 = SD_83;
            ent.SD_831 = SD_831;
            ent.SD_84 = SD_84;
            ent.VD_9 = VD_9;
            ent.COUNTRY = COUNTRY;
            ent.Id = Id;
            ent.DocId = DocId;
        }

        public TD_84 DefaultValue()
        {
            return new TD_84
            {
                Id = Guid.NewGuid(),
                DOC_CODE = -1,
                CODE = -1
            };
        }

        public List<TD_84> LoadList()
        {
            throw new NotImplementedException();
        }

        public EntityLoadCodition LoadCondition { get; set; }
        public virtual TD_84 Load(decimal dc)
        {
            throw new NotImplementedException();
        }

        public virtual TD_84 Load(Guid id)
        {
            throw new NotImplementedException();
        }
    }
    public class DataAnnotationsSFClientRowViewModel : DataAnnotationForFluentApiBase, IMetadataProvider<SFClientRowViewModel>
    {
        void IMetadataProvider<SFClientRowViewModel>.BuildMetadata(MetadataBuilder<SFClientRowViewModel> builder)
        {
            SetNotAutoGenerated(builder);
            builder.Property(_ => _.NomenklViewModel).AutoGenerated().DisplayName("Наименование");
            builder.Property(_ => _.NomNomenkl).AutoGenerated().DisplayName("Ном.№");
            builder.Property(_ => _.IsUsluga).AutoGenerated().DisplayName("Услуга");
            builder.Property(_ => _.SFT_KOL).AutoGenerated().DisplayName("Кол-во");
            builder.Property(_ => _.SFT_ED_CENA).AutoGenerated().DisplayName("Цена");
            builder.Property(_ => _.SFT_SUMMA_K_OPLATE).AutoGenerated().DisplayName("Сумма");
            builder.Property(_ => _.Shipped).AutoGenerated().DisplayName("Отгружено");
            builder.Property(_ => _.Rest).AutoGenerated().DisplayName("Остаток");
            builder.Property(_ => _.CurrentRemains).AutoGenerated().DisplayName("Текущие остатки");
            builder.Property(_ => _.Note).AutoGenerated().DisplayName("Примечание");
            builder.Property(_ => _.SFT_NDS_PERCENT).AutoGenerated().DisplayName("НДС");
        }
    }
}