using System;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading;
using System.Windows;
using System.Windows.Media;
using Core;
using DevExpress.Xpf.Core;
using DevExpress.Xpf.LayoutControl;
using KursAM2.Managers;
using KursAM2.View.Finance;
using KursAM2.View.Finance.Cash;
using KursAM2.View.KursReferences;
using KursAM2.View.Logistiks;
using KursAM2.View.Management;
using KursAM2.View.Personal;
using KursAM2.View.Reconciliation;
using KursAM2.View.Repozit;
using KursAM2.View.Search;
using KursAM2.ViewModel.Finance;
using KursAM2.ViewModel.Logistiks;
using KursAM2.ViewModel.Management;
using KursAM2.ViewModel.Management.BreakEven;
using KursAM2.ViewModel.Management.ManagementBalans;
using KursAM2.ViewModel.Personal;
using KursAM2.ViewModel.Reference;
using KursAM2.ViewModel.Repozit;
using KursAM2.ViewModel.StartLogin;
using LayoutManager;
using PeriodManager.View;
using PeriodManager.ViewModel;

namespace KursAM2.View
{
    /// <summary>
    ///     Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : ILayout
    {
        //private readonly string myLayoutFileName = $"{Environment.CurrentDirectory}\\Layout\\{"MainWindow"}.xml";
        private Timer myVersionUpdateTimer;

        public MainWindow()
        {
            try
            {
                InitializeComponent();
                #if (!DEBUG) 

                myVersionUpdateTimer = new Timer(_ => CheckUpdateVersion(), null, 1000 * 360 * 3, Timeout.Infinite);
              
                #endif

                LayoutManager = new LayoutManager.LayoutManager(GetType().Name, this, dockLayout);
                Closing += MainWindow_Closing;
                Loaded += MainWindow_Loaded;
                Closed += MainWindow_Closed;
            }
            catch (Exception ex)
            {
                var s = new StringBuilder();
                s.Append(ex.Message + "\nInnerExcepption:");
                if (ex.InnerException != null)
                    s.Append(ex.InnerException.Message);
                MessageBox.Show(s.ToString());
            }
        }

        private void CheckUpdateVersion()
        {
            myVersionUpdateTimer.Dispose();
            var ver = new VersionManager();
            ver.CheckVersion();
            myVersionUpdateTimer = new Timer(_ => CheckUpdateVersion(), null, 1000 * 60, Timeout.Infinite);
        }

        public LayoutManagerBase LayoutManager { get; set; }

        private void MainWindow_Closed(object sender, EventArgs e)
        {
            foreach (var f in from Window f in Application.Current.Windows where f != null select f)
                f.Close();
        }

        private void MainWindow_Closing(object sender, CancelEventArgs e)
        {
            LayoutManager.Save();
        }

        private void MainWindow_Loaded(object sender, RoutedEventArgs e)
        {
            LayoutManager.Load();
        }

        public void OpenWindow(string formName)
        {
            try
            {
                // ReSharper disable once TooWideLocalVariableScope
                DXWindow form;
                switch (formName)
                {
                    case "  Дебиторы / Кредиторы":
                        form = new DebitorCreditorView {Owner = Application.Current.MainWindow};
                        form.Show();
                        break;
                    case "Контрагенты для документов":
                        form = new KontragentRefOutView {Owner = Application.Current.MainWindow};
                        var kdocCtx = new KontragentReferenceOutWindowViewModel(form);
                        form.DataContext = kdocCtx;
                        form.Show();
                        break;
                    case "Договора для клиентов":
                        form = new SearchDogovorForClientView {Owner = Application.Current.MainWindow};
                        var ctxdog = new DogovorForClientSearchViewModel(form);
                        form.DataContext = ctxdog;
                        form.Show();
                        break;
                    case "Лицевые счета контрагентов":
                        var ctxk = new KontragentBalansWindowViewModel();
                        form = new KontragentBalansForm {Owner = Application.Current.MainWindow, DataContext = ctxk};
                        form.Show();
                        break;
                    case "  Рентабельность":
                        var renCtx = new BreakEvenWindowViewModel();
                        form = new BreakEvenForm
                        {
                            Owner = Application.Current.MainWindow,
                            DataContext = renCtx
                        };
                        form.Show();
                        break;
                    case "Лицевые счета сотрудников":
                        var psCtx = new EmployeePayWindowViewModel();
                        form = new PersonalPaysView {Owner = Application.Current.MainWindow, DataContext = psCtx};
                        psCtx.RefreshData(null);
                        form.Show();
                        break;
                    case "Справочник начислений для з/п":
                        form = new PayRollTypeReference {Owner = Application.Current.MainWindow};
                        form.Show();
                        break;
                    case "Права доступа к лицевым счетам сотрудников":
                        form = new UsersRightToPayRoll {Owner = Application.Current.MainWindow};
                        form.Show();
                        break;
                    case "Ведомости начислений з/платы":
                        var vedCtx = new PayrollSearchWindowViewModel();
                        vedCtx.RefreshData(null);
                        form = new PayRollDocSearch
                        {
                            Owner = Application.Current.MainWindow
                        };
                        form.Show();
                        form.DataContext = vedCtx;
                        break;
                    case "Управленческий баланс":
                        var ctx1 = new ManagementBalansWindowViewModel {CurrentDate = DateTime.Today};
                        form = new ManagementBalansView
                        {
                            Owner = Application.Current.MainWindow,
                            DataContext = ctx1
                        };
                        form.DataContext = ctx1;
                        ctx1.Form = form;
                        form.Show();
                        break;
                    case "Прибыль и убытки":
                        form = new ProfitAndLosses
                        {
                            Owner = Application.Current.MainWindow,
                        };
                        var ctx2 = new ProfitAndLossesWindowViewModel();
                        ctx2.Form = form;
                        form.DataContext = ctx2;
                        form.Show();
                        break;
                    case "Грузовые реквизиты контрагентов":
                        var ctx3 = new KontragentGruzoInfoWindowViewModel();
                        ctx3.RefreshData(null);
                        form = new KontragentGruzoInfoView
                        {
                            Owner = Application.Current.MainWindow,
                            DataContext = ctx3
                        };
                        form.Show();
                        break;
                    case "Счета-Фактуры клиентам":
                        form = new SearchSFForClientView {Owner = Application.Current.MainWindow};
                        var ctxsf = new SFForClientSearchViewModel(form);
                        form.DataContext = ctxsf;
                        form.Show();
                        break;
                    case "Счета-фактуры поставщиков":
                        form = new SearchSFProvideView { Owner = Application.Current.MainWindow };
                        var dtx = new SearchSFProvideViewModel (form);
                        form.DataContext = dtx;
                        form.Show();
                        break;
                    case "Расходные накладные для клиентов":
                        form = new SearchNakladForClientView {Owner = Application.Current.MainWindow};
                        var ctxNaklad = new WaybillForClientSearchViewModel(form);
                        form.Show();
                        form.DataContext = ctxNaklad;
                        break;
                    case "Справочник сотрудников":
                        form = new PersonaReference {Owner = Application.Current.MainWindow};
                        var ctxPers = new PersonaReferenceWindowViewModel();
                        form.Show();
                        form.DataContext = ctxPers;
                        break;
                    //case "Номенклатурный справочник":
                    //    form = new NomenklReference { Owner = Application.Current.MainWindow };
                    //    form.Show();
                    //    break;
                    case "  Доступ к сч. контр-тов":
                        form = new KontragentRightsControl {Owner = Application.Current.MainWindow};
                        form.Show();
                        break;
                    case "Справочник контрагентов":
                        form = new KontragentReferenceView {Owner = Application.Current.MainWindow};
                        var ctxRef = new KontragentReferenceWindowViewModel();
                        form.Show();
                        form.DataContext = ctxRef;
                        break;
                    case "Справочник складов":
                        form = new StoreReferenceView {Owner = Application.Current.MainWindow};
                        var ctxRef1 = new StoreReferenceWindowViewModel();
                        form.Show();
                        form.DataContext = ctxRef1;
                        break;
                    case "Закрытие периодов":
                        var ctx = new PeriodGroupsReferenceViewModel();
                        ctx.RefreshData();
                        form = new PeriodCloseManagementView
                        {
                            Owner = Application.Current.MainWindow,
                            DataContext = ctx
                        };
                        form.Show();
                        break;
                    case " Акты сверки":
                        form = new ActOfReconciliation();
                        form.Show();
                        break;

                    case " Рентабельность ШОП":
                        form = new ShopRentabelnost();
                        form.Show();
                        break;
                    case "Остатки товаров на складах":
                        var ctxost = new SkladOstatkiWindowViewModel();
                        ctxost.RefreshData(null);
                        form = new SkladOstatki
                        {
                            Owner = Application.Current.MainWindow,
                            DataContext = ctxost
                        };
                        form.Show();
                        break;
                    case "Калькуляция себестоимости":
                        var ctxost1 = new NomenklCostCalculatorWindowViewModel();
                        ctxost1.RefreshData(null);
                        form = new NomenklCostCalculator
                        {
                            Owner = Application.Current.MainWindow,
                            DataContext = ctxost1
                        };
                        form.Show();
                        break;
                    case "Внутреннее перемещение товаров":
                        var ctxost2 = new NomenklInnerMoveWindowViewModel();
                        ctxost2.RefreshData(null);
                        form = new NomenklInnerMove
                        {
                            Owner = Application.Current.MainWindow,
                            DataContext = ctxost2
                        };
                        form.Show();
                        break;
                    case "Переоценка товара":
                        var ctxost3 = new NomenklCostResetWindowViewModel();
                        ctxost3.RefreshData(null);
                        form = new NomenklCostReset
                        {
                            Owner = Application.Current.MainWindow,
                            DataContext = ctxost3
                        };
                        form.Show();
                        break;
                    case "Права доступа для пользователей":
                        var ctxost4 = new UsersHorizontalRightWindowViewModel();
                        ctxost4.RefreshData(null);
                        form = new UsersHorizontalRight
                        {
                            Owner = Application.Current.MainWindow,
                            DataContext = ctxost4
                        };
                        form.Show();
                        break;
                    case "Таксировка валюты товаров":
                        form = new SaleTaxNomenklView
                        {
                            Owner = Application.Current.MainWindow
                        };
                        form.DataContext = new SaleTaxNomenklWindowViewModel(form);
                        form.Show();
                        break;
                    case "Движение денежных средств":
                        form = new MoneyPeriodMove
                        {
                            Owner = Application.Current.MainWindow
                        };
                        var dv = new MoneyPeriodWindowViewModel(form);
                        dv.RefreshData(null);
                        form.DataContext = dv;
                        form.Show();
                        break;
                    case "Движение товаров":

                        var form1 = new NomenklMoveOnSklad
                        {
                            Owner = Application.Current.MainWindow
                        };
                        var ctxNomMove = new NomenklMoveOnSkladWindowViewModel(form1);
                        form1.DataContext = ctxNomMove;
                        form1.Show();
                        break;
                    case "Номенклатурный справочник":
                        form = new NomenklReferenceView
                        {
                            Owner = Application.Current.MainWindow,
                            DataContext = new NomenklReferenceWindowViewModel()
                        };
                        form.Show();
                        break;
                    case "Акт валютной таксировки номенклатур":
                        form = new NomenklTransferSearchView
                        {
                            Owner = Application.Current.MainWindow,
                            DataContext = new NomenklTransferSearchViewModel()
                        };
                        form.Show();
                        break;
                    case "Справочник проектов":
                        form = new ProjectReferenceView
                        {
                            Owner = Application.Current.MainWindow,
                            DataContext = new ProjectReferenceWindowViewModel()
                        };
                        form.Show();
                        break;
                    case "Инвентаризационные ведомости":
                        form = new InventorySheetSearchView
                        {
                            Owner = Application.Current.MainWindow,
                            DataContext = new InventorySheetSearchWindowViewModel()
                        };
                        form.Show();
                        break;
                    case "Распределение накладных расходов":
                        form = new PurchaseInvoicesOverheadsView
                        {
                            Owner = Application.Current.MainWindow,
                            DataContext = new PurchaseOverheadsWindowViewModel()
                        };
                        form.Show();
                        break;
                    case "Сравнение балансов":
                        form = new ManagementBalansCompareView
                        {
                            Owner = Application.Current.MainWindow,
                        };
                        form.DataContext = new ManagementBalansCompareWindowViewModel(form);
                        form.Show();
                        break;

                    case "Типы актов взаимозачета":
                        form = new MUtualAccountingTypeRefView
                        {
                            Owner = Application.Current.MainWindow,
                        };
                        form.DataContext = new MutualAcountingRefWindowViewModel();
                        form.Show();
                        break;
                    case "Акты взаимозачетов":
                        form = new MutualAccountingSearchView
                        {
                            Owner = Application.Current.MainWindow,
                        };
                        form.DataContext = new MutualAccountingWindowSearchViewModel()
                        {
                            WindowName = "Поиск актов взаимозачета"
                        };
                        form.Show();
                        break;
                    case "Акты валютной конвертации":
                        form = new MutualAccountingSearchView
                        {
                            Owner = Application.Current.MainWindow,

                        };
                        form.DataContext = new MutualAccountingWindowSearchViewModel(true)
                        {
                            WindowName = "Поиск актов конвертации"
                        };
                        form.Show();
                        break;
                    case "Проекты":
                        form = new ProjectsView()
                        {
                            Owner = Application.Current.MainWindow,

                        };
                        form.DataContext = new ProjectWindowViewModel()
                        {
                            Form = form
                        };
                        form.Show();
                        break;
                    case "Приходный кассовый ордер":
                        form = new CashInSearchView
                        {
                            Owner = Application.Current.MainWindow,

                        };
                        form.DataContext = new CashInWindowSearchViewModel()
                        {
                            Form = form
                        };
                        form.Show();
                        break;
                    case "Настройка прав доступа":
                        var ctxAccessRight = new AccessRightsViewModel();
                        form = new AccessRightsView
                        {
                            Owner = Application.Current.MainWindow,
                            DataContext = ctxAccessRight
                        };
                        ctxAccessRight.Form = form;
                        form.Show();
                        break;
                    default:
                        MessageBox.Show("Не реализован");
                        break;
                }
            }
            catch (Exception ex)
            {
                var s = new StringBuilder();
                s.Append(ex.Message + "\n");
                if (ex.InnerException != null)
                    s.Append(ex.InnerException.Message);
                MessageBox.Show(s.ToString());
            }
        }

        private void tileMainGroup_TileClick(object sender, TileClickEventArgs tileClickEventArgs)
        {
            tileDocumentItems.Children.Clear();
            foreach (
                var tile in
                GlobalOptions.UserInfo.MainTileGroups.Where(
                        group => (string) tileClickEventArgs.Tile.Tag == group.Name)
                    .SelectMany(group => group.TileItems))
            {
                if (tile == null) return;
                var newTile = new Tile {Header = tile.Name, Size = TileSize.Large};

                tileDocumentItems.Children?.Add(newTile);
            }
        }

        private void DXWindow_Loaded(object sender, RoutedEventArgs e)
        {
            var login = new StartLogin();
            login.ShowDialog();
            if (!login.IsConnectSuccess)
                Close();
            else
                foreach (var tileGroup in GlobalOptions.UserInfo.MainTileGroups)
                {
                    var newTileGroup = new Tile {Tag = tileGroup.Name};

                    if (tileGroup.Picture != null)
                    {
                        newTileGroup.Width = tileGroup.Picture.Source.Width;
                        newTileGroup.Height = tileGroup.Picture.Source.Height;

                        newTileGroup.Margin = new Thickness(0, 0, 0, 0);
                        newTileGroup.Padding = new Thickness(0, 0, 0, 0);
                        newTileGroup.Content = tileGroup.Picture;
                        var bc = new BrushConverter();
                        var brush = (Brush) bc.ConvertFrom("#FFD0D6D3");
                        if (brush != null)
                        {
                            brush.Freeze();
                            newTileGroup.Background = brush;
                            newTileGroup.Foreground = brush;
                            newTileGroup.ToolTip = tileGroup.Notes;
                        }
                    }
                    tileMainGroup.Children.Add(newTileGroup);
                }
            Title = $"Курс АМ2. {GlobalOptions.DataBaseName} Версия {GlobalOptions.Version}";
        }

        private void tileDocumentItems_TileClick(object sender, TileClickEventArgs e)
        {
            OpenWindow(e.Tile.Header as string);
        }
    }
}