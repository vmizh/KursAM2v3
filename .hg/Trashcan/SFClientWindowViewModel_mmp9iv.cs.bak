using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Windows;
using System.Windows.Input;
using Core;
using Core.EntityViewModel;
using Core.Menu;
using Core.ViewModel.Base;
using Core.ViewModel.Common;
using KursAM2.Dialogs;
using KursAM2.Managers;
using KursAM2.ReportManagers.SFClientAndWayBill;
using KursAM2.View.Finance;
using Reports.Base;

namespace KursAM2.ViewModel.Finance
{
    public sealed class SFClientWindowViewModel : RSWindowViewModelBase
    {
        public SFClientManager Manager = new SFClientManager();
        public SFClientRowViewModel myCurrentRow;
        private SFClientViewModel myDocument;
        private decimal myOtgruzheno;
        private ReportManager myReportManager;

        public SFClientWindowViewModel()
        {
            Nomenkls = MainReferences.ALLNomenkls.Values.ToList();
            myReportManager = new ReportManager();
            CreateReports();
            IsDocNewCopyAllow = true;
            IsDocNewCopyRequisiteAllow = true;
            LeftMenuBar = MenuGenerator.DocWithRowsLeftBar(this);
            RightMenuBar = MenuGenerator.StandartDocWithDeleteRightBar(this);
            CreateReportsMenu();
        }

        public SFClientRowViewModel CurrentRow
        {
            set
            {
                if (myCurrentRow == value) return;
                myCurrentRow = value;
                RaisePropertyChanged();
            }
            get => myCurrentRow;
        }

        public decimal Otgruzheno
        {
            get => myOtgruzheno;
            set
            {
                if (myOtgruzheno == value) return;
                myOtgruzheno = value;
                RaisePropertyChanged();
            }
        }

        public SFClientViewModel Document
        {
            get => myDocument;
            set
            {
                if (myDocument == value) return;
                myDocument = value;
                RaisePropertyChanged();
            }
        }

        public override bool IsCanSaveData
        {
            get
            {
                return ((Document.State != RowStatus.NotEdited ||
                       Document.Rows.Any(_ => _.State == RowStatus.Edited))
                                              || (Document.DeletedRows != null && Document.DeletedRows.Count > 0))
                                              && (Document.SF_CLIENT_NAME != null);
            }
            set => base.IsCanSaveData = value;
        }

        public override bool IsDocDeleteAllow
        {
            get => Document.DocCode != -1;
            set => base.IsDocDeleteAllow = value;
        }

        public void GetDefaultValue()
        {
            decimal? sum = 0;
            if (Document.Rows.Count > 0)
                foreach (var item in Document.Rows)
                {
                    if (item.SFT_ED_CENA != null)
                        item.SFT_SUMMA_K_OPLATE = item.SFT_ED_CENA * (int) item.SFT_KOL;
                    if (item.SFT_SUMMA_K_OPLATE != null)
                        sum += item.SFT_SUMMA_K_OPLATE;
                    item.State = RowStatus.NotEdited;
                }
            Document.SF_CRS_SUMMA_K_OPLATE = sum;
            Document.State = RowStatus.NotEdited;
        }

        private void CreateReportsMenu()
        {
            var prn = RightMenuBar.FirstOrDefault(_ => _.Name == "Print");
            if (prn == null) return;

            #region Заказ

            var zakPrint = new MenuButtonInfo
            {
                Caption = "Заказ"
            };

            zakPrint.SubMenu.Add(new MenuButtonInfo
            {
                Caption = "Заказ",
                Command = PrintZakazCommand
            });
            zakPrint.SubMenu.Add(new MenuButtonInfo
            {
                Caption = "Заказ без менеджера",
                Command = PrintZakazWOManagerCommand
            });

            #endregion

            #region Заявка на отгрузку со склада

            var zajavkaSkladPrint = new MenuButtonInfo
            {
                Caption = "Отгрузка со склада"
            };
            zajavkaSkladPrint.SubMenu.Add(new MenuButtonInfo
            {
                Caption = "Заявка на отгрузку",
                Command = PrintZajavkaCommand
            });
            zajavkaSkladPrint.SubMenu.Add(new MenuButtonInfo
            {
                Caption = "Экспорт",
                Command = PrintZajavkaExportCommand
            });

            #endregion

            prn.SubMenu.Add(zakPrint);
            prn.SubMenu.Add(zajavkaSkladPrint);
            prn.SubMenu.Add(new MenuButtonInfo
            {
                IsSeparator = true
            });
            prn.SubMenu.Add(new MenuButtonInfo
            {
                Caption = "Счет",
                Command = PrintSFSchetCommand
            });
            prn.SubMenu.Add(new MenuButtonInfo
            {
                Caption = "Счет экспорт",
                Command = PrintSFSchetExportCommand
            });
            prn.SubMenu.Add(new MenuButtonInfo
            {
                Caption = "Счет фактура",
                Command = PrintSFCommand
            });
            prn.SubMenu.Add(new MenuButtonInfo
            {
                Caption = "Экспорт",
                Command = ExportSFCommand
            });
            prn.SubMenu.Add(new MenuButtonInfo
            {
                Caption = "Товарная накладная",
                Command = PrintWaybillCommand
            });

            prn.SubMenu.Add(new MenuButtonInfo
            {
                Caption = "Товарная накладная - экспорт",
                Command = PrintWaybillExportCommand
            });
        }


        private void CreateReports()
        {
            ReportManager.Reports.Add("Экспорт", new SFClientSchetFacturaReport(this)
            {
                PrintOptions = new KursReportA4PrintOptions(),
                ShowType = ReportShowType.Spreadsheet,
                XlsFileName = "SFClientViewModel"
            });
            ReportManager.Reports.Add("Счет", new SFClientSFSChet(this)
            {
                PrintOptions = new KursReportA4PrintOptions(),
                ShowType = ReportShowType.Report,
                XlsFileName = "Account2"
            });
            ReportManager.Reports.Add("Счет-фактура", new SFClientSchetFacturaReport(this)
            {
                PrintOptions = new KursReportLandscapeA4PrintOptions(),
                ShowType = ReportShowType.Report,
                XlsFileName = "SFClientViewModel"
            });
            ReportManager.Reports.Add("Заказ", new SFClientZakazReport(this)
            {
                PrintOptions = new KursReportLandscapeA4PrintOptions(),
                ShowType = ReportShowType.Report,
                XlsFileName = "Zakaz"
            });
            ReportManager.Reports.Add("Заказ без менеджера", new SFClientZakazReport(this)
            {
                IsManagerPrint = false,
                PrintOptions = new KursReportLandscapeA4PrintOptions(),
                ShowType = ReportShowType.Report,
                XlsFileName = "Zakaz"
            });

            ReportManager.Reports.Add("Заявка", new SFClientZajavkaSkladReport(this)
            {
                PrintOptions = new KursReportLandscapeA4PrintOptions(),
                ShowType = ReportShowType.Report,
                XlsFileName = "Zajavka"
            });
            ReportManager.Reports.Add("Заявка экспорт", new SFClientZajavkaSkladReport(this)
            {
                IsManagerPrint = false,
                PrintOptions = new KursReportLandscapeA4PrintOptions(),
                ShowType = ReportShowType.Spreadsheet,
                XlsFileName = "Zajavka"
            });

            ReportManager.Reports.Add("Торг12", new SFClientTorg12Report(this)
            {
                PrintOptions = new KursReportLandscapeA4PrintOptions
                {
                    FitToWidth = 1
                },
                ShowType = ReportShowType.Report,
                XlsFileName = "torg12"
            });
            ReportManager.Reports.Add("Торг12Экспорт", new SFClientTorg12Report(this)
            {
                PrintOptions = new KursReportLandscapeA4PrintOptions
                {
                    FitToWidth = 1
                },
                ShowType = ReportShowType.Spreadsheet,
                XlsFileName = "torg12"
            });
        }

        public override void RefreshData(object obj)
        {
            var dc = obj as decimal?;
            if (Document?.DocCode == -1 || dc == -1)
            {
                DocNewEmpty(null);
                return;
            }
            if (Document != null && Document.DocCode > 0)
            {
                Document = Manager.GetDocument(Document.DocCode);
                GetDefaultValue();
                return;
            }
            Document = Manager.GetDocument(obj as decimal?);
            GetDefaultValue();
        }

        public override void SaveData(object data)
        {
            Document.DocCode = Manager.SaveData(Document);
            RefreshData(null);
        }

        #region Справочники

        // ReSharper disable UnusedMember.Global
        public List<Kontragent> Kontragents => MainReferences.ActiveKontragents.Values.ToList();

        public List<CentrOfResponsibility> COList => MainReferences.COList.Values.ToList();
        public List<SD_189ViewModel> FormRaschets => MainReferences.FormRaschets.Values.ToList();
        public List<VzaimoraschetType> VzaimoraschetTypes => MainReferences.VzaimoraschetTypes.Values.ToList();
        public List<PayCondition> PayConditions => MainReferences.PayConditions.Values.ToList();
        public List<Country> Countries => MainReferences.Countries.Values.ToList();

        public List<NomenklViewModel> Nomenkls { get; }
        // ReSharper restore UnusedMember.Global

        #endregion

        #region Command

        public override void CloseWindow(object form)
        {
            if (IsCanSaveData)
            {
                var res = MessageBox.Show("В документ были внесены изменения, сохранить?", "Запрос",
                    MessageBoxButton.YesNoCancel,
                    MessageBoxImage.Question);
                switch (res)
                {
                    case MessageBoxResult.Yes:
                        SaveData(null);
                        break;
                    case MessageBoxResult.No:
                        base.CloseWindow(form);
                        break;
                    case MessageBoxResult.Cancel:
                        return;
                }
            }
            else
            {
                Form.Close();
            }
        }

        public ICommand DeleteRowCommand
        {
            get { return new Command(DeleteRow, param => true); }
        }

        private void DeleteRow(object obj)
        {
            if (CurrentRow != null)
                Document.DeletedRows.Add(CurrentRow);
            Document.Rows.Remove(CurrentRow);
        }

        public override void DocDelete(object obj)
        {
            Manager.Deleted(Document.DocCode);
            Form.Close();
        }

        public override void DocNewEmpty(object form)
        {
            Document = new SFClientViewModel
            {
                SF_DATE = DateTime.Today,
                SF_CRS_DC = 3010000002,
                SF_CRS_RATE = 1,
                REGISTER_DATE = DateTime.Today
            };
            Document.SummaOtgruz = 0;
            Document.State = RowStatus.NotEdited;
        }

        public override void DocNewCopyRequisite(object obj)
        {
            RefreshData(obj as decimal?);
            Document.Rows.Clear();
            Document.DocCode = -1;
            Document.SF_DATE = DateTime.Today;
            Document.State = RowStatus.NotEdited;
        }

        public override void DocNewCopy(object obj)
        {
            RefreshData(obj);
            Document.DocCode = -1;
            Document.State = RowStatus.NotEdited;
        }

        public Command AddNewRowCommand
        {
            get { return new Command(AddNewRow, param => true); }
        }

        private void AddNewRow(object obj)
        {
            var k = StandartDialogs.SelectNomenkls();
            if (k != null)
                foreach (var item in k)
                {
                    if (Document.Rows.Any(_ => _.SFT_NEMENKL_DC == item.DocCode)) continue;
                    decimal NDS;
                    if (item.NOM_NDS_PERCENT == null)
                        NDS = 0;
                    else
                        NDS = (decimal) item.NOM_NDS_PERCENT;
                    Document.Rows.Add(new SFClientRowViewModel
                    {
                        DOC_CODE = -1,
                        SFT_NEMENKL_DC = item.DOC_CODE,
                        SFT_NDS_PERCENT = (double) NDS
                    });
                }
        }

        public override bool IsRedoAllow
        {
            get => Document.DeletedRows != null && Document.DeletedRows.Count > 0;
            set => base.IsRedoAllow = value;
        }
        public ICommand PrintZajavkaCommand
        {
            get { return new Command(PrintZajavka, param => true); }
        }

        private void PrintZajavka(object obj)
        {
            ReportManager.Reports["Заявка"].Show();
        }

        public ICommand PrintZajavkaExportCommand
        {
            get { return new Command(PrintZajavkaExport, param => true); }
        }

        private void PrintZajavkaExport(object obj)
        {
            ReportManager.Reports["Заявка экспорт"].Show();
        }

        public Command PrintWaybillExportCommand
        {
            get { return new Command(PrintWaybillExport, param => true); }
        }

        private void PrintWaybillExport(object obj)
        {
            ReportManager.Reports["Торг12Экспорт"].Show();
        }

        public Command PrintWaybillCommand
        {
            get { return new Command(PrintWaybill, param => true); }
        }

        private void PrintWaybill(object obj)
        {
            ReportManager.Reports["Торг12"].Show();
        }

        public Command ExportSFCommand
        {
            get { return new Command(ExportSF, param => true); }
        }

        public void ExportSF(object obj)
        {
            ReportManager.Reports["Экспорт"].Show();
        }

        public Command PrintSFSchetCommand
        {
            get { return new Command(PrintSChet, param => true); }
        }

        public void PrintSChet(object obj)
        {
            ReportManager.Reports["Счет"].Show();
        }


        public Command PrintSFSchetExportCommand
        {
            get { return new Command(PrintSChetExport, param => true); }
        }

        public void PrintSChetExport(object obj)
        {
            ReportManager.Reports["Счет"].ShowSpreadsheet();
        }


        public Command PrintZakazCommand
        {
            get { return new Command(PrintZakaz, param => true); }
        }

        public Command PrintZakazWOManagerCommand
        {
            get { return new Command(PrintZakazWOManager, param => true); }
        }

        public void PrintZakaz(object obj)
        {
            ReportManager.Reports["Заказ"].Show();
        }

        public void PrintZakazWOManager(object obj)
        {
            ReportManager.Reports["Заказ без менеджера"].Show();
        }

        public Command PrintSFCommand
        {
            get { return new Command(PrintSF, param => true); }
        }

        public void PrintSF(object obj)
        {
            ReportManager.Reports["Счет-фактура"].Show();
        }

        public override void ResetLayout(object form)
        {
            var frm = form as SFClientView;
            frm?.LayoutManager.ResetLayout();
        }

        #endregion
    }
}