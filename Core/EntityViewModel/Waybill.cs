using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Windows.Controls;
using Core.Helper;
using Core.ViewModel.Base;
using Core.ViewModel.Common;
using Data;
using DevExpress.Mvvm.DataAnnotations;
using ServiceStack;

namespace Core.EntityViewModel
{
    /// <summary>
    ///     Расходная накладная
    /// </summary>
    [MetadataType(typeof(Waybill_FluentAPI))]
    public class Waybill : SD_24ViewModel, IDocument<Waybill>
    {
        private Kontragent myClient;

        private Warehouse myStore;

        public Waybill()
        {
            Rows = new ObservableCollection<WaybillRow>();
            Rows.CollectionChanged += (o, args) => State = RowStatus.Edited;
            DeletedRows = new List<WaybillRow>();
        }

        public Waybill(SD_24 entity) : base(entity)
        {
            Rows = new ObservableCollection<WaybillRow>();
            Rows.CollectionChanged += (o, args) => State = RowStatus.Edited;
            DeletedRows = new List<WaybillRow>();
            if (entity != null)
            {
                InvoiceClient = new InvoiceClient(entity.SD_84);
                Client = MainReferences.GetKontragent(entity.DD_KONTR_POL_DC);
                if (entity.DD_SKLAD_OTPR_DC != null)
                    Store = MainReferences.Warehouses[entity.DD_SKLAD_OTPR_DC.Value];
                if (entity.TD_24.Count > 0)
                    foreach (var row in entity.TD_24)
                        Rows.Add(new WaybillRow(row));
            }
        }

        public Warehouse Store
        {
            get => myStore;
            set
            {
                if (myStore != null && myStore.Equals(value)) return;
                myStore = value;
                DD_SKLAD_OTPR_DC = myStore?.DocCode;
                RaisePropertyChanged();
            }
        }
        public Kontragent Client
        {
            get => myClient;
            set
            {
                if (myClient != null && myClient.Equals(value)) return;
                myClient = value;
                DD_KONTR_POL_DC = myClient?.DocCode;
                RaisePropertyChanged();
            }
        }
        
        public ObservableCollection<WaybillRow> Rows { set; get; }
        public List<WaybillRow> DeletedRows { set; get; }
        public override decimal DocCode
        {
            get => Entity.DOC_CODE;
            set
            {
                if (Entity.DOC_CODE == value) return;
                Entity.DOC_CODE = value;
                RaisePropertyChanged();
            }
        }
        public override string Name =>
            $"№{Entity.DD_IN_NUM}/{Entity.DD_EXT_NUM} от {Entity.DD_DATE.ToShortDateString()} Склад-{WarehouseOut?.Name} Получатель-{KontragentReceiver?.Name}";
       
        public void RefreshData()
        {
            throw new NotImplementedException();
        }

        public new void Save()
        {
            throw new NotImplementedException();
        }

        public bool IsCanSave { get; set; }

        public bool Check()
        {
            throw new NotImplementedException();
        }

        public Waybill NewDocument()
        {
            throw new NotImplementedException();
        }

        public Waybill CopyDocument()
        {
            throw new NotImplementedException();
        }

        public Waybill CopyRequisite()
        {
            throw new NotImplementedException();
        }

        public void UnDeleteRows()
        {
            throw new NotImplementedException();
        }

        public Waybill Document { get; set; }
    }

    public class Waybill_FluentAPI : DataAnnotationForFluentApiBase, IMetadataProvider<Waybill>
    {
        void IMetadataProvider<Waybill>.BuildMetadata(
            MetadataBuilder<Waybill> builder)
        {
            SetNotAutoGenerated(builder);
            builder.Property(x => x.DocumentType).NotAutoGenerated();
            builder.Property(x => x.Document).NotAutoGenerated();
            builder.Property(x => x.KontragentSender).NotAutoGenerated();
            builder.Property(x => x.KontragentReceiver).NotAutoGenerated();
            builder.Property(x => x.OutOnWarehouse).NotAutoGenerated();
            builder.Property(x => x.InFromWarehouse).NotAutoGenerated();
            builder.Property(x => x.WarehouseIn).NotAutoGenerated();
            builder.Property(x => x.Period).NotAutoGenerated();
            builder.Property(x => x.InvoiceProvider).NotAutoGenerated();
            builder.Property(x => x.Store).NotAutoGenerated();
            builder.Property(x => x.Kladovshik).NotAutoGenerated();

            builder.Property(x => x.InvoiceClient).AutoGenerated().DisplayName("Счет");
            builder.Property(x => x.DD_IN_NUM).AutoGenerated()
                .DisplayName("№");
            builder.Property(x => x.DD_DATE).AutoGenerated()
                .DisplayName("Дата");
            builder.Property(x => x.CREATOR).AutoGenerated()
                .DisplayName("Создатель");
            builder.Property(x => x.WarehouseOut).AutoGenerated().DisplayName("Со склада");
            builder.Property(x => x.Client).AutoGenerated().DisplayName("Контрагент");
            builder.Property(x => x.Receiver).NotAutoGenerated();
            builder.Property(x => x.State).AutoGenerated().DisplayName("Статус");
            builder.Property(x => x.DD_NOTES).AutoGenerated().DisplayName("Примечания");
            builder.Property(x => x.DD_KOMU_PEREDANO).AutoGenerated().DisplayName("Через кого");

            #region Form Layout

            // @formatter:off
            builder.DataFormLayout()
                .Group("1",Orientation.Horizontal)
                    .ContainsProperty(_ => _.DD_IN_NUM)
                    .ContainsProperty(_ => _.DD_DATE)
                    .ContainsProperty(_ => _.CREATOR)
                    .ContainsProperty(_ => _.State)
                .EndGroup()
                .Group("2",Orientation.Vertical)
                    .ContainsProperty(_ => _.WarehouseOut)
                    .ContainsProperty(_ => _.Client)
                    .ContainsProperty(_ => _.Receiver)
                .EndGroup()
                .ContainsProperty(_ => _.DD_SCHET)
                .Group("3",Orientation.Vertical)
                    .ContainsProperty(_ => _.DD_KOMU_PEREDANO)
                    .ContainsProperty(_ => _.DD_NOTES)
                .EndGroup();
            // @formatter:on

            #endregion
        }
    }
}