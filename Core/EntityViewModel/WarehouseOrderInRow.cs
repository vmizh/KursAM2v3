using System.ComponentModel.DataAnnotations;
using System.Data.Entity.Core.Metadata.Edm;
using System.Linq;
using Core.Helper;
using Data;
using DevExpress.Mvvm.DataAnnotations;

namespace Core.EntityViewModel
{
    /// <summary>
    ///     Приходный складской ордер - строка
    /// </summary>
    [MetadataType(typeof(DataAnnotationsWarehouseStorageOrderInRow))]
    public class WarehouseOrderInRow : TD_24ViewModel
    {
        private InvoiceProviderRow myLinkInvoice;
        private WarehouseOrderOutRow myLinkOrder;

        public WarehouseOrderInRow()
        {
        }

        public WarehouseOrderInRow(TD_24 entity) : base(entity)
        {
            if(entity.DDT_SPOST_DC != null)
                LinkInvoice = new InvoiceProviderRow(entity.TD_26);
            if (entity.DDT_RASH_ORD_DC != null)
            {
                var rash = entity.TD_241.FirstOrDefault(_ =>
                    _.DDT_RASH_ORD_DC == entity.DDT_RASH_ORD_DC && _.DDT_RASH_ORD_CODE == entity.DDT_RASH_ORD_CODE);
                if(rash != null)
                    LinkOrder = new WarehouseOrderOutRow(rash);
            }
        }

        public string NomNomenkl => Nomenkl.NOM_NOMENKL;
        public bool Taksirovka => DDT_TAX_EXECUTED == 1;
        public bool Factur => DDT_FACT_EXECUTED == 1;
        public string LinkDocument => LinkInvoice?.ToString() ?? LinkOrder?.ToString();
        public InvoiceProviderRow LinkInvoice
        {
            get => myLinkInvoice;
            set
            {
                if (myLinkInvoice != null && myLinkInvoice.Equals(value)) return;
                myLinkInvoice = value;
                RaisePropertyChanged();
            }
        }
        public WarehouseOrderOutRow LinkOrder
        {
            get => myLinkOrder;
            set
            {
                if (myLinkOrder != null && myLinkOrder.Equals(value)) return;
                myLinkOrder = value;
                RaisePropertyChanged();
            }
        }
    }

    public class DataAnnotationsWarehouseStorageOrderInRow : DataAnnotationForFluentApiBase,
        IMetadataProvider<WarehouseOrderInRow>
    {
        void IMetadataProvider<WarehouseOrderInRow>.BuildMetadata(
            MetadataBuilder<WarehouseOrderInRow> builder)
        {
            SetNotAutoGenerated(builder);
            builder.Property(_ => _.InvoiceProviderRow).NotAutoGenerated();
            builder.Property(_ => _.Currency).NotAutoGenerated();
            builder.Property(_ => _.Diler).NotAutoGenerated();
            builder.Property(_ => _.LinkInvoice).NotAutoGenerated();
            builder.Property(_ => _.InvoiceProvider).NotAutoGenerated();
            builder.Property(_ => _.LinkOrder).NotAutoGenerated();
            builder.Property(_ => _.Parent).NotAutoGenerated();
            builder.Property(_ => _.LinkDocument).AutoGenerated().DisplayName("Счет-фактура/ордер");
            builder.Property(_ => _.NomNomenkl).AutoGenerated().DisplayName("Номенклатурный номер");
            builder.Property(_ => _.Nomenkl).AutoGenerated().DisplayName("Наименование материала");
            builder.Property(_ => _.DDT_KOL_PRIHOD).AutoGenerated().DisplayName("Кол-во поставки");
            builder.Property(_ => _.Unit).AutoGenerated().DisplayName("Ед.изм");
            builder.Property(_ => _.Taksirovka).AutoGenerated().DisplayName("Таксировка выполнена");
            builder.Property(_ => _.Factur).AutoGenerated().DisplayName("Фактурирование выполнено");
            builder.Property(_ => _.SDRSchet).AutoGenerated().DisplayName("Счет дох./расх.");
        }
    }
}