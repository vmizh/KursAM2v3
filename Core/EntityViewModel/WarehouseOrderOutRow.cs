using System.ComponentModel.DataAnnotations;
using Core.Helper;
using Data;
using DevExpress.Mvvm.DataAnnotations;

namespace Core.EntityViewModel
{
    /// <summary>
    ///     Расходный складской ордер - строка
    /// </summary>
    [MetadataType(typeof(DataAnnotationsWarehouseStorageOrderOutRow))]
    public class WarehouseOrderOutRow : TD_24ViewModel
    {
        private decimal myMaxQuantity;

        public WarehouseOrderOutRow()
        {
        }

        public WarehouseOrderOutRow(TD_24 entity) : base(entity)
        {
        }

        public string NomNomenkl => Nomenkl.NOM_NOMENKL;
        public bool Taksirovka => DDT_TAX_EXECUTED == 1;
        public bool Factur => DDT_FACT_EXECUTED == 1;
        public decimal MaxQuantity
        {
            get => myMaxQuantity;
            set
            {
                if (myMaxQuantity == value) return;
                myMaxQuantity = value;
                RaisePropertyChanged();
            }
        }
        public decimal Quantity
        {
            get => DDT_KOL_RASHOD;
            set
            {
                if (DDT_KOL_RASHOD == value) return;
                DDT_KOL_RASHOD = value;
                RaisePropertyChanged();
            }
        }

        public override string ToString()
        {
            if (Entity.SD_24 != null)
                return $"Расх.ордер № {Entity.SD_24.DD_IN_NUM} от {Entity.SD_24.DD_DATE.ToShortDateString()}";
            return "";
        }
    }

    public class DataAnnotationsWarehouseStorageOrderOutRow : DataAnnotationForFluentApiBase,
        IMetadataProvider<WarehouseOrderOutRow>
    {
        void IMetadataProvider<WarehouseOrderOutRow>.BuildMetadata(
            MetadataBuilder<WarehouseOrderOutRow> builder)
        {
            SetNotAutoGenerated(builder);
            builder.Property(_ => _.Currency).NotAutoGenerated();
            builder.Property(_ => _.Diler).NotAutoGenerated();
            builder.Property(_ => _.InvoiceProvider).NotAutoGenerated();
            builder.Property(_ => _.InvoiceProviderRow).NotAutoGenerated();
            builder.Property(_ => _.NomNomenkl).AutoGenerated().DisplayName("Номенклатурный номер").ReadOnly();
            builder.Property(_ => _.Nomenkl).AutoGenerated().DisplayName("Наименование материала").ReadOnly();
            builder.Property(_ => _.Quantity).AutoGenerated().DisplayName("Кол-во отгрузка");
            builder.Property(_ => _.Unit).AutoGenerated().DisplayName("Ед.изм.").ReadOnly();
            builder.Property(_ => _.MaxQuantity).AutoGenerated().DisplayName("Максимально").ReadOnly();
            builder.Property(_ => _.SDRSchet).AutoGenerated().DisplayName("Счет дох/расх");
            builder.Property(_ => _.Taksirovka).NotAutoGenerated();
            builder.Property(_ => _.Factur).NotAutoGenerated();
        }
    }
}