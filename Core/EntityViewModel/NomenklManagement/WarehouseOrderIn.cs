using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics.CodeAnalysis;
using System.Windows.Controls;
using Core.EntityViewModel.Invoices;
using Core.Helper;
using Data;
using DevExpress.Mvvm.DataAnnotations;

namespace Core.EntityViewModel.NomenklManagement
{
    /// <summary>
    ///     Приходный складской ордер - заголовок
    /// </summary>
    [MetadataType(typeof(DataAnnotationsWarehouseStorageOrder))]
    [SuppressMessage("ReSharper", "UnusedAutoPropertyAccessor.Global")]
    public class WarehouseOrderIn : SD_24ViewModel
    {
        private WarehouseSenderType myWarehouseSenderType;

        public WarehouseOrderIn()
        {
        }

        public WarehouseOrderIn(SD_24 entity) : base(entity)
        {
            biling = new ObservableCollection<InvoiceProviderRow>();
            if (Entity.DD_SKLAD_POL_DC != null)
                WarehouseIn = MainReferences.Warehouses[Entity.DD_SKLAD_POL_DC.Value];
            if (Entity.DD_KONTR_OTPR_DC != null)
                KontragentSender = MainReferences.GetKontragent(Entity.DD_KONTR_OTPR_DC);
            if (Entity.DD_SKLAD_OTPR_DC != null)
                WarehouseOut = MainReferences.Warehouses[Entity.DD_SKLAD_OTPR_DC.Value];
            if (WarehouseOut != null)
                WarehouseSenderType = WarehouseSenderType.Store;
            if (KontragentSender != null)
                WarehouseSenderType = WarehouseSenderType.Kontragent;
            var rtemp = new List<WarehouseOrderInRow>();
            if (entity.TD_24 != null && entity.TD_24.Count != 0)
                foreach (var item in entity.TD_24)
                    rtemp.Add(new WarehouseOrderInRow(item) {Parent = this});
            Rows = new ObservableCollection<WarehouseOrderInRow>(rtemp);
        }

        public ObservableCollection<WarehouseOrderInRow> Rows { set; get; } =
            new();

        public ObservableCollection<InvoiceProviderRow> biling { set; get; } =
            new();

        public ObservableCollection<WarehouseOrderInRow> SelectedRows { set; get; } =
            new();

        public ObservableCollection<WarehouseOrderInRow> DeletedRows { set; get; } =
            new();

        public override string Description =>
            $"Приходный складской ордер №{DD_IN_NUM}/{DD_EXT_NUM} от {Date.ToShortDateString()} " +
            $"на склад {WarehouseOut} от {KontragentSender} {Note}";

        public WarehouseSenderType WarehouseSenderType
        {
            get => myWarehouseSenderType;
            set
            {
                if (myWarehouseSenderType == value) return;
                myWarehouseSenderType = value;
                RaisePropertyChanged();
            }
        }

        public override string ToString()
        {
            return
                $"Приходный складcкой ордер №{DD_IN_NUM}/{DD_EXT_NUM} от {Date} отправит.:{Sender} склад:{WarehouseIn}";
        }
    }

    public class DataAnnotationsWarehouseStorageOrder : DataAnnotationForFluentApiBase,
        IMetadataProvider<WarehouseOrderIn>
    {
        void IMetadataProvider<WarehouseOrderIn>.BuildMetadata(
            MetadataBuilder<WarehouseOrderIn> builder)
        {
            SetNotAutoGenerated(builder);
            builder.Property(_ => _.DocumentType).NotAutoGenerated();
            builder.Property(_ => _.WarehouseOut).NotAutoGenerated();
            builder.Property(_ => _.KontragentSender).NotAutoGenerated();
            builder.Property(_ => _.KontragentReceiver).NotAutoGenerated();
            builder.Property(_ => _.DocumentType).NotAutoGenerated();
            builder.Property(_ => _.Kladovshik).NotAutoGenerated();
            builder.Property(_ => _.OutOnWarehouse).NotAutoGenerated();
            builder.Property(_ => _.InFromWarehouse).NotAutoGenerated();
            builder.Property(_ => _.Period).NotAutoGenerated();
            builder.Property(_ => _.InvoiceProvider).NotAutoGenerated();
            builder.Property(_ => _.InvoiceClient).NotAutoGenerated();
            builder.Property(_ => _.DD_IN_NUM).AutoGenerated().DisplayName("Номер");
            builder.Property(_ => _.DD_EXT_NUM).AutoGenerated().DisplayName("Внешний номер");
            builder.Property(_ => _.Date).AutoGenerated().DisplayName("Дата");
            builder.Property(_ => _.IsVozvrat).AutoGenerated().DisplayName("Возврат");
            builder.Property(_ => _.WarehouseSenderType).AutoGenerated().DisplayName("Тип отправителя");
            builder.Property(_ => _.Sender).AutoGenerated().DisplayName("Отправитель");
            builder.Property(_ => _.WarehouseIn).AutoGenerated().DisplayName("Склад");
            builder.Property(_ => _.DD_SCHET).AutoGenerated().DisplayName("Счет").MaxLength(50);
            builder.Property(_ => _.DD_OT_KOGO_POLUCHENO).AutoGenerated().DisplayName("Через кого");
            builder.Property(x => x.State).AutoGenerated()
                .DisplayName("Статус");
            builder.Property(x => x.CREATOR).AutoGenerated()
                .DisplayName("Создатель");

            #region Form Layout

            // @formatter:off
            builder.DataFormLayout()
                .Group("1",Orientation.Horizontal)
                    .ContainsProperty(_ => _.DD_IN_NUM)
                    .ContainsProperty(_ => _.Date)
                    .ContainsProperty(_ => _.DD_EXT_NUM)
                    .ContainsProperty(_ => _.CREATOR)
                    .ContainsProperty(_ => _.State)
                .EndGroup()
                .Group("2",Orientation.Horizontal)
                    .ContainsProperty(_ => _.WarehouseSenderType)
                    .ContainsProperty(_ => _.Sender)
                .EndGroup()
                .Group("3",Orientation.Horizontal)
                    .ContainsProperty(_ => _.WarehouseIn)
                    .ContainsProperty(_ => _.IsVozvrat)
                .EndGroup()
                .ContainsProperty(_ => _.DD_SCHET)
                .ContainsProperty(_ => _.DD_OT_KOGO_POLUCHENO)
                .ContainsProperty(_ => _.Note);
            // @formatter:on

            #endregion

            #region Table Layout

            // @formatter:off
            //builder..TableLayout().Group("Основные данные")
            //    .ContainsProperty(_ => _.DD_IN_NUM)
            //    .ContainsProperty(_ => _.DD_EXT_NUM)
            //    .ContainsProperty(_ => _.DD_DATE)
            //    .ContainsProperty(_ => _.IsVozvrat)
            //    .ContainsProperty(_ => _.WarehouseSenderType)
            //    .ContainsProperty(_ => _.Sender)
            //    .ContainsProperty(_ => _.WarehouseIn)
            //    .ContainsProperty(_ => _.DD_SCHET)
            //    .ContainsProperty(_ => _.DD_OT_KOGO_POLUCHENO)
            //    .ContainsProperty(x => x.State)
            //    .ContainsProperty(x => x.CREATOR);
            // @formatter:on

            #endregion
        }
    }
}