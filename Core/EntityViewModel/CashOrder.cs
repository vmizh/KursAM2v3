using System;
using System.ComponentModel.DataAnnotations;
using Core.Helper;
using Core.ViewModel.Base;
using Data;
using DevExpress.Mvvm.DataAnnotations;
using static Core.MainReferences;

namespace Core.EntityViewModel
{
    [MetadataType(typeof(CashOrderLayout_FluentAPI))]
    public class CashOrder : RSViewModelBase
    {
        #region Fields

        #endregion

        #region Constructors

        public CashOrder(SD_33 order)
        {
            DocCode = order.DOC_CODE;
            NumOrder = order.NUM_ORD.ToString();
            Currency = Currencies[(decimal) order.CRS_DC];
            Cash = Cashs[(decimal) order.CA_DC];
            Creator = order.CREATOR;
            DateOrder = (DateTime) order.DATE_ORD;
            NameOrder = order.NAME_ORD;
            Note = order.NOTES_ORD;
            OSNOrder = order.OSN_ORD;
            SummaOrder = (decimal) order.SUMM_ORD;
            TypeOrder = "Приходный кассовый ордер";
            Kontragent = order.KONTRAGENT_DC != null
                ? GetKontragent(order.KONTRAGENT_DC).Name
                : order.RASH_ORDER_FROM_DC != null && order.SD_34 != null
                    ? Cashs[(decimal) order.SD_34.CA_DC].Name
                    : order.BANK_RASCH_SCHET_DC != null
                        ? BankAccounts[(decimal) order.BANK_RASCH_SCHET_DC].Name
                        : null;
        }

        public override string ToString()
        {
            return $"{TypeOrder} №{NumOrder} от {DateOrder} Контрагент: {Kontragent} сумма: {SummaOrder} {Currency}";
        }

        public CashOrder(SD_34 order)
        {
            DocCode = order.DOC_CODE;
            NumOrder = order.NUM_ORD.ToString();
            Currency = Currencies[(decimal) order.CRS_DC];
            Cash = Cashs[(decimal) order.CA_DC];
            Creator = order.CREATOR;
            DateOrder = (DateTime) order.DATE_ORD;
            NameOrder = order.NAME_ORD;
            Note = order.NOTES_ORD;
            OSNOrder = order.OSN_ORD;
            SummaOrder = (decimal) order.SUMM_ORD;
            TypeOrder = "Расходный кассовый ордер";
            Kontragent = order.KONTRAGENT_DC != null
                ? GetKontragent(order.KONTRAGENT_DC).Name
                : order.CASH_TO_DC != null
                    ? Cashs[(decimal) order.CASH_TO_DC].Name
                    : order.BANK_RASCH_SCHET_DC != null
                        ? BankAccounts[(decimal) order.BANK_RASCH_SCHET_DC].Name
                        : null;
        }

        #endregion

        #region Properties

        public string TypeOrder { set; get; }
        public Cash Cash { set; get; }
        public Currency Currency { set; get; }
        public string NumOrder { set; get; }
        public DateTime DateOrder { set; get; }
        public decimal SummaOrder { set; get; }
        public string OSNOrder { set; get; }
        public string NameOrder { set; get; }
        public string Creator { set; get; }
        public string Kontragent { set; get; }

        #endregion

        #region Commands

        #endregion
    }

    public class CashOrderLayout_FluentAPI : DataAnnotationForFluentApiBase,
        IMetadataProvider<CashOrder>
    {
        void IMetadataProvider<CashOrder>.BuildMetadata(
            MetadataBuilder<CashOrder> builder)
        {
            SetNotAutoGenerated(builder);
            builder.Property(_ => _.TypeOrder).AutoGenerated().DisplayName("Документ");
            builder.Property(_ => _.Cash).AutoGenerated().DisplayName("Касса");
            builder.Property(_ => _.NumOrder).AutoGenerated().DisplayName("№");
            builder.Property(_ => _.DateOrder).AutoGenerated().DisplayName("Дата");
            builder.Property(_ => _.SummaOrder).AutoGenerated().DisplayName("Сумма");
            builder.Property(_ => _.Currency).AutoGenerated().DisplayName("Валюта");
            builder.Property(_ => _.OSNOrder).AutoGenerated().DisplayName("Основание");
            builder.Property(_ => _.NameOrder).AutoGenerated().DisplayName("Имя");
            builder.Property(_ => _.Note).AutoGenerated().DisplayName("Примечания");
            builder.Property(_ => _.Creator).AutoGenerated().DisplayName("Создатель");
        }
    }
}