using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Core.Helper;
using Core.ViewModel.Base;
using Data;
using DevExpress.Mvvm.DataAnnotations;

// ReSharper disable InconsistentNaming
namespace Core.EntityViewModel
{
    /// <summary>
    ///     Условие оплаты SD_179
    /// </summary>
    [MetadataType(typeof(UsagePay_FluentAPI))]
    public class PayCondition : RSViewModelBase, IEntity<SD_179>
    {
        private SD_179 myEntity;

        public PayCondition()
        {
            Entity = DefaultValue();
        }

        public PayCondition(SD_179 entity)
        {
            Entity = entity ?? DefaultValue();
        }

        public decimal DOC_CODE
        {
            get => Entity.DOC_CODE;
            set
            {
                if (Entity.DOC_CODE == value) return;
                Entity.DOC_CODE = value;
                RaisePropertyChanged();
            }
        }

        public override decimal DocCode
        {
            get => Entity.DOC_CODE;
            set
            {
                if (Entity.DOC_CODE == value) return;
                Entity.DOC_CODE = value;
                RaisePropertyChanged();
            }
        }

        public string PT_NAME
        {
            get => Entity.PT_NAME;
            set
            {
                if (Entity.PT_NAME == value) return;
                Entity.PT_NAME = value;
                RaisePropertyChanged();
            }
        }

        public override string Name
        {
            get => Entity.PT_NAME;
            set
            {
                if (Entity.PT_NAME == value) return;
                Entity.PT_NAME = value;
                RaisePropertyChanged();
            }
        }

        public short? DEFAULT_VALUE
        {
            get => Entity.DEFAULT_VALUE;
            set
            {
                if (Entity.DEFAULT_VALUE == value) return;
                Entity.DEFAULT_VALUE = value;
                RaisePropertyChanged();
            }
        }

        public double? PT_DAYS_OPL
        {
            get => Entity.PT_DAYS_OPL;
            set
            {
                if (Entity.PT_DAYS_OPL == value) return;
                Entity.PT_DAYS_OPL = value;
                RaisePropertyChanged();
            }
        }

        public SD_179 Entity
        {
            get => myEntity;
            set
            {
                if (myEntity == value) return;
                myEntity = value;
                RaisePropertyChanged();
            }
        }

        public EntityLoadCodition LoadCondition { get; set; }

        public List<SD_179> LoadList()
        {
            throw new NotImplementedException();
        }

        public bool IsAccessRight { get; set; }

        public SD_179 Load(Guid id)
        {
            throw new NotImplementedException();
        }

        public virtual void Save(SD_179 doc)
        {
            throw new NotImplementedException();
        }

        public void Save()
        {
            throw new NotImplementedException();
        }

        public void Delete()
        {
            throw new NotImplementedException();
        }

        public void Delete(Guid id)
        {
            throw new NotImplementedException();
        }

        public void Delete(decimal dc)
        {
            throw new NotImplementedException();
        }

        public void UpdateFrom(SD_179 ent)
        {
            PT_NAME = ent.PT_NAME;
            DEFAULT_VALUE = ent.DEFAULT_VALUE;
            PT_DAYS_OPL = ent.PT_DAYS_OPL;
        }

        public void UpdateTo(SD_179 ent)
        {
            ent.PT_NAME = PT_NAME;
            ent.DEFAULT_VALUE = DEFAULT_VALUE;
            ent.PT_DAYS_OPL = PT_DAYS_OPL;
        }

        public SD_179 DefaultValue()
        {
            return new SD_179
            {
                DOC_CODE = -1
            };
        }

        public virtual SD_179 Load(decimal dc, bool isShort = true)
        {
            throw new NotImplementedException();
        }

        public virtual SD_179 Load(Guid id, bool isShort = true)
        {
            throw new NotImplementedException();
        }

        public SD_179 Load(decimal dc)
        {
            throw new NotImplementedException();
        }
    }

    public class UsagePay_FluentAPI : DataAnnotationForFluentApiBase, IMetadataProvider<PayCondition>
    {
        void IMetadataProvider<PayCondition>.BuildMetadata(
            MetadataBuilder<PayCondition> builder)
        {
            SetNotAutoGenerated(builder);
            builder.Property(x => x.Name).AutoGenerated()
                .DisplayName("Наименование");
            builder.Property(x => x.PT_DAYS_OPL).AutoGenerated()
                .DisplayName("Дней на оплату").DisplayFormatString("n0");
        }
    }
}