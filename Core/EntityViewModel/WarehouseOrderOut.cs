using System;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Windows.Controls;
using Core.Helper;
using Core.ViewModel.Base;
using Data;
using DevExpress.Mvvm.DataAnnotations;

namespace Core.EntityViewModel
{
    /// <summary>
    ///     Расходный складской ордер
    /// </summary>
    [MetadataType(typeof(DataAnnotationsWarehouseStorageOrderOut))]
    public class WarehouseOrderOut : SD_24ViewModel
    {
        //public string Receiver => KontragentReceiver != null ? KontragentReceiver.Name : WarehouseIn?.Name;
        private WarehouseSenderType myWarehouseSenderType;

        public WarehouseOrderOut()
        {
            Entity.DD_DATE = DateTime.Today;
            Entity.DD_TYPE_DC = 2010000003;
            Id = Guid.NewGuid();
            State = RowStatus.NewRow;
            CREATOR = GlobalOptions.UserInfo.NickName;
        }

        public WarehouseOrderOut(SD_24 entity) : base(entity)
        {
            Entity = entity;
            var data = Entity.TD_24;
            if (data != null && data.Count != 0)
                foreach (var item in data)
                {
                    var r = new WarehouseOrderOutRow(item) {Parent = this};
                    Rows.Add(r);
                }

            myState = RowStatus.NotEdited;
            foreach (var r in Rows) r.myState = RowStatus.NotEdited;
            Rows.CollectionChanged += (o, args) => State = RowStatus.Edited;
        }

        public ObservableCollection<WarehouseOrderOutRow> Rows { set; get; } =
            new ObservableCollection<WarehouseOrderOutRow>();

        public ObservableCollection<WarehouseOrderOutRow> DeletedRows { get; set; } =
            new ObservableCollection<WarehouseOrderOutRow>();

        public ObservableCollection<WarehouseOrderOutRow> SelectedRows { get; set; } =
            new ObservableCollection<WarehouseOrderOutRow>();

        public WarehouseSenderType WarehouseSenderType
        {
            get => myWarehouseSenderType;
            set
            {
                if (myWarehouseSenderType == value) return;
                myWarehouseSenderType = value;
                RaisePropertyChanged();
            }
        }

        public override string ToString()
        {
            return
                $"Расходный складской ордер №{DD_IN_NUM}/{DD_EXT_NUM} от {DD_DATE.ToShortDateString()} склад:{WarehouseOut}";
        }
    }

    public class DataAnnotationsWarehouseStorageOrderOut : DataAnnotationForFluentApiBase,
        IMetadataProvider<WarehouseOrderOut>
    {
        void IMetadataProvider<WarehouseOrderOut>.BuildMetadata(
            MetadataBuilder<WarehouseOrderOut> builder)
        {
            SetNotAutoGenerated(builder);
            builder.Property(_ => _.OutOnWarehouse).NotAutoGenerated();
            builder.Property(_ => _.InFromWarehouse).NotAutoGenerated();
            builder.Property(_ => _.KontragentSender).NotAutoGenerated();
            builder.Property(_ => _.WarehouseSenderType).NotAutoGenerated();
            builder.Property(_ => _.DocumentType).NotAutoGenerated();
            builder.Property(_ => _.KontragentReceiver).NotAutoGenerated();
            builder.Property(_ => _.Period).NotAutoGenerated();
            builder.Property(_ => _.InvoiceProvider).NotAutoGenerated();
            builder.Property(_ => _.InvoiceClient).NotAutoGenerated();
            builder.Property(_ => _.DD_IN_NUM).AutoGenerated().DisplayName("Номер");
            builder.Property(_ => _.DD_DATE).AutoGenerated().DisplayName("Дата");
            builder.Property(_ => _.Kladovshik).AutoGenerated().DisplayName("Кладовщик");
            builder.Property(_ => _.CREATOR).AutoGenerated().DisplayName("Создатель");
            builder.Property(_ => _.WarehouseOut).AutoGenerated().DisplayName("Склад-отправитель");
            builder.Property(_ => _.WarehouseIn).AutoGenerated().DisplayName("Склад-получатель");
            builder.Property(_ => _.DD_OT_KOGO_POLUCHENO).AutoGenerated().DisplayName("Через кого");
            builder.Property(x => x.State).AutoGenerated().DisplayName("Статус");

            #region Form Layout

            // @formatter:off
            builder.DataFormLayout()
                .Group("1", Orientation.Horizontal)
                    .ContainsProperty(_ => _.DD_IN_NUM)
                    .ContainsProperty(_ => _.DD_DATE)
                    .ContainsProperty(_ => _.CREATOR)
                    .ContainsProperty(_ => _.State)
                .EndGroup()
                .Group("g2")
                    .ContainsProperty(_ => _.WarehouseOut)
                    .ContainsProperty(_ => _.WarehouseIn)
                .EndGroup()
                .ContainsProperty(_ => _.DD_OT_KOGO_POLUCHENO)
                .ContainsProperty(_ => _.Note);
            // @formatter:on

            #endregion

            #region Table Layout

            // @formatter:off
            //builder.TableLayout().Group("Main")
            //    .ContainsProperty(_ => _.DD_IN_NUM)
            //    .ContainsProperty(_ => _.DD_DATE)
            //    .ContainsProperty(_ => _.WarehouseOut)
            //    .ContainsProperty(_ => _.WarehouseIn)
            //    .ContainsProperty(_ => _.DD_OT_KOGO_POLUCHENO)
            //    .ContainsProperty(x => x.State)
            //    .ContainsProperty(x => x.CREATOR);
            // @formatter:on

            #endregion
        }
    }
}