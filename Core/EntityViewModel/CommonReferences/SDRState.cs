using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Core.Helper;
using Core.Invoices.EntityViewModel;
using Core.ViewModel.Base;
using Data;
using DevExpress.Mvvm.DataAnnotations;

namespace Core.EntityViewModel.CommonReferences
{
    [MetadataType(typeof(DataAnnotationsSDRState))]
    public class SDRState : RSViewModelBase, IEntity<SD_99>
    {
        private string myShifr;
        private SD_99 myEntity;

        public SDRState()
        {
            Entity = DefaultValue();
        }

        public SDRState(SD_99 entity)
        {
            Entity = entity ?? DefaultValue();
        }

        public SD_99 Entity
        {
            get => myEntity;
            set
            {
                if (myEntity == value) return;
                myEntity = value;
                RaisePropertyChanged();
            }
        }

        public string SZ_SHIFR
        {
            get => Entity.SZ_SHIFR;
            set
            {
                if (Entity.SZ_SHIFR == value) return;
                Entity.SZ_SHIFR = value;
                RaisePropertyChanged();
            }
        }

        public decimal? SZ_PARENT_DC
        {
            get => Entity.SZ_PARENT_DC;
            set
            {
                if (Entity.SZ_PARENT_DC == value) return;
                Entity.SZ_PARENT_DC = value;
                RaisePropertyChanged();
            }
        }

        public short? SZ_1DOHOD_0_RASHOD
        {
            get => Entity.SZ_1DOHOD_0_RASHOD;
            set
            {
                if (Entity.SZ_1DOHOD_0_RASHOD == value) return;
                Entity.SZ_1DOHOD_0_RASHOD = value;
                RaisePropertyChanged();
            }
        }

        public new string Name
        {
            get => Entity.SZ_NAME;
            set
            {
                if (Entity.SZ_NAME == value) return;
                Entity.SZ_NAME = value;
                RaisePropertyChanged();
            }
        }

        public new decimal DocCode
        {
            get => Entity.DOC_CODE;
            set
            {
                if (Entity.DOC_CODE == value) return;
                Entity.DOC_CODE = value;
                RaisePropertyChanged();
            }
        }

        public string Shifr
        {
            get => Entity.SZ_SHIFR;
            set
            {
                if (myShifr == value) return;
                myShifr = value;
                Entity.SZ_SHIFR = myShifr;
                RaisePropertyChanged();
            }
        }

        public override decimal? ParentDC
        {
            get => Entity.SZ_PARENT_DC;
            set
            {
                if (Entity.SZ_PARENT_DC == value) return;
                Entity.SZ_PARENT_DC = value;
                RaisePropertyChanged();
            }
        }

        public override string ToString()
        {
            return Name;
        }
        public SD_99 DefaultValue()
        {
            return new SD_99 {DOC_CODE = -1};
        }
        public bool IsAccessRight { get; set; }
        public List<SD_99> LoadList()
        {
            throw new System.NotImplementedException();
        }
    }

    public class DataAnnotationsSDRState : DataAnnotationForFluentApiBase, IMetadataProvider<SDRState>
    {
        void IMetadataProvider<SDRState>.BuildMetadata(MetadataBuilder<SDRState> builder)
        {
            SetNotAutoGenerated(builder);

            //builder.Property(_ => _.Entity).NotAutoGenerated();
            builder.Property(_ => _.Name).AutoGenerated().DisplayName("Наименование").Required();
            builder.Property(_ => _.Shifr).AutoGenerated().DisplayName("Шифр").Required();
        }
    }
}