using Core.EntityViewModel.NomenklManagement;
using Core.Helper;
using Core.ViewModel.Base;
using Data;
using DevExpress.Mvvm.DataAnnotations;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;

namespace Core.EntityViewModel.AktSpisaniya
{
    public class AktSpisaniyaNomenkl_TitleViewModel_FluentAPI : DataAnnotationForFluentApiBase, IMetadataProvider<AktSpisaniyaNomenkl_TitleViewModel>
    {
        void IMetadataProvider<AktSpisaniyaNomenkl_TitleViewModel>.BuildMetadata(MetadataBuilder<AktSpisaniyaNomenkl_TitleViewModel> builder)
        {
            SetNotAutoGenerated(builder);
            builder.Property(_ => _.Entity).NotAutoGenerated();
            builder.Property(_ => _.Warehouse).AutoGenerated().DisplayName("Склад");
            builder.Property(_ => _.DocNumber).AutoGenerated().DisplayName("Номер документа");
            builder.Property(_ => _.DocDate).AutoGenerated().DisplayName("Дата документа");
            builder.Property(_ => _.DocCreator).AutoGenerated().DisplayName("Создатель документа");
            builder.Property(_ => _.ReasonCreation).AutoGenerated().DisplayName("Причина списания");
            builder.Property(_ => _.Note).AutoGenerated().DisplayName("Примечание");

        }
    }
    [MetadataType(typeof(AktSpisaniyaNomenkl_TitleViewModel_FluentAPI))]
    class AktSpisaniyaNomenkl_TitleViewModel : RSWindowViewModelBase, IEntity<AktSpisaniyaNomenkl_Title>, IDataErrorInfo
    {
        #region Fields

        private AktSpisaniyaNomenkl_Title myEntity;

        #endregion

        #region Methods

        private AktSpisaniyaNomenkl_Title DefaultValue()
        {
            return new()
            {
                Id = Guid.NewGuid()
            };
        }


        #endregion

        #region Constructor

        public AktSpisaniyaNomenkl_TitleViewModel()
        {
            Entity = DefaultValue();
        }

        public AktSpisaniyaNomenkl_TitleViewModel(AktSpisaniyaNomenkl_Title entity, RowStatus state = RowStatus.NotEdited)
        {
            Entity = entity ?? DefaultValue();

            foreach (var row in Entity.AktSpisaniya_row)
            {
                Rows.Add(new AktSpisaniyaRowViewModel(row)
                {
                    Parent = this,
                    myState = state
                });
                myState = state;
            }
        }

        #endregion

        #region Properties

        public List<AktSpisaniyaNomenkl_Title> LoadList()
        {
            throw new NotImplementedException();
        }


        public bool IsAccessRight { get; set; }

        public ObservableCollection<AktSpisaniyaRowViewModel> Rows { set; get; } = new();

        public AktSpisaniyaNomenkl_Title Entity
        {
            get => myEntity;
            set
            {
                if (myEntity == value)
                    return;
                myEntity = value;
                RaisePropertyChanged();
            }
        }

        public override Guid Id
        {
            get => Entity.Id;
            set
            {
                if (Entity.Id == value) return;
                Entity.Id = value;
                RaisePropertyChanged();
            }
        }

        public Warehouse Warehouse
        {
            get => MainReferences.GetWarehouse(Entity.Warehouse_DC);
            set
            {
                if (MainReferences.GetWarehouse(Entity.Warehouse_DC) == value)
                    return;
                Entity.Warehouse_DC = value.DocCode;
                RaisePropertyChanged();
            }
        }

        public int DocNumber
        {
            get => Entity.Num_Doc;
            set
            {
                if (Entity.Num_Doc == value)
                    return;
                Entity.Num_Doc = value;
                RaisePropertyChanged();
            }
        }

        public DateTime DocDate
        {
            get => Entity.Date_Doc;
            set
            {
                if (Entity.Date_Doc == value)
                    return;
                Entity.Date_Doc = value;
                RaisePropertyChanged();
            }
        }

        public string DocCreator
        {
            get => Entity.Creator;
            set
            {
                if (Entity.Creator == value)
                    return;
                Entity.Creator = value;
                RaisePropertyChanged();

            }
        }

        public string ReasonCreation
        {
            get => Entity.Reason_Creation;
            set
            {
                if (Entity.Reason_Creation == value)
                    return;
                Entity.Reason_Creation = value;
                RaisePropertyChanged();

            }

        }

        public override string Note
        {
            get => Entity.Note;
            set
            {
                if (Entity.Note == value) return;
                Entity.Note = value;
                RaisePropertyChanged();
            }
        }

        #endregion

        #region IDataErrorInfo

        public string this[string columnName]
        {
            get
            {
                switch (columnName)
                {
                    case "Warehouse":
                        return Warehouse == null ? "Склад должен быть обязательно выбран" : null;
                    case "DocNumber":
                        return DocNumber == 0 ? "Необходимо указать номер документа" : null;
                    case "DocDate":
                        return DocDate == default ? "Необходимо указать дату документа" : null;
                    case "DocCreator":
                        return DocCreator == null ? "Необходимо указать создателя документа" : null;
                    default:
                        return null;
                }
            }
        }

        [Display(AutoGenerateField = false)]
        public string Error => "";

        #endregion
    }
}
