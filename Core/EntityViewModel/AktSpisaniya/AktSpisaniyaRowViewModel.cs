using System;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Core.EntityViewModel.CommonReferences;
using Core.EntityViewModel.NomenklManagement;
using Core.Helper;
using Core.ViewModel.Base;
using Data;
using DevExpress.Mvvm.DataAnnotations;

namespace Core.EntityViewModel.AktSpisaniya
{
    // ReSharper disable once InconsistentNaming
    public class AktSpisaniyaRowViewModel_FluentAPI : DataAnnotationForFluentApiBase,
        IMetadataProvider<AktSpisaniyaRowViewModel>
    {
        void IMetadataProvider<AktSpisaniyaRowViewModel>.BuildMetadata(
            MetadataBuilder<AktSpisaniyaRowViewModel> builder)
        {
            SetNotAutoGenerated(builder);
            builder.Property(_ => _.Entity).NotAutoGenerated();
            builder.Property(_ => _.DocId).NotAutoGenerated();
            builder.Property(_ => _.NomenklNumber).AutoGenerated().DisplayName("Ном.№");
            builder.Property(_ => _.Nomenkl).AutoGenerated().DisplayName("Номенклатура");
            builder.Property(_ => _.Quantity).AutoGenerated().DisplayName("Кол-во").DisplayFormatString("n4");
            builder.Property(_ => _.MaxQuantity).AutoGenerated().DisplayName("Макс. кол-во").DisplayFormatString("n4")
                .ReadOnly();
            builder.Property(_ => _.Price).AutoGenerated().DisplayName("Цена").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.Summa).AutoGenerated().DisplayName("Сумма").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.IsSaveOnOutBalansSklad).AutoGenerated().DisplayName("За баланс");
            builder.Property(_ => _.PriceWithNaklad).AutoGenerated().DisplayName("Цена с накл.")
                .DisplayFormatString("n2")
                .ReadOnly();
            builder.Property(_ => _.SummaWithNaklad).AutoGenerated().DisplayName("Сумма с накл.")
                .DisplayFormatString("n2")
                .ReadOnly();
            builder.Property(_ => _.Note).AutoGenerated().DisplayName("Примечание");

            builder.Property(_ => _.PriceCHF).AutoGenerated().DisplayName("Цена").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.PriceEUR).AutoGenerated().DisplayName("Цена").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.PriceGBP).AutoGenerated().DisplayName("Цена").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.PriceRUB).AutoGenerated().DisplayName("Цена").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.PriceSEK).AutoGenerated().DisplayName("Цена").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.PriceUSD).AutoGenerated().DisplayName("Цена").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.PriceCNY).AutoGenerated().DisplayName("Цена").DisplayFormatString("n2").ReadOnly();

            builder.Property(_ => _.SummaCHF).AutoGenerated().DisplayName("Сумма").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.SummaEUR).AutoGenerated().DisplayName("Сумма").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.SummaGBP).AutoGenerated().DisplayName("Сумма").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.SummaRUB).AutoGenerated().DisplayName("Сумма").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.SummaSEK).AutoGenerated().DisplayName("Сумма").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.SummaUSD).AutoGenerated().DisplayName("Сумма").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.SummaCNY).AutoGenerated().DisplayName("Сумма").DisplayFormatString("n2").ReadOnly();

            builder.Property(_ => _.PriceWithNakladCHF).AutoGenerated().DisplayName("Цена с накл.")
                .DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.PriceWithNakladEUR).AutoGenerated().DisplayName("Цена с накл.")
                .DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.PriceWithNakladGBP).AutoGenerated().DisplayName("Цена с накл.")
                .DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.PriceWithNakladRUB).AutoGenerated().DisplayName("Цена с накл.")
                .DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.PriceWithNakladSEK).AutoGenerated().DisplayName("Цена с накл.")
                .DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.PriceWithNakladUSD).AutoGenerated().DisplayName("Цена с накл.")
                .DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.PriceWithNakladCNY).AutoGenerated().DisplayName("Цена с накл.")
                .DisplayFormatString("n2").ReadOnly();

            builder.Property(_ => _.SummaWithNakladCHF).AutoGenerated().DisplayName("Сумма с накл.")
                .DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.SummaWithNakladEUR).AutoGenerated().DisplayName("Сумма с накл.")
                .DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.SummaWithNakladGBP).AutoGenerated().DisplayName("Сумма с накл.")
                .DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.SummaWithNakladRUB).AutoGenerated().DisplayName("Сумма с накл.")
                .DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.SummaWithNakladSEK).AutoGenerated().DisplayName("Сумма с накл.")
                .DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.SummaWithNakladUSD).AutoGenerated().DisplayName("Сумма с накл.")
                .DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.SummaWithNakladCNY).AutoGenerated().DisplayName("Сумма с накл.")
                .DisplayFormatString("n2").ReadOnly();

            // @formatter:off
            builder.TableLayout()
                .GroupContainer("Основные данные")
                    .Group("Товар")
                        .ContainsProperty(_ => _.NomenklNumber)
                        .ContainsProperty(_ => _.Nomenkl)
                        .ContainsProperty(_ => _.Quantity)
                        .ContainsProperty(_ => _.MaxQuantity)
                        .ContainsProperty(_ => _.IsSaveOnOutBalansSklad)
                    .EndGroup()
                    .Group("Стоимость")
                        .ContainsProperty(_ => _.Price)
                        .ContainsProperty(_ => _.Summa)
                        .ContainsProperty(_ => _.PriceWithNaklad)
                        .ContainsProperty(_ => _.SummaWithNaklad)
                        .ContainsProperty(_ => _.Currency)
                    .EndGroup()
                .EndGroupContainer()
                .GroupContainer("Валюта")
                    .Group("RUR")
                        .ContainsProperty(_ => _.PriceRUB)
                        .ContainsProperty(_ => _.SummaRUB)
                        .ContainsProperty(_ => _.PriceWithNakladRUB)
                        .ContainsProperty(_ => _.SummaWithNakladRUB)
                    .EndGroup()
                    .Group("USD")
                        .ContainsProperty(_ => _.PriceUSD)
                        .ContainsProperty(_ => _.SummaUSD)
                        .ContainsProperty(_ => _.PriceWithNakladUSD)
                        .ContainsProperty(_ => _.SummaWithNakladUSD)
                    .EndGroup()
                    .Group("EUR")
                        .ContainsProperty(_ => _.PriceEUR)
                        .ContainsProperty(_ => _.SummaEUR)
                        .ContainsProperty(_ => _.PriceWithNakladEUR)
                        .ContainsProperty(_ => _.SummaWithNakladEUR)
                    .EndGroup()
                    .Group("GBP")
                        .ContainsProperty(_ => _.PriceGBP)
                        .ContainsProperty(_ => _.SummaGBP)
                        .ContainsProperty(_ => _.PriceWithNakladGBP)
                        .ContainsProperty(_ => _.SummaWithNakladGBP)
                    .EndGroup()
                    .Group("CHF")
                        .ContainsProperty(_ => _.PriceCHF)
                        .ContainsProperty(_ => _.SummaCHF)
                        .ContainsProperty(_ => _.PriceWithNakladCHF)
                        .ContainsProperty(_ => _.SummaWithNakladCHF)
                    .EndGroup()
                    .Group("SEK")
                        .ContainsProperty(_ => _.PriceSEK)
                        .ContainsProperty(_ => _.SummaSEK)
                        .ContainsProperty(_ => _.PriceWithNakladSEK)
                        .ContainsProperty(_ => _.SummaWithNakladSEK)
                    .EndGroup()
                    .Group("CNY")
                        .ContainsProperty(_ => _.PriceCNY)
                        .ContainsProperty(_ => _.SummaCNY)
                        .ContainsProperty(_ => _.PriceWithNakladCNY)
                        .ContainsProperty(_ => _.SummaWithNakladCNY)
                    .EndGroup()
                .EndGroupContainer();

            // @formatter:on
        }
    }

    [MetadataType(typeof(AktSpisaniyaRowViewModel_FluentAPI))]
    public sealed class AktSpisaniyaRowViewModel : RSViewModelBase, IDataErrorInfo, INomenklPriceWithNakladMultiCurrency
    {
        public decimal PriceCHF
        {
            get => Currency.DocCode == CurrencyCode.CHF ? Price : 0;
            set { }
        }

        public decimal PriceEUR
        {
            get => Currency.DocCode == CurrencyCode.EUR ? Price : 0;
            set { }
        }

        public decimal PriceGBP
        {
            get => Currency.DocCode == CurrencyCode.GBP ? Price : 0;
            set { }
        }

        public decimal PriceRUB
        {
            get => Currency.DocCode == CurrencyCode.RUB ? Price : 0;
            set { }
        }

        public decimal PriceSEK
        {
            get => Currency.DocCode == CurrencyCode.SEK ? Price : 0;
            set { }
        }

        public decimal PriceUSD
        {
            get => Currency.DocCode == CurrencyCode.USD ? Price : 0;
            set { }
        }

        public decimal PriceCNY
        {
            get => Currency.DocCode == CurrencyCode.CNY ? Price : 0;
            set { }
        }

        public decimal SummaCHF
        {
            get => Currency.DocCode == CurrencyCode.CHF ? Summa : 0;
            set { }
        }

        public decimal SummaEUR
        {
            get => Currency.DocCode == CurrencyCode.EUR ? Summa : 0;
            set { }
        }

        public decimal SummaGBP
        {
            get => Currency.DocCode == CurrencyCode.GBP ? Summa : 0;
            set { }
        }

        public decimal SummaRUB
        {
            get => Currency.DocCode == CurrencyCode.RUB ? Summa : 0;
            set { }
        }

        public decimal SummaSEK
        {
            get => Currency.DocCode == CurrencyCode.SEK ? Summa : 0;
            set { }
        }

        public decimal SummaUSD
        {
            get => Currency.DocCode == CurrencyCode.USD ? Summa : 0;
            set { }
        }

        public decimal SummaCNY
        {
            get => Currency.DocCode == CurrencyCode.CNY ? Summa : 0;
            set { }
        }

        public decimal PriceWithNakladCHF
        {
            get => Currency.DocCode == CurrencyCode.CHF ? PriceWithNaklad : 0;
            set { }
        }

        public decimal PriceWithNakladEUR
        {
            get => Currency.DocCode == CurrencyCode.EUR ? PriceWithNaklad : 0;
            set { }
        }

        public decimal PriceWithNakladGBP
        {
            get => Currency.DocCode == CurrencyCode.GBP ? PriceWithNaklad : 0;
            set { }
        }

        public decimal PriceWithNakladRUB
        {
            get => Currency.DocCode == CurrencyCode.RUB ? PriceWithNaklad : 0;
            set { }
        }

        public decimal PriceWithNakladSEK
        {
            get => Currency.DocCode == CurrencyCode.SEK ? PriceWithNaklad : 0;
            set { }
        }

        public decimal PriceWithNakladUSD
        {
            get => Currency.DocCode == CurrencyCode.USD ? PriceWithNaklad : 0;
            set { }
        }

        public decimal PriceWithNakladCNY
        {
            get => Currency.DocCode == CurrencyCode.CNY ? PriceWithNaklad : 0;
            set { }
        }

        public decimal SummaWithNakladCHF
        {
            get => Currency.DocCode == CurrencyCode.CHF ? SummaWithNaklad : 0;
            set { }
        }

        public decimal SummaWithNakladEUR
        {
            get => Currency.DocCode == CurrencyCode.EUR ? SummaWithNaklad : 0;
            set { }
        }

        public decimal SummaWithNakladGBP
        {
            get => Currency.DocCode == CurrencyCode.GBP ? SummaWithNaklad : 0;
            set { }
        }

        public decimal SummaWithNakladRUB
        {
            get => Currency.DocCode == CurrencyCode.RUB ? SummaWithNaklad : 0;
            set { }
        }

        public decimal SummaWithNakladSEK
        {
            get => Currency.DocCode == CurrencyCode.SEK ? SummaWithNaklad : 0;
            set { }
        }

        public decimal SummaWithNakladUSD
        {
            get => Currency.DocCode == CurrencyCode.USD ? SummaWithNaklad : 0;
            set { }
        }

        public decimal SummaWithNakladCNY
        {
            get => Currency.DocCode == CurrencyCode.CNY ? SummaWithNaklad : 0;
            set { }
        }

        #region Fields

        // ReSharper disable once InconsistentNaming
        private AktSpisaniya_row myEntity;

        // ReSharper disable once InconsistentNaming
        private decimal myMaxQuantity;
        private Prices myPrices;

        #endregion

        #region Methods

        private AktSpisaniya_row DefaultValue()
        {
            return new()
            {
                Id = Guid.NewGuid()
            };
        }

        public override bool IsCorrect()
        {
            if (Nomenkl != null && Quantity >= 0)
                return true;
            return false;
        }

        public override object ToJson()
        {
            return new
            {
                DocCode,
                Code,
                Номенклатурный_Номер = NomenklNumber,
                Номенклатура = Nomenkl.Name,
                Количество = Quantity.ToString("n3"),
                Цена = Price.ToString("n2"),
                Сумма = Summa.ToString("n2"),
                Цена_Наклад = PriceWithNaklad.ToString("n2"),
                Сумма_Наклад = SummaWithNaklad.ToString("n2"),
                Валюта = Nomenkl.Currency.Name,
                Примечание = Note
            };
        }

        #endregion

        #region Constructors

        public AktSpisaniyaRowViewModel()
        {
            Entity = DefaultValue();
        }

        public AktSpisaniyaRowViewModel(AktSpisaniya_row entity, AktSpisaniyaNomenklTitleViewModel parent = null)
        {
            Entity = entity ?? DefaultValue();
            Parent = parent;
        }

        #endregion

        #region Properties

        public AktSpisaniya_row Entity
        {
            get => myEntity;
            set
            {
                if (myEntity == value)
                    return;
                myEntity = value;
                RaisePropertiesChanged();
            }
        }

        public override Guid Id
        {
            get => Entity.Id;
            set
            {
                if (Entity.Id == value)
                    return;
                Entity.Id = value;
                RaisePropertiesChanged();
            }
        }

        public Guid DocId
        {
            get => Entity.Doc_Id;
            set
            {
                if (Entity.Doc_Id == value)
                    return;
                Entity.Doc_Id = value;
                RaisePropertiesChanged();
            }
        }

        public Nomenkl Nomenkl
        {
            get => MainReferences.GetNomenkl(Entity.Nomenkl_DC);
            set
            {
                if (Entity.Nomenkl_DC > 0 && MainReferences.GetNomenkl(Entity.Nomenkl_DC) == value)
                    return;
                Entity.Nomenkl_DC = value?.DocCode ?? 0;
                RaisePropertiesChanged();
            }
        }

        public bool IsSaveOnOutBalansSklad
        {
            get => Entity.IsSaveOnOutBalansSklad ?? false;
            set
            {
                if (Entity.IsSaveOnOutBalansSklad == value) return;
                Entity.IsSaveOnOutBalansSklad = value;
                RaisePropertyChanged();
            }
        }

        public Currency Currency => Nomenkl?.Currency;
        public string NomenklNumber => Nomenkl?.NomenklNumber;

        public decimal Quantity
        {
            get => Entity.Quantity;
            set
            {
                if (Entity.Quantity == value) return;
                if (Quantity > MaxQuantity)
                {
                }

                Entity.Quantity = value;
                RaisePropertyChanged();
            }
        }

        [Display(AutoGenerateField = false)]
        public Prices Prices
        {
            get => myPrices;
            set
            {
                if (myPrices == value) return;
                myPrices = value;
                RaisePropertyChanged();
            }
        }

        public decimal MaxQuantity
        {
            get => myMaxQuantity;
            set
            {
                if (myMaxQuantity == value) return;
                myMaxQuantity = value;
                RaisePropertyChanged();
            }
        }

        public decimal PriceWithNaklad => Prices?.PriceWithNaklad ?? 0;

        public decimal SummaWithNaklad => PriceWithNaklad * Quantity;

        public decimal Price => Prices?.Price ?? 0;

        public decimal Summa => Quantity * Price;

        public override string Note
        {
            get => Entity.Note;
            set
            {
                if (Entity.Note == value) return;
                Entity.Note = value;
                RaisePropertyChanged();
            }
        }

        #endregion


        #region IDataErrorInfo

        public string this[string columnName]
        {
            get
            {
                switch (columnName)
                {
                    case nameof(Quantity):
                        return Quantity <= 0 ? "Кол-во должно быть больше 0" : null;
                    default:
                        return null;
                }
            }
        }

        public string Error { get; } = null;

        #endregion
    }
}