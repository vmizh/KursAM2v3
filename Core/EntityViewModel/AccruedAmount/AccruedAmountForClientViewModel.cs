using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using Core.EntityViewModel.CommonReferences;
using Core.EntityViewModel.CommonReferences.Kontragent;
using Core.Helper;
using Core.ViewModel.Base;
using Data;
using DevExpress.Mvvm.DataAnnotations;

namespace Core.EntityViewModel.AccruedAmount
{
    public class AccruedAmountForClientViewModel_FluentAPI : DataAnnotationForFluentApiBase,
        IMetadataProvider<AccruedAmountForClientViewModel>
    {
        void IMetadataProvider<AccruedAmountForClientViewModel>.BuildMetadata(
            MetadataBuilder<AccruedAmountForClientViewModel> builder)
        {
            SetNotAutoGenerated(builder);
            builder.Property(_ => _.Entity).NotAutoGenerated();
            builder.Property(_ => _.Error).NotAutoGenerated();
            builder.Property(_ => _.Name).NotAutoGenerated();
            builder.Property(_ => _.DocDate).AutoGenerated().DisplayName("Дата");
            builder.Property(_ => _.Creator).AutoGenerated().DisplayName("Создатель").ReadOnly();
            builder.Property(_ => _.DocInNum).AutoGenerated().DisplayName("№").ReadOnly();
            builder.Property(_ => _.DocExtNum).AutoGenerated().DisplayName("Внеш.№");
            builder.Property(_ => _.Kontragent).AutoGenerated().DisplayName("Контрагент");
            builder.Property(_ => _.Summa).AutoGenerated().DisplayName("Сумма").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.PaySumma).AutoGenerated().DisplayName("Оплачено").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.Currency).AutoGenerated().DisplayName("Валюта").ReadOnly();
            builder.Property(_ => _.Note).AutoGenerated().DisplayName("Примечание");
        }
    }

    [MetadataType(typeof(AccruedAmountForClientViewModel_FluentAPI))]
    public class AccruedAmountForClientViewModel : RSViewModelBase, IDataErrorInfo
    {
        #region Methods

        private AccruedAmountForClient DefaultValue()
        {
            return new()
            {
                Id = Guid.NewGuid(),
                Creator = GlobalOptions.UserInfo.NickName,
                DocDate = DateTime.Today
            };
        }

        #endregion

        #region Fields

        private AccruedAmountForClient myEntity;
        private AccruedAmountForClientRowViewModel myCurrentRow;

        #endregion

        #region Properties

        // ReSharper disable once CollectionNeverUpdated.Global
        public ObservableCollection<AccruedAmountForClientRowViewModel> Rows { set; get; } =
            new();

        public override string ToString()
        {
            return $"Внебалансовые начисления для клиентов №{DocInNum}/{DocExtNum} " +
                $"от {DocDate.ToShortDateString()} Контрагент: {Kontragent} на сумму {Summa} " +
                $"{Currency}";
        }

        [Display(AutoGenerateField = false)]
        public AccruedAmountForClientRowViewModel CurrentRow
        {
            get => myCurrentRow;
            set
            {
                if (myCurrentRow == value) return;
                myCurrentRow = value;
                RaisePropertyChanged();
            }
        }

        [Display(AutoGenerateField = false)]
        public AccruedAmountForClient Entity
        {
            get => myEntity;
            set
            {
                if (myEntity == value) return;
                myEntity = value;
                RaisePropertyChanged();
            }
        }

        [Display(AutoGenerateField = false)]
        public override Guid Id
        {
            get => Entity.Id;
            set
            {
                if (Entity.Id == value) return;
                Entity.Id = value;
                RaisePropertyChanged();
            }
        }

        public decimal Summa => Rows.Sum(_ => _.Summa);
        public decimal PaySumma => Rows.Sum(_ => _.PaySumma);
        public Currency Currency => Kontragent?.BalansCurrency;

        public DateTime DocDate
        {
            get => Entity.DocDate;
            set
            {
                if (Entity.DocDate == value) return;
                Entity.DocDate = value;
                RaisePropertyChanged();
            }
        }

        public int DocInNum
        {
            get => Entity.DocInNum;
            set
            {
                if (Entity.DocInNum == value) return;
                Entity.DocInNum = value;
                RaisePropertyChanged();
            }
        }

        public string DocExtNum
        {
            get => Entity.DocExtNum;
            set
            {
                if (Entity.DocExtNum == value) return;
                Entity.DocExtNum = value;
                RaisePropertyChanged();
            }
        }

        public Kontragent Kontragent
        {
            get => MainReferences.GetKontragent(Entity.KontrDC);
            set
            {
                if (MainReferences.GetKontragent(Entity.KontrDC) == value) return;
                if (value != null)
                {
                    Entity.KontrDC = value.DocCode;
                    RaisePropertyChanged();
                    RaisePropertyChanged(nameof(Currency));
                }
            }
        }

        public override string Note
        {
            get => Entity.Note;
            set
            {
                if (Entity.Note == value) return;
                Entity.Note = value;
                RaisePropertyChanged();
            }
        }

        public string Creator
        {
            get => Entity.Creator;
            set
            {
                if (Entity.Creator == value) return;
                Entity.Creator = value;
                RaisePropertyChanged();
            }
        }

        #endregion

        #region Constructors

        public AccruedAmountForClientViewModel()
        {
            Entity = DefaultValue();
        }

        public AccruedAmountForClientViewModel(AccruedAmountForClient entity)
        {
            Entity = entity ?? DefaultValue();
            foreach (var r in Entity.AccuredAmountForClientRow)
            {
                Rows.Add(new AccruedAmountForClientRowViewModel(r,this));
            }
        }

        #endregion

        #region IDataErrorInfo

        public string this[string columnName]
        {
            get
            {
                switch (columnName)
                {
                    case nameof(Kontragent):
                        return Kontragent == null ? "Контрагент должен быть обязательно выбран" : null;
                    default:
                        return null;
                }
            }
        }

        public string Error => GetError();

        private string GetError()
        {
            if (Kontragent == null)
                return "Контрагент должен быть обязательно выбран";
            if (Rows.Any(_ => string.IsNullOrWhiteSpace(_.AccruedAmountType?.Name)))
                return "Должен быть выбран тип начисления";
            return null;
        }

        #endregion
    }
}