using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using Core.EntityViewModel.CommonReferences;
using Core.EntityViewModel.CommonReferences.Kontragent;
using Core.Helper;
using Core.ViewModel.Base;
using Data;
using DevExpress.Mvvm.DataAnnotations;
using Helper;
using Newtonsoft.Json;

namespace Core.EntityViewModel.AccruedAmount
{
    public class AccruedAmountOfSupplierViewModel_FluentAPI : DataAnnotationForFluentApiBase,
        IMetadataProvider<AccruedAmountOfSupplierViewModel>
    {
        void IMetadataProvider<AccruedAmountOfSupplierViewModel>.BuildMetadata(
            MetadataBuilder<AccruedAmountOfSupplierViewModel> builder)
        {
            SetNotAutoGenerated(builder);
            builder.Property(_ => _.Entity).NotAutoGenerated();
            builder.Property(_ => _.Error).NotAutoGenerated();
            builder.Property(_ => _.Name).NotAutoGenerated();
            builder.Property(_ => _.DocDate).AutoGenerated().DisplayName("Дата");
            builder.Property(_ => _.Creator).AutoGenerated().DisplayName("Создатель").ReadOnly();
            builder.Property(_ => _.DocInNum).AutoGenerated().DisplayName("№").ReadOnly();
            builder.Property(_ => _.DocExtNum).AutoGenerated().DisplayName("Внеш.№");
            builder.Property(_ => _.Kontragent).AutoGenerated().DisplayName("Контрагент");
            builder.Property(_ => _.Summa).AutoGenerated().DisplayName("Сумма").DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.PaySumma).AutoGenerated().DisplayName("Сумма оплачено")
                .DisplayFormatString("n2").ReadOnly();
            builder.Property(_ => _.Currency).AutoGenerated().DisplayName("Валюта").ReadOnly();
            builder.Property(_ => _.Note).AutoGenerated().DisplayName("Примечание");
        }
    }

    [MetadataType(typeof(AccruedAmountOfSupplierViewModel_FluentAPI))]
    public class AccruedAmountOfSupplierViewModel : RSViewModelBase, IDataErrorInfo
    {
        #region Fields

        private AccruedAmountOfSupplier myEntity;
        private AccruedAmountOfSupplierRowViewModel myCurrentAccrual;

        #endregion

        #region Properties

        public ObservableCollection<AccruedAmountOfSupplierRowViewModel> Rows { set; get; } =
            new();

        

        [Display(AutoGenerateField = false)]
        public AccruedAmountOfSupplierRowViewModel CurrentAccrual
        {
            get => myCurrentAccrual;
            set
            {
                if (myCurrentAccrual == value) return;
                myCurrentAccrual = value;
                RaisePropertyChanged();
            }
        }

        public AccruedAmountOfSupplier Entity
        {
            get => myEntity;
            set
            {
                if (myEntity == value) return;
                myEntity = value;
                RaisePropertyChanged();
            }
        }
        public override Guid Id
        {
            get => Entity.Id;
            set
            {
                if (Entity.Id == value) return;
                Entity.Id = value;
                RaisePropertyChanged();
            }
        }

        public DateTime DocDate
        {
            get => Entity.DocDate;
            set
            {
                if (Entity.DocDate == value) return;
                Entity.DocDate = value;
                RaisePropertyChanged();
            }
        }

        public decimal Summa => Rows.Sum(_ => _.Summa);
        public Currency Currency => Kontragent?.BalansCurrency;
        public decimal PaySumma => Rows.Sum(_ => _.PaySumma);

        public int DocInNum
        {
            get => Entity.DocInNum;
            set
            {
                if (Entity.DocInNum == value) return;
                Entity.DocInNum = value;
                RaisePropertyChanged();
            }
        }

        public string DocExtNum
        {
            get => Entity.DocExtNum;
            set
            {
                if (Entity.DocExtNum == value) return;
                Entity.DocExtNum = value;
                RaisePropertyChanged();
            }
        }

        public Kontragent Kontragent
        {
            get => MainReferences.GetKontragent(Entity.KontrDC);
            set
            {
                if (MainReferences.GetKontragent(Entity.KontrDC) == value) return;
                if (value != null)
                {
                    Entity.KontrDC = value.DocCode;
                    RaisePropertyChanged();
                    RaisePropertyChanged(nameof(Currency));
                }
            }
        }

        public override string Note
        {
            get => Entity.Note;
            set
            {
                if (Entity.Note == value) return;
                Entity.Note = value;
                RaisePropertyChanged();
            }
        }

        public string Creator
        {
            get => Entity.Creator;
            set
            {
                if (Entity.Creator == value) return;
                Entity.Creator = value;
                RaisePropertyChanged();
            }
        }

        #endregion

        #region Constructors

        public AccruedAmountOfSupplierViewModel()
        {
            Entity = DefaultValue();
        }

        public AccruedAmountOfSupplierViewModel(AccruedAmountOfSupplier entity, ALFAMEDIAEntities context)
        {
            Entity = entity ?? DefaultValue();
            foreach (var r in Entity.AccuredAmountOfSupplierRow)
            {
                Rows.Add(new AccruedAmountOfSupplierRowViewModel(r, this));
            }

            if (context != null)
            {
                foreach (var r in Rows)
                {
                    if (r.Entity.SD_34 != null && r.Entity.SD_34.Count > 0)
                        foreach (var d in context.SD_34.Where(_ => _.AccuredId == r.Id).ToList())
                            r.CashDocs.Add(new AccruedAmountOfSupplierCashDocViewModel
                            {
                                Creator = d.CREATOR,
                                DocCode = d.DOC_CODE,
                                // ReSharper disable once PossibleInvalidOperationException
                                DocDate = (DateTime)d.DATE_ORD,
                                DocNumber = d.NUM_ORD.ToString(),
                                DocumentType = "Расходный кассовый ордер",
                                // ReSharper disable once PossibleInvalidOperationException
                                Summa = (decimal)d.CRS_SUMMA,
                                Note = d.NAME_ORD + " " + d.NOTES_ORD
                            });
                    if (r.Entity.TD_101 != null && r.Entity.TD_101.Count > 0)
                        foreach (var d in context.TD_101.Where(_ => _.AccuredId == r.Id).ToList())
                            r.CashDocs.Add(new AccruedAmountOfSupplierCashDocViewModel
                            {
                                Creator = null,
                                DocCode = d.DOC_CODE,
                                Code = d.CODE,
                                DocDate = d.SD_101.VV_START_DATE,
                                DocNumber = d.VVT_DOC_NUM,
                                DocumentType = "Банковская транзакция",
                                // ReSharper disable once PossibleInvalidOperationException
                                Summa = (decimal)d.VVT_VAL_RASHOD,
                                Note = null
                            });

                }
            }
        }

        #region Methods

        private AccruedAmountOfSupplier DefaultValue()
        {
            return new AccruedAmountOfSupplier
            {
                Id = Guid.NewGuid(),
                Creator = GlobalOptions.UserInfo.NickName,
                DocDate = DateTime.Today,
                DocInNum = -1
            };
        }

        public override string ToString()
        {
            return $"Прямые затраты №{DocInNum}/{DocExtNum} " +
                   $"от {DocDate.ToShortDateString()} Контрагент: {Kontragent} на сумму {Summa} " +
                   $"{Currency}";
        }

        #endregion

        #endregion

        #region IDataErrorInfo

        public string this[string columnName]
        {
            get
            {
                switch (columnName)
                {
                    case nameof(Kontragent):
                        return Kontragent == null ? "Контрагент должен быть обязательно выбран" : null;
                    default:
                        return null;
                }
            }
        }

        public string Error => null;

        #endregion

        #region Methods

        public override object ToJson()
        {
            var res = new
            {
                Статус = CustomFormat.GetEnumName(State),
                Id,
                Номер = DocInNum + (!string.IsNullOrWhiteSpace(DocExtNum) ? "/" + DocExtNum : null),
                Дата = DocDate.ToShortDateString(),
                Контрагент = Kontragent.Name,
                Сумма = Summa.ToString("n2"),
                Оплачено = PaySumma.ToString("n2"),
                Cоздатель = Creator,
                Валюта = Currency.Name,
                Примечание = Note,
                Позиции = Rows.Select(_ => _.ToJson())
            };
            return JsonConvert.SerializeObject(res);
        }

        #endregion

    }
}