using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Core.Helper;
using Core.ViewModel.Base;
using Data;
using DevExpress.Mvvm.DataAnnotations;

namespace Core.EntityViewModel.Dogovora
{
    public class DogovorClientRowViewModel_FluentAPI : DataAnnotationForFluentApiBase,
        IMetadataProvider<DogovorClientRowViewModel>
    {
        void IMetadataProvider<DogovorClientRowViewModel>.BuildMetadata(
            MetadataBuilder<DogovorClientRowViewModel> builder)
        {
            SetNotAutoGenerated(builder);
            builder.Property(_ => _.Entity).NotAutoGenerated();
            builder.Property(_ => _.Summa).AutoGenerated().DisplayName("Сумма").DisplayFormatString("n2");
            builder.Property(_ => _.IsNDSInPrice).AutoGenerated().DisplayName("НДС в цене");
            builder.Property(_ => _.NDSPercent).AutoGenerated().DisplayName("НДС %").DisplayFormatString("n2");

        }
    }
    [MetadataType(typeof(DogovorClientRowViewModel_FluentAPI))]
    public class DogovorClientRowViewModel : RSViewModelBase,IDataErrorInfo
    {
        #region Fields

        private DogovorClientRow myEntity;

        #endregion

        #region Methods

        private DogovorClientRow DefaultValue()
        {
            return new()
            {
                Id = Guid.NewGuid()
            };
        }

        #endregion

        #region Constructors

        public DogovorClientRowViewModel()
        {
            Entity = DefaultValue();
        }

        public DogovorClientRowViewModel(DogovorClientRow entity, DogovorClientViewModel parent = null)
        {
            Entity = entity ?? DefaultValue();
            Parent = parent;
        }

        #endregion

        #region Properties

        public ObservableCollection<DogovorClientFactViewModel> Facts =
            new();

        public DogovorClientRow Entity
        {
            get => myEntity;
            set
            {
                if (myEntity == value) return;
                myEntity = value;
                RaisePropertyChanged();
            }
        }

        public Guid DocId
        {
            get => Entity.DocId;
            set
            {
                if (Entity.DocId == value) return;
                Entity.DocId = value;
                RaisePropertyChanged();
            }
        }

        public Nomenkl Nomenkl
        {
            get => MainReferences.GetNomenkl(Entity.NomenklDC);
            set
            {
                if (MainReferences.GetNomenkl(Entity.NomenklDC) == value) return;
                Entity.NomenklDC = value?.DocCode ?? 0;
                RaisePropertyChanged();
            }
        }

        public Unit Unit => Nomenkl?.Unit;
        public string NomenklNumber => Nomenkl?.NomenklNumber;

        public decimal Quantity
        {
            get => Entity.Quantity;
            set
            {
                if (Entity.Quantity == value) return;
                Entity.Quantity = value;
                RaisePropertyChanged();
            }
        }

        public decimal Price
        {
            get => Entity.Price;
            set
            {
                if (Entity.Price == value) return;
                Entity.Price = value;
                RaisePropertyChanged();
            }
        }

        public decimal NDSPercent
        {
            get => Entity.NDSPercent;
            set
            {
                if (Entity.NDSPercent == value) return;
                Entity.NDSPercent = value;
                RaisePropertyChanged();
            }
        }

        public decimal Summa
        {
            get => Entity.Summa;
            set
            {
                if (Entity.Summa == value) return;
                Entity.Summa = value;
                RaisePropertyChanged();
            }
        }

        public override string Note
        {
            get => Entity.Note;
            set
            {
                if (Entity.Note == value) return;
                Entity.Note = value;
                RaisePropertyChanged();
            }
        }

        public bool IsNDSInPrice
        {
            get => Entity.IsNDSInPrice;
            set
            {
                if (Entity.IsNDSInPrice == value) return;
                Entity.IsNDSInPrice = value;
                RaisePropertyChanged();
            }
        }

        #endregion

        #region Commands

        #endregion

        #region IDataErrorInfo
        public string this[string columnName] => "Не определено";

        public string Error { get; }

        #endregion
    }
}