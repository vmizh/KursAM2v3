using System;
<<<<<<< working copy
=======
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Core.Helper;
>>>>>>> merge rev
using Core.ViewModel.Base;
using DevExpress.Mvvm.DataAnnotations;

namespace Core.EntityViewModel
{
    [MetadataType(typeof(DataAnnotationsBankStatements))]

    public class BankStatements : RSViewModelBase
    {
<<<<<<< working copy
        private DateTime myDate;
        private decimal? myRemainder;
=======
        
        public BankStatements()
        {
            DefailtValue();
        }

        private void DefailtValue()
        {
            RemainderCHF = 0;
            RemainderEUR = 0;
            RemainderGBP = 0;
            RemainderRUB = 0;
            RemainderUSD = 0;
            RemainderSEK = 0;
        }

        #region Currency

        private decimal? myRemainderCHF;
>>>>>>> merge rev

        public decimal? RemainderCHF
        {
            set
            {
                if (myRemainderCHF == value) return;
                myRemainderCHF = value;
                RaisePropertyChanged();
            }
            get => myRemainderCHF;
        }

        private decimal? myRemainderEUR;

        public decimal? RemainderEUR
        {
            set
            {
                if (myRemainderEUR == value) return;
                myRemainderEUR = value;
                RaisePropertyChanged();
            }
            get => myRemainderEUR;
        }

        private decimal? myRemainderRUB;

        public decimal? RemainderRUB
        {
            set
            {
                if (myRemainderRUB == value) return;
                myRemainderRUB = value;
                RaisePropertyChanged();
            }
            get => myRemainderRUB;
        }

        private decimal? myRemainderGBP;
        public decimal? RemainderGBP
        {
            set
            {
                if (myRemainderGBP == value) return;
                myRemainderGBP = value;
                RaisePropertyChanged();
            }
            get => myRemainderGBP;
        }
        private decimal? myRemainderSEK;
        public decimal? RemainderSEK
        {
            set
            {
                if (myRemainderSEK == value) return;
                myRemainderSEK = value;
                RaisePropertyChanged();
            }
            get => myRemainderSEK;
        }

        private decimal? myRemainderUSD;
        public decimal? RemainderUSD
        {
            set
            {
                if (myRemainderUSD == value) return;
                myRemainderUSD = value;
                RaisePropertyChanged();
            }
            get => myRemainderUSD;
        }
<<<<<<< working copy
=======

        #endregion

        private decimal myDC114;

        //SD_114 DOC_CODE
        public decimal BankDC
        {
            set
            {
                if (myDC114 == value) return;
                myDC114 = value;
                RaisePropertyChanged();
            }
            get => myDC114;
        }

        private DateTime myDate;
>>>>>>> merge rev

        public DateTime Date
        {
            set
            {
                if (myDate == value) return;
                myDate = value;
                RaisePropertyChanged();
            }
            get => myDate;
        }
    }
    public class DataAnnotationsBankStatements : DataAnnotationForFluentApiBase, IMetadataProvider<BankStatements>
    {
        void IMetadataProvider<BankStatements>.BuildMetadata(MetadataBuilder<BankStatements> builder)
        {
            SetNotAutoGenerated(builder);
            builder.Property(_ => _.Date).AutoGenerated().DisplayName("Дата");
            builder.Property(_ => _.Name).AutoGenerated().DisplayName("Счет");
            builder.Property(_ => _.RemainderCHF).AutoGenerated().DisplayName("Остаток(CHF)");
            builder.Property(_ => _.RemainderEUR).AutoGenerated().DisplayName("Остаток(EUR)");
            builder.Property(_ => _.RemainderGBP).AutoGenerated().DisplayName("Остаток(GBP)");
            builder.Property(_ => _.RemainderRUB).AutoGenerated().DisplayName("Остаток(RUB)");
            builder.Property(_ => _.RemainderUSD).AutoGenerated().DisplayName("Остаток(USD)");
            builder.Property(_ => _.RemainderSEK).AutoGenerated().DisplayName("Остаток(SEK)");
            builder.Property(_ => _.Note).AutoGenerated().DisplayName("примечание");
        }
    }
}