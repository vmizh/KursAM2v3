using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Windows.Controls;
using Core.EntityViewModel.CommonReferences;
using Core.Helper;
using Core.Invoices.EntityViewModel;
using Core.ViewModel.Base;
using Data;
using DevExpress.Mvvm.DataAnnotations;

namespace Core.EntityViewModel.Bank
{
    public class DataAnnotationsBankCurrencyChange : DataAnnotationForFluentApiBase,
        IMetadataProvider<BankCurrencyChangeViewModel>
    {
        void IMetadataProvider<BankCurrencyChangeViewModel>.BuildMetadata(
            MetadataBuilder<BankCurrencyChangeViewModel> builder)
        {
            SetNotAutoGenerated(builder);
            builder.Property(_ => _.Entity).NotAutoGenerated();
            builder.Property(_ => _.DocDate).AutoGenerated().DisplayName("Дата");
            builder.Property(_ => _.BankFrom).AutoGenerated().DisplayName("Отправитель").ReadOnly();
            builder.Property(_ => _.CurrencyFrom).AutoGenerated().DisplayName("").ReadOnly();
            builder.Property(_ => _.SummaFrom).AutoGenerated().DisplayName("Сумма отправителя")
                .DisplayFormatString("n2");
            builder.Property(_ => _.Rate).AutoGenerated().DisplayName("Курс").DisplayFormatString("n4");
            builder.Property(_ => _.BankTo).AutoGenerated().DisplayName("Получатель");
            builder.Property(_ => _.CurrencyTo).AutoGenerated().DisplayName("").ReadOnly();
            builder.Property(_ => _.SummaTo).AutoGenerated().DisplayName("Сумма получателя").DisplayFormatString("n2");
            builder.Property(_ => _.Note).AutoGenerated().DisplayName("Примечания");
            builder.Property(_ => _.CREATOR).AutoGenerated().DisplayName("Создатель");
            builder.Property(_ => _.State).AutoGenerated().DisplayName("Статус");

            #region Form Layout

            // @formatter:off
            builder.DataFormLayout()
                .Group("Счет", Orientation.Horizontal)
                    .ContainsProperty(_ => _.DocDate)
                    .ContainsProperty(_ => _.CREATOR)
                    .ContainsProperty(_ => _.State)
                .EndGroup()
                .GroupBox("Банк отправитель")
                        .ContainsProperty(_ => _.BankFrom)
                        .Group("g1",Orientation.Horizontal)
                            .ContainsProperty(_ => _.SummaFrom)
                            .ContainsProperty(_ => _.CurrencyFrom)
                        .EndGroup()
                .EndGroup()
                .ContainsProperty(_ => _.Rate)
                .GroupBox("Банк получатель")
                        .ContainsProperty(_ => _.BankTo)
                        .Group("g2",Orientation.Horizontal)
                            .ContainsProperty(_ => _.SummaTo)
                            .ContainsProperty(_ => _.CurrencyTo)
                        .EndGroup()   
                .EndGroup()
                .ContainsProperty(_ => _.Note);
            // @formatter:on

            #endregion
        }
    }

    [MetadataType(typeof(DataAnnotationsBankCurrencyChange))]
    public sealed class BankCurrencyChangeViewModel : RSViewModelBase, IEntity<BankCurrencyChange>
    {
        private BankAccount myBankFrom;
        private BankAccount myBankTo;
        private string myCREATOR;
        private Currency myCurrencyFrom;
        private Currency myCurrencyTo;
        private BankCurrencyChange myEntity;

        public BankCurrencyChangeViewModel()
        {
            Entity = new BankCurrencyChange {Id = Guid.NewGuid()};
        }

        public BankCurrencyChangeViewModel(BankCurrencyChange entity)
        {
            var isEntity = entity != null && entity.Id != Guid.Empty;
            Entity = entity ?? new BankCurrencyChange {Id = Guid.NewGuid()};
            if (!isEntity) return;
            myBankFrom = MainReferences.BankAccounts[entity.BankFromDC];
            myBankTo = MainReferences.BankAccounts[entity.BankToDC];
            myCurrencyFrom = MainReferences.Currencies[entity.CrsFromDC];
            myCurrencyTo = MainReferences.Currencies[entity.CrsToDC];
        }

        public BankCurrencyChange Entity
        {
            get => myEntity;
            set
            {
                if (myEntity == value) return;
                myEntity = value;
                RaisePropertyChanged();
            }
        }

        public override Guid Id
        {
            get => Entity.Id;
            set
            {
                if (Entity.Id == value) return;
                Entity.Id = value;
                RaisePropertyChanged();
            }
        }

        public DateTime DocDate
        {
            get => Entity.DocDate;
            set
            {
                if (Entity.DocDate == value) return;
                Entity.DocDate = value;
                RaisePropertyChanged();
            }
        }

        public int DocNum
        {
            get => Entity.DocNum;
            set
            {
                if (Entity.DocNum == value) return;
                Entity.DocNum = value;
                RaisePropertyChanged();
            }
        }

        public decimal BankFromDC
        {
            get => Entity.BankFromDC;
            set
            {
                if (Entity.BankFromDC == value) return;
                Entity.BankFromDC = value;
                if (MainReferences.BankAccounts.ContainsKey(Entity.BankFromDC))
                {
                    myBankFrom = MainReferences.BankAccounts[Entity.BankFromDC];
                    RaisePropertyChanged(nameof(BankFrom));
                }

                RaisePropertyChanged();
            }
        }

        public BankAccount BankFrom
        {
            get => myBankFrom;
            set
            {
                if (myBankFrom == value) return;
                myBankFrom = value;
                Entity.BankFromDC = myBankFrom?.DocCode ?? 0;
                RaisePropertyChanged();
            }
        }

        public decimal BankToDC
        {
            get => Entity.BankToDC;
            set
            {
                if (Entity.BankToDC == value) return;
                Entity.BankToDC = value;
                if (MainReferences.BankAccounts.ContainsKey(Entity.BankToDC))
                {
                    myBankTo = MainReferences.BankAccounts[Entity.BankToDC];
                    RaisePropertyChanged(nameof(BankTo));
                }

                RaisePropertyChanged();
            }
        }

        public BankAccount BankTo
        {
            get => myBankTo;
            set
            {
                if (myBankTo == value) return;
                myBankTo = value;
                Entity.BankToDC = myBankTo?.DocCode ?? 0;
                RaisePropertyChanged();
            }
        }

        public decimal SummaFrom
        {
            get => Entity.SummaFrom;
            set
            {
                if (Entity.SummaFrom == value) return;
                Entity.SummaFrom = value;
                if (BankTo != null)
                {
                    if (CrsToDC == GlobalOptions.SystemProfile.NationalCurrency.DocCode)
                        Entity.SummaTo =
                            decimal.Round((decimal) (Entity.SummaFrom * Entity.Rate), 2);
                    else
                        Entity.SummaTo =
                            Entity?.Rate == 0 ? 0 : decimal.Round((decimal) (Entity.SummaFrom / Entity.Rate), 2);
                }

                RaisePropertyChanged();
                RaisePropertyChanged(nameof(SummaTo));
            }
        }

        public decimal SummaTo
        {
            get => Entity.SummaTo;
            set
            {
                if (Entity.SummaTo == value) return;
                Entity.SummaTo = value;
                if (CrsToDC == GlobalOptions.SystemProfile.NationalCurrency.DocCode)
                    Entity.SummaFrom =
                        Entity.Rate == 0 ? 0 : decimal.Round((decimal) (Entity.SummaTo / Entity.Rate), 2);
                else
                    Entity.SummaFrom = decimal.Round((decimal) (Entity.SummaTo * Entity.Rate), 2);

                RaisePropertyChanged();
                RaisePropertyChanged(nameof(SummaFrom));
            }
        }

        public decimal? Rate
        {
            get => Entity.Rate;
            set
            {
                if (Entity.Rate == value) return;
                Entity.Rate = value;
                if (CrsToDC == GlobalOptions.SystemProfile.NationalCurrency.DocCode)
                    Entity.SummaTo =
                        decimal.Round((decimal) (Entity.SummaFrom * Entity.Rate), 2);
                else
                    Entity.SummaTo =
                        Entity.Rate == 0 ? 0 : decimal.Round((decimal) (Entity.SummaFrom / Entity.Rate), 2);

                RaisePropertyChanged();
                RaisePropertyChanged(nameof(SummaTo));
            }
        }

        public decimal CrsFromDC
        {
            get => Entity.CrsFromDC;
            set
            {
                if (Entity.CrsFromDC == value) return;
                Entity.CrsFromDC = value;
                if (MainReferences.Currencies.ContainsKey(Entity.CrsFromDC))
                {
                    myCurrencyFrom = MainReferences.Currencies[Entity.CrsFromDC];
                    RaisePropertyChanged(nameof(CurrencyFrom));
                }

                RaisePropertyChanged();
            }
        }

        public Currency CurrencyFrom
        {
            get => myCurrencyFrom;
            set
            {
                if (myCurrencyFrom == value) return;
                myCurrencyFrom = value;
                Entity.CrsFromDC = myCurrencyFrom?.DocCode ?? 0;
                RaisePropertyChanged();
            }
        }

        public decimal CrsToDC
        {
            get => Entity.CrsToDC;
            set
            {
                if (Entity.CrsToDC == value) return;
                Entity.CrsToDC = value;
                CrsToDC = myCurrencyTo?.DocCode ?? 0;
                if (MainReferences.Currencies.ContainsKey(Entity.CrsToDC))
                {
                    myCurrencyFrom = MainReferences.Currencies[Entity.CrsToDC];
                    RaisePropertyChanged(nameof(CurrencyTo));
                }

                RaisePropertyChanged();
            }
        }

        public Currency CurrencyTo
        {
            get => myCurrencyTo;
            set
            {
                if (myCurrencyTo == value) return;
                myCurrencyTo = value;
                Entity.CrsToDC = myCurrencyTo?.DocCode ?? 0;
                RaisePropertyChanged();
            }
        }

        public string CREATOR
        {
            get => myCREATOR;
            set
            {
                if (myCREATOR == value) return;
                myCREATOR = value;
                RaisePropertyChanged();
            }
        }

        public override string Note
        {
            get => Entity.Note;
            set
            {
                if (Entity.Note == value) return;
                Entity.Note = value;
                RaisePropertyChanged();
            }
        }

        public decimal DocFromDC
        {
            get => Entity.DocFromDC;
            set
            {
                if (Entity.DocFromDC == value) return;
                Entity.DocFromDC = value;
                RaisePropertyChanged();
            }
        }

        public int DocRowFromCode
        {
            get => Entity.DocRowFromCode;
            set
            {
                if (Entity.DocRowFromCode == value) return;
                Entity.DocRowFromCode = value;
                RaisePropertyChanged();
            }
        }

        public decimal DocToDC
        {
            get => Entity.DocToDC;
            set
            {
                if (Entity.DocToDC == value) return;
                Entity.DocToDC = value;
                RaisePropertyChanged();
            }
        }

        public int DocRowToCode
        {
            get => Entity.DocRowToCode;
            set
            {
                if (Entity.DocRowToCode == value) return;
                Entity.DocRowToCode = value;
                RaisePropertyChanged();
            }
        }

        public SD_114 SD_114
        {
            get => Entity.SD_114;
            set
            {
                if (Entity.SD_114 == value) return;
                Entity.SD_114 = value;
                RaisePropertyChanged();
            }
        }

        public SD_114 SD_1141
        {
            get => Entity.SD_1141;
            set
            {
                if (Entity.SD_1141 == value) return;
                Entity.SD_1141 = value;
                RaisePropertyChanged();
            }
        }

        public SD_301 SD_301
        {
            get => Entity.SD_301;
            set
            {
                if (Entity.SD_301 == value) return;
                Entity.SD_301 = value;
                RaisePropertyChanged();
            }
        }

        public SD_301 SD_3011
        {
            get => Entity.SD_3011;
            set
            {
                if (Entity.SD_3011 == value) return;
                Entity.SD_3011 = value;
                RaisePropertyChanged();
            }
        }

        public bool IsAccessRight { get; set; }

        public List<BankCurrencyChange> LoadList()
        {
            throw new NotImplementedException();
        }

        public BankCurrencyChange Load(decimal dc)
        {
            throw new NotImplementedException();
        }

        public BankCurrencyChange Load(Guid id)
        {
            throw new NotImplementedException();
        }

        public void Save(BankCurrencyChange doc)
        {
            throw new NotImplementedException();
        }

        public void UpdateFrom(BankCurrencyChange ent)
        {
            Id = ent.Id;
            DocDate = ent.DocDate;
            BankFromDC = ent.BankFromDC;
            BankToDC = ent.BankToDC;
            SummaFrom = ent.SummaFrom;
            SummaTo = ent.SummaTo;
            Rate = ent.Rate;
            CrsFromDC = ent.CrsFromDC;
            CrsToDC = ent.CrsToDC;
            Note = ent.Note;
            DocFromDC = ent.DocFromDC;
            DocRowFromCode = ent.DocRowFromCode;
            DocToDC = ent.DocToDC;
            DocRowToCode = ent.DocRowToCode;
            SD_114 = ent.SD_114;
            SD_1141 = ent.SD_1141;
            SD_301 = ent.SD_301;
            SD_3011 = ent.SD_3011;
        }

        public void UpdateTo(BankCurrencyChange ent)
        {
            ent.Id = Id;
            ent.DocDate = DocDate;
            ent.BankFromDC = BankFromDC;
            ent.BankToDC = BankToDC;
            ent.SummaFrom = SummaFrom;
            ent.SummaTo = SummaTo;
            ent.Rate = Rate;
            ent.CrsFromDC = CrsFromDC;
            ent.CrsToDC = CrsToDC;
            ent.Note = Note;
            ent.DocFromDC = DocFromDC;
            ent.DocRowFromCode = DocRowFromCode;
            ent.DocToDC = DocToDC;
            ent.DocRowToCode = DocRowToCode;
            ent.SD_114 = SD_114;
            ent.SD_1141 = SD_1141;
            ent.SD_301 = SD_301;
            ent.SD_3011 = SD_3011;
        }
    }
}