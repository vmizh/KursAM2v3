using System.ComponentModel.DataAnnotations;
using Core.EntityViewModel;
using Core.Helper;
using Data;
using DevExpress.Mvvm.DataAnnotations;

namespace Core.ViewModel.Common
{
    [MetadataType(typeof(DataAnnotationsSDRState))]
    public class SDRState : SD_99ViewModel
    {
        private string myShifr;

        public SDRState()
        {
        }

        public SDRState(SD_99 doc)
            : base(doc)
        {
        }

        public new string Name
        {
            get => Entity.SZ_NAME;
            set
            {
                if (Entity.SZ_NAME == value) return;
                Entity.SZ_NAME = value;
                RaisePropertyChanged();
            }
        }

        public new decimal DocCode
        {
            get => Entity.DOC_CODE;
            set
            {
                if (Entity.DOC_CODE == value) return;
                Entity.DOC_CODE = value;
                RaisePropertyChanged();
            }
        }

        public string Shifr
        {
            get => Entity.SZ_SHIFR;
            set
            {
                if (myShifr == value) return;
                myShifr = value;
                Entity.SZ_SHIFR = myShifr;
                RaisePropertyChanged();
            }
        }

        public override decimal? ParentDC
        {
            get => Entity.SZ_PARENT_DC;
            set
            {
                if (Entity.SZ_PARENT_DC == value) return;
                Entity.SZ_PARENT_DC = value;
                RaisePropertyChanged();
            }
        }

        public override string ToString()
        {
            return Name;
        }
    }

    public class DataAnnotationsSDRState : DataAnnotationForFluentApiBase, IMetadataProvider<SDRState>
    {
        void IMetadataProvider<SDRState>.BuildMetadata(MetadataBuilder<SDRState> builder)
        {
            SetNotAutoGenerated(builder);

            //builder.Property(_ => _.Entity).NotAutoGenerated();
            builder.Property(_ => _.Name).AutoGenerated().DisplayName("Наименование").Required();
            builder.Property(_ => _.Shifr).AutoGenerated().DisplayName("Шифр").Required();
        }
    }
}