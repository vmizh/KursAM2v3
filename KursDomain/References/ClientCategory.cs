using System;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using Core.Helper;
using Data;
using DevExpress.Mvvm.DataAnnotations;
using KursDomain.Documents.CommonReferences;
using KursDomain.ICommon;
using KursDomain.IReferences;
using KursDomain.References.RedisCache;
using Newtonsoft.Json;

namespace KursDomain.References;

[DebuggerDisplay("{DocCode,nq} {Name,nq} {ParentDC,nq")]
public class ClientCategory : IClientCategory, IDocCode, IName, IEquatable<ClientCategory>, IComparable, ICache
{
    public int CompareTo(object obj)
    {
        var c = obj as Unit;
        return c == null ? 0 : String.Compare(Name, c.Name, StringComparison.Ordinal);
    }
    public decimal DocCode { get; set; }

    public bool Equals(ClientCategory other)
    {
        if (ReferenceEquals(null, other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return DocCode == other.DocCode;
    }

    public string Name { get; set; }
    public string Notes { get; set; }
    [JsonIgnore]
    public string Description => $"Категория контрагента: {Name}";

    public void LoadFromEntity(SD_148 entity)
    {
        if (entity == null)
        {
            DocCode = -1;
            return;
        }

        DocCode = entity.DOC_CODE;
        Name = entity.CK_NAME;
    }

    public override string ToString()
    {
        return Name;
    }

    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj)) return false;
        if (ReferenceEquals(this, obj)) return true;
        if (obj.GetType() != GetType()) return false;
        return Equals((ClientCategory) obj);
    }

    public override int GetHashCode()
    {
        // ReSharper disable once NonReadonlyMemberInGetHashCode
        return DocCode.GetHashCode();
    }

    public void LoadFromCache()
    {
       
    }

    public DateTime LastUpdateServe { get; set; }
}

/// <summary>
/// SD_148 Категория клиента </summary>
[MetadataType(typeof(DataAnnotationsKontragentCategory))]
public class KontragentClientCategory : CategoryClientTypeViewModel
{
    /// <summary>
    /// SD_148
    /// </summary>
    public KontragentClientCategory()
    {
    }

    public KontragentClientCategory(SD_148 entity) : base(entity)
    {
    }

    public override decimal DocCode
    {
        get => Entity.DOC_CODE;
        set
        {
            if (Entity.DOC_CODE == value) return;
            Entity.DOC_CODE = value;
            RaisePropertyChanged();
        }
    }

    public override string Name
    {
        get => Entity.CK_NAME;
        set
        {
            if (Entity.CK_NAME == value) return;
            Entity.CK_NAME = value;
            RaisePropertyChanged();
        }
    }

    public override string ToString()
    {
        return Name;
    }
}

public class DataAnnotationsKontragentCategory : DataAnnotationForFluentApiBase,
    IMetadataProvider<KontragentClientCategory>
{
    void IMetadataProvider<KontragentClientCategory>.BuildMetadata(MetadataBuilder<KontragentClientCategory> builder)
    {
        SetNotAutoGenerated(builder);
        builder.Property(_ => _.Name).AutoGenerated().DisplayName("Наименование");
        //builder.Property(_ => _.IsCanNegativeRest).AutoGenerated().DisplayName("Отрицат.остатки");
        //builder.Property(_ => _.).AutoGenerated().DisplayName("Наименование");
    }
}

