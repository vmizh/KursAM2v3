using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using Core.Helper;
using Core.ViewModel.Base;
using Data;
using DevExpress.Mvvm.DataAnnotations;
using KursDomain.ICommon;
using KursDomain.IReferences;
using KursDomain.References.RedisCache;
using Newtonsoft.Json;

namespace KursDomain.References;

[DebuggerDisplay("{DocCode,nq} {Name,nq}")]
public class SDRState : ISDRState, IDocCode, IName, IEquatable<SDRState>, IComparable, ICache
{
    public int CompareTo(object obj)
    {
        var c = obj as Unit;
        return c == null ? 0 : String.Compare(Name, c.Name, StringComparison.Ordinal);
    }
    public decimal DocCode { get; set; }

    public bool Equals(SDRState other)
    {
        if (ReferenceEquals(null, other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return DocCode == other.DocCode;
    }

    public string Name { get; set; }
    public string Notes { get; set; }
    [JsonIgnore]
    public string Description => $"Статья дох/расх: {Name}";
    public string Shifr { get; set; }
    public decimal? ParentDC { get; set; }
    public bool IsDohod { get; set; }

    public override string ToString()
    {
        return Name;
    }

    public void LoadFromEntity(SD_99 entity)
    {
        if (entity == null)
        {
            DocCode = -1;
            return;
        }

        DocCode = entity.DOC_CODE;
        Shifr = entity.SZ_SHIFR;
        ParentDC = entity.SZ_PARENT_DC;
        IsDohod = entity.SZ_1DOHOD_0_RASHOD == 1;
        Name = entity.SZ_NAME;
    }

    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj)) return false;
        if (ReferenceEquals(this, obj)) return true;
        if (obj.GetType() != GetType()) return false;
        return Equals((SDRState) obj);
    }

    public override int GetHashCode()
    {
        return DocCode.GetHashCode();
    }

    public void LoadFromCache()
    {
        
    }

    public DateTime LastUpdateServe { get; set; }
}

[MetadataType(typeof(DataAnnotationsSDRState))]
public class SDRStateViewModel : RSViewModelBase, IEntity<SD_99>
{
    private SD_99 myEntity;
    private string myShifr;

    public SDRStateViewModel()
    {
        Entity = DefaultValue();
    }

    public SDRStateViewModel(SD_99 entity)
    {
        Entity = entity ?? DefaultValue();
    }

    public string SZ_SHIFR
    {
        get => Entity.SZ_SHIFR;
        set
        {
            if (Entity.SZ_SHIFR == value) return;
            Entity.SZ_SHIFR = value;
            RaisePropertyChanged();
        }
    }

    public decimal? SZ_PARENT_DC
    {
        get => Entity.SZ_PARENT_DC;
        set
        {
            if (Entity.SZ_PARENT_DC == value) return;
            Entity.SZ_PARENT_DC = value;
            RaisePropertyChanged();
        }
    }

    public short? SZ_1DOHOD_0_RASHOD
    {
        get => Entity.SZ_1DOHOD_0_RASHOD;
        set
        {
            if (Entity.SZ_1DOHOD_0_RASHOD == value) return;
            Entity.SZ_1DOHOD_0_RASHOD = value;
            RaisePropertyChanged();
        }
    }

    public override string Name
    {
        get => Entity.SZ_NAME;
        set
        {
            if (Entity.SZ_NAME == value) return;
            Entity.SZ_NAME = value;
            RaisePropertyChanged();
        }
    }

    public override decimal DocCode
    {
        get => Entity.DOC_CODE;
        set
        {
            if (Entity.DOC_CODE == value) return;
            Entity.DOC_CODE = value;
            RaisePropertyChanged();
        }
    }

    public string Shifr
    {
        get => Entity.SZ_SHIFR;
        set
        {
            if (myShifr == value) return;
            myShifr = value;
            Entity.SZ_SHIFR = myShifr;
            RaisePropertyChanged();
        }
    }

    public override decimal? ParentDC
    {
        get => Entity.SZ_PARENT_DC;
        set
        {
            if (Entity.SZ_PARENT_DC == value) return;
            Entity.SZ_PARENT_DC = value;
            RaisePropertyChanged();
        }
    }

    public bool IsAccessRight { get; set; }

    public SD_99 Entity
    {
        get => myEntity;
        set
        {
            if (myEntity == value) return;
            myEntity = value;
            RaisePropertyChanged();
        }
    }

    public SD_99 DefaultValue()
    {
        return new SD_99 {DOC_CODE = -1};
    }

    public override string ToString()
    {
        return Name;
    }

    public List<SD_99> LoadList()
    {
        throw new NotImplementedException();
    }
}

public class DataAnnotationsSDRState : DataAnnotationForFluentApiBase, IMetadataProvider<SDRStateViewModel>
{
    void IMetadataProvider<SDRStateViewModel>.BuildMetadata(MetadataBuilder<SDRStateViewModel> builder)
    {
        SetNotAutoGenerated(builder);

        //builder.Property(_ => _.Entity).NotAutoGenerated();
        builder.Property(_ => _.Name).AutoGenerated().DisplayName("Наименование").Required();
        builder.Property(_ => _.Shifr).AutoGenerated().DisplayName("Шифр").Required();
    }
}
