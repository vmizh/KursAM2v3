using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using System.Linq;
using Core.Helper;
using Core.ViewModel.Base;
using Core.ViewModel.Base.Column;
using Data;
using DevExpress.Mvvm.DataAnnotations;
using KursDomain.ICommon;
using KursDomain.IReferences;

namespace KursDomain.References;

[DebuggerDisplay("{DocCode,nq}/{Id} {Description,nq}")]
public class Employee : IEmployee, IDocCode, IDocGuid, IName, IEquatable<Employee>, IComparable
{
    public int CompareTo(object obj)
    {
        var c = obj as Unit;
        return c == null ? 0 : String.Compare(Name, c.Name, StringComparison.Ordinal);
    }
    public decimal DocCode { get; set; }
    public Guid Id { get; set; }
    public int TabelNumber { get; set; }
    public string NameFirst { get; set; }
    public string NameSecond { get; set; }
    public string NameLast { get; set; }
    public ICurrency Currency { get; set; }
    public string Position { get; set; }
    public bool IsDeleted { get; set; }

    public bool Equals(Employee other)
    {
        if (ReferenceEquals(null, other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return DocCode == other.DocCode;
    }

    public string Name
    {
        get => $"{NameLast} {NameFirst} {NameSecond}";
        set { }
    }

    public string Notes { get; set; }
    public string Description => $"Сотрудник: {Name} Таб.№:{TabelNumber} {Currency}";

    public override string ToString()
    {
        var fName = !string.IsNullOrWhiteSpace(NameFirst) ? NameFirst.ToUpper().First() + "." : null;
        var sName = !string.IsNullOrWhiteSpace(NameSecond) ? NameSecond.ToUpper().First() + "." : null;
        return $"{NameLast} {fName}{sName}";
    }

    public void LoadFromEntity(SD_2 entity, IReferencesCache refCache)
    {
        DocCode = entity.DOC_CODE;
        Currency = refCache.GetCurrency(entity.crs_dc);
        Guid.TryParse(entity.ID, out var id);
        Id = id;
        NameFirst = entity.NAME_FIRST;
        NameLast = entity.NAME_LAST;
        NameSecond = entity.NAME_SECOND;
        TabelNumber = entity.TABELNUMBER;
        Position = entity.STATUS_NOTES;
    }

    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj)) return false;
        if (ReferenceEquals(this, obj)) return true;
        if (obj.GetType() != GetType()) return false;
        return Equals((Employee) obj);
    }

    public override int GetHashCode()
    {
        return DocCode.GetHashCode();
    }
}

public class DataAnnotationsDialogEmployeeViewModel : DataAnnotationForFluentApiBase,
    IMetadataProvider<DialogEmployee>
{
    void IMetadataProvider<DialogEmployee>.BuildMetadata(MetadataBuilder<DialogEmployee> builder)
    {
        SetNotAutoGenerated(builder);
        builder.Property(_ => _.TabelNumber).AutoGenerated().DisplayName("Таб.№");
        builder.Property(_ => _.Name).AutoGenerated().DisplayName("Наименование");
    }
}

[MetadataType(typeof(DataAnnotationsDialogEmployeeViewModel))]
public class DialogEmployee : Employee
{
}

public class EmployeeViewModel : RSViewModelBase, IDataErrorInfo, IEntity<SD_2>
{
    private SD_2 myEntity;

    public EmployeeViewModel()
    {
        Entity = DefaultValue();
    }

    public EmployeeViewModel(SD_2 entity)
    {
        Entity = entity ?? DefaultValue();
    }

    public string NAME_FIRST
    {
        get => Entity.NAME_FIRST;
        set
        {
            if (Entity.NAME_FIRST == value) return;
            Entity.NAME_FIRST = value;
            RaisePropertyChanged();
        }
    }

    public string NAME_LAST
    {
        get => Entity.NAME_LAST;
        set
        {
            if (Entity.NAME_LAST == value) return;
            Entity.NAME_LAST = value;
            RaisePropertyChanged();
        }
    }

    public string NAME_SECOND
    {
        get => Entity.NAME_SECOND;
        set
        {
            if (Entity.NAME_SECOND == value) return;
            Entity.NAME_SECOND = value;
            RaisePropertyChanged();
        }
    }

    public string NAME_OGLY
    {
        get => Entity.NAME_OGLY;
        set
        {
            if (Entity.NAME_OGLY == value) return;
            Entity.NAME_OGLY = value;
            RaisePropertyChanged();
        }
    }

    public short? DELETED
    {
        get => Entity.DELETED;
        set
        {
            if (Entity.DELETED == value) return;
            Entity.DELETED = value;
            RaisePropertyChanged();
        }
    }

    public short? OK_DATA_CHANGED
    {
        get => Entity.OK_DATA_CHANGED;
        set
        {
            if (Entity.OK_DATA_CHANGED == value) return;
            Entity.OK_DATA_CHANGED = value;
            RaisePropertyChanged();
        }
    }

    public DateTime? CHANGE_DATE
    {
        get => Entity.CHANGE_DATE;
        set
        {
            if (Entity.CHANGE_DATE == value) return;
            Entity.CHANGE_DATE = value;
            RaisePropertyChanged();
        }
    }

    public decimal? crs_dc
    {
        get => Entity.crs_dc;
        set
        {
            if (Entity.crs_dc == value) return;
            Entity.crs_dc = value;
            RaisePropertyChanged();
        }
    }

    public int? OLD
    {
        get => Entity.OLD;
        set
        {
            if (Entity.OLD == value) return;
            Entity.OLD = value;
            RaisePropertyChanged();
        }
    }

    public byte[] PHOTO
    {
        get => Entity.PHOTO;
        set
        {
            if (Entity.PHOTO == value) return;
            Entity.PHOTO = value;
            RaisePropertyChanged();
        }
    }

    public string STATUS_NOTES
    {
        get => Entity.STATUS_NOTES;
        set
        {
            if (Entity.STATUS_NOTES == value) return;
            Entity.STATUS_NOTES = value;
            RaisePropertyChanged();
        }
    }

    public SD_301 SD_301
    {
        get => Entity.SD_301;
        set
        {
            if (Entity.SD_301 == value) return;
            Entity.SD_301 = value;
            RaisePropertyChanged();
        }
    }

    public SD_269 SD_269
    {
        get => Entity.SD_269;
        set
        {
            if (Entity.SD_269 == value) return;
            Entity.SD_269 = value;
            RaisePropertyChanged();
        }
    }

    public EntityLoadCodition LoadCondition { get; set; }

    public override decimal DocCode
    {
        get => Entity?.DOC_CODE ?? -1;
        set
        {
            if (Entity.DOC_CODE == value) return;
            Entity.DOC_CODE = value;
            RaisePropertyChanged();
        }
    }

    public virtual int TabelNumber
    {
        get => Entity?.TABELNUMBER ?? -1;
        set
        {
            if (Entity.TABELNUMBER == value) return;
            Entity.TABELNUMBER = value;
            RaisePropertyChanged();
        }
    }

    public override string Name
    {
        get => Entity?.NAME;
        set
        {
            if (Entity.NAME == value) return;
            Entity.NAME = value;
            RaisePropertyChanged();
        }
    }

    public virtual string NameFirst
    {
        get => Entity?.NAME_FIRST;
        set
        {
            if (Entity.NAME_FIRST == value) return;
            Entity.NAME_FIRST = value;
            RaisePropertyChanged();
        }
    }

    public virtual string FirstName
    {
        get => Entity?.NAME_FIRST;
        set
        {
            if (Entity.NAME_FIRST == value) return;
            Entity.NAME_FIRST = value;
            RaisePropertyChanged();
        }
    }

    [GridColumnView("Фамилия", SettingsType.Default)]
    public virtual string NameLast
    {
        get => Entity?.NAME_LAST;
        set
        {
            if (Entity.NAME_LAST == value) return;
            Entity.NAME_LAST = value;
            RaisePropertyChanged();
        }
    }

    public virtual string LastName
    {
        get => Entity?.NAME_LAST;
        set
        {
            if (Entity.NAME_LAST == value) return;
            Entity.NAME_LAST = value;
            RaisePropertyChanged();
        }
    }

    [GridColumnView("Отчество", SettingsType.Default)]
    public virtual string NameSecond
    {
        get => Entity?.NAME_SECOND;
        set
        {
            if (Entity.NAME_SECOND == value) return;
            Entity.NAME_SECOND = value;
            RaisePropertyChanged();
        }
    }

    public virtual string SecondName
    {
        get => Entity?.NAME_SECOND;
        set
        {
            if (Entity.NAME_SECOND == value) return;
            Entity.NAME_SECOND = value;
            RaisePropertyChanged();
        }
    }

    [GridColumnView("Удален", SettingsType.Default)]
    public virtual bool IsDeleted
    {
        get => (Entity.DELETED ?? 0) == 1;
        set
        {
            if ((Entity.DELETED ?? 0) == 1 == value) return;
            Entity.DELETED = (short?) (value ? 1 : 0);
            RaisePropertyChanged();
        }
    }

    [GridColumnView("Фотография", SettingsType.Default)]
    public byte[] Photo
    {
        get => Entity.PHOTO;
        set
        {
            if (Entity.PHOTO == value) return;
            Entity.PHOTO = value;
            RaisePropertyChanged();
        }
    }

    [GridColumnView("Спец. примечание", SettingsType.Default)]
    public virtual string StatusNotes
    {
        get => Entity.STATUS_NOTES;
        set
        {
            if (Entity.STATUS_NOTES == value) return;
            Entity.STATUS_NOTES = value;
            RaisePropertyChanged();
        }
    }

    public virtual Currency Currency
    {
        get { return GlobalOptions.ReferencesCache.GetCurrency(Entity.crs_dc) as Currency; }
        set
        {
            if (value == null)
            {
                Entity.crs_dc = null;
                RaisePropertyChanged();
            }
            else
            {
                if (Entity.crs_dc == value.DocCode) return;
                Entity.crs_dc = value.DocCode;
            }

            RaisePropertyChanged();
        }
    }

    public bool IsAccessRight { get; set; }

    public string Error => string.Empty;

    public string this[string columnName]
    {
        get
        {
            if (columnName == "Name")
                return string.IsNullOrWhiteSpace(Name)
                    ? "Имя сотрудника должно быть обязательно заполнено!"
                    : string.Empty;
            return null;
        }
    }

    public SD_2 Entity
    {
        get => myEntity;
        set
        {
            if (myEntity == value) return;
            myEntity = value;
            RaisePropertyChanged();
        }
    }

    public SD_2 DefaultValue()
    {
        return new SD_2
        {
            DOC_CODE = -1,
            ID = Guid.NewGuid().ToString(),
            DELETED = 0
        };
    }

    public List<SD_2> LoadList()
    {
        throw new NotImplementedException();
    }

    public virtual void Save(SD_2 doc)
    {
        throw new NotImplementedException();
    }

    public void Save()
    {
        throw new NotImplementedException();
    }

    public void Delete()
    {
        throw new NotImplementedException();
    }

    public void Delete(Guid id)
    {
        throw new NotImplementedException();
    }

    public void Delete(decimal dc)
    {
        throw new NotImplementedException();
    }

    public void UpdateFrom(SD_2 ent)
    {
        TabelNumber = ent.TABELNUMBER;
        Name = ent.NAME;
        NAME_FIRST = ent.NAME_FIRST;
        NAME_LAST = ent.NAME_LAST;
        NAME_SECOND = ent.NAME_SECOND;
        NAME_OGLY = ent.NAME_OGLY;
        DELETED = ent.DELETED;
        OK_DATA_CHANGED = ent.OK_DATA_CHANGED;
        CHANGE_DATE = ent.CHANGE_DATE;
        crs_dc = ent.crs_dc;
        OLD = ent.OLD;
        PHOTO = ent.PHOTO;
        STATUS_NOTES = ent.STATUS_NOTES;
        SD_301 = ent.SD_301;
        SD_269 = ent.SD_269;
    }

    public void UpdateTo(SD_2 ent)
    {
        ent.TABELNUMBER = TabelNumber;
        ent.NAME = Name;
        ent.NAME_FIRST = NAME_FIRST;
        ent.NAME_LAST = NAME_LAST;
        ent.NAME_SECOND = NAME_SECOND;
        ent.NAME_OGLY = NAME_OGLY;
        ent.DELETED = DELETED;
        ent.OK_DATA_CHANGED = OK_DATA_CHANGED;
        ent.CHANGE_DATE = CHANGE_DATE;
        ent.crs_dc = crs_dc;
        ent.OLD = OLD;
        ent.PHOTO = PHOTO;
        ent.STATUS_NOTES = STATUS_NOTES;
        ent.SD_301 = SD_301;
        ent.SD_269 = SD_269;
    }

    public SD_2 Load(decimal dc, bool isShort = true)
    {
        throw new NotImplementedException();
    }

    public SD_2 Load(Guid id, bool isShort = true)
    {
        throw new NotImplementedException();
    }

    public virtual SD_2 Load(decimal dc)
    {
        throw new NotImplementedException();
    }

    public virtual SD_2 Load(Guid id)
    {
        throw new NotImplementedException();
    }

    public override string ToString()
    {
        return
            $"{LastName} {(!string.IsNullOrEmpty(FirstName) ? FirstName.ToUpper().First() + "." : null)}" +
            $"{(!string.IsNullOrEmpty(SecondName) ? SecondName.ToUpper().First() + "." : null)}";
    }
}
