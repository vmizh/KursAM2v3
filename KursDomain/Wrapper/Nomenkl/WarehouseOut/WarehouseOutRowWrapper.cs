using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Core.Helper;
using Data;
using DevExpress.Mvvm.DataAnnotations;
using KursDomain.Documents.CommonReferences;
using KursDomain.Event;
using KursDomain.ICommon;
using KursDomain.IReferences;
using Newtonsoft.Json;
using Prism.Events;

namespace KursDomain.Wrapper.Nomenkl.WarehouseOut;

[MetadataType(typeof(DataAnnotationsWarehouseOutRowWrapper))]
public class WarehouseOutRowWrapper : TD_24BaseWrapper
{
    private decimal myMaxQuantity;
    private TD_24BaseWrapper myWarehouseOrderIn;

    public WarehouseOutRowWrapper(TD_24 model, IReferencesCache cache, ALFAMEDIAEntities ctx,
        IEventAggregator eventAggregator, IMessageDialogService messageDialogService) : base(model, cache, ctx,
        eventAggregator, messageDialogService)
    {
    }

    #region Error

    protected override IEnumerable<string> ValidateProperty(string propertyName)
    {
        switch (propertyName)
        {
            case nameof(QuantityOut):
                if (QuantityOut < 0 || QuantityOut > MaxQuantity)
                    yield return $"Кол-во не может быть отрицательным или превышать {MaxQuantity}";

                break;
        }
    }

    #endregion

    #region Methods

    public override object ToJson()
    {
        var res = new
        {
            DocCode,
            Code,
            Номенклатурный_номер = NomNomenkl,
            Наименование = Nomenkl.Name,
            Количество = QuantityOut,
            Ед_изм = Unit.Name,
            Счет_дох_расх = SHPZ?.Name,
            Связ_документ = WarehouseOrderInText ?? "-"
        };
        return JsonConvert.SerializeObject(res);
    }

    #endregion

   

    #region Properties

    public TD_24BaseWrapper WarehouseOrderIn
    {
        set
        {
            if (Equals(value, myWarehouseOrderIn)) return;
            myWarehouseOrderIn = value;
            RaisePropertyChanged();
        }
        get => myWarehouseOrderIn;
    }

    public string WarehouseOrderInText
    {
        get
        {
            if (myWarehouseOrderIn?.Model.SD_24 != null)
            {
                var num = string.IsNullOrWhiteSpace(myWarehouseOrderIn.Model.SD_24.DD_EXT_NUM)
                    ? $"№{myWarehouseOrderIn.Model.SD_24.DD_IN_NUM}"
                    : $"№{myWarehouseOrderIn.Model.SD_24.DD_IN_NUM}/{myWarehouseOrderIn.Model.SD_24.DD_EXT_NUM}";
                return
                    $"Прих. складской ордер {num} от {myWarehouseOrderIn.Model.SD_24.DD_DATE.ToString(GlobalOptions.SystemProfile.GetShortDateFormat())}";

            }
            return null;
        }
    }


    public string NomNomenkl => Nomenkl?.NomenklNumber;

    public decimal MaxQuantity
    {
        set
        {
            if (value == myMaxQuantity) return;
            myMaxQuantity = value;
            RaisePropertyChanged();
        }
        get => myMaxQuantity;
    }

    #endregion
    
    #region Methods

    public override void RaisePropertyChanged(string propertyName = null)
    {
        base.RaisePropertyChanged(propertyName); 
        if (propertyName == "State") return;
        EventAggregator.GetEvent<AfterUpdateBaseWrapperEvent<WarehouseOutWrapper>>()
            .Publish(new AfterUpdateBaseWrapperEventArgs<WarehouseOutWrapper>()
            {
                DocCode = DocCode,
                DocumentType = DocumentType.StoreOrderOut,
                Id = Id,
                wrapper = this,
                FieldName = propertyName
            });
    }

    #endregion
}
 public class DataAnnotationsWarehouseOutRowWrapper : DataAnnotationForFluentApiBase,
        IMetadataProvider<WarehouseOutRowWrapper>
    {
        void IMetadataProvider<WarehouseOutRowWrapper>.BuildMetadata(
            MetadataBuilder<WarehouseOutRowWrapper> builder)
        {
            SetNotAutoGenerated(builder);
            builder.Property(_ => _.Currency).NotAutoGenerated();
            builder.Property(_ => _.Diler).NotAutoGenerated();
            builder.Property(_ => _.InvoiceProviderRow).NotAutoGenerated();
            builder.Property(_ => _.NomNomenkl).AutoGenerated().DisplayName("Номенклатурный номер").ReadOnly();
            builder.Property(_ => _.Nomenkl).AutoGenerated().DisplayName("Наименование материала").ReadOnly();
            builder.Property(_ => _.QuantityOut).AutoGenerated().DisplayName("Кол-во отгрузка")
                .DisplayFormatString(GlobalOptions.SystemProfile.GetQuantityValueNumberFormat());
            builder.Property(_ => _.Unit).AutoGenerated().DisplayName("Ед.изм.").ReadOnly();
            builder.Property(_ => _.MaxQuantity).AutoGenerated().DisplayName("Максимально")
                .DisplayFormatString(GlobalOptions.SystemProfile.GetQuantityValueNumberFormat()).ReadOnly();
            builder.Property(_ => _.SHPZ).AutoGenerated().DisplayName("Счет дох/расх");
            builder.Property(_ => _.WarehouseOrderInText).AutoGenerated().DisplayName("Связанный док-т").ReadOnly();
            builder.Property(_ => _.WarehouseOrderIn).NotAutoGenerated();
            builder.Property(_ => _.InvoiceClientRow).NotAutoGenerated();
            builder.Property(_ => _.WarehouseOut).NotAutoGenerated();
            builder.Property(_ => _.NomenklCurrency).NotAutoGenerated();
            builder.Property(_ => _.WarehouseOrderOutRow).NotAutoGenerated();
            //TODO Добавить связь с приходным складским ордером
            //builder.Property(_ => _.W).AutoGenerated().DisplayName("Связанный док-т").ReadOnly();
            builder.Property(_ => _.IsFactExecuted).NotAutoGenerated();
            builder.Property(_ => _.IsFactExecuted).NotAutoGenerated();
            builder.Property(_ => _.Note).AutoGenerated().DisplayName("Примечание");
        }
    }
