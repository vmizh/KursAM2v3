using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Core.Helper;
using Core.ViewModel.Base;
using Data;
using DevExpress.Mvvm.DataAnnotations;
using KursDomain.Documents.CommonReferences;

namespace KursDomain.Documents.Systems;

[MetadataType(typeof(LastDocument_FluentAPI))]
public class LastDocumentViewModel : RSViewModelBase, IEntity<LastDocument>
{
    private LastDocument myEntity;

    public LastDocumentViewModel(LastDocument entity)
    {
        Entity = entity ?? DefaultValue();
    }

    [Display(Name = "Id", AutoGenerateField = false)]
    public override Guid Id
    {
        get => Entity.Id;
        set
        {
            if (Entity.Id == value) return;
            Entity.Id = value;
            RaisePropertyChanged();
        }
    }

    [Display(Name = "Тип документа")]
    public string DocumentType => ((DocumentType)Entity.DocType)
        .GetDisplayAttributesFrom(typeof(DocumentType)).Name;

    public override string Description => Entity.Description;

    [Display(Name = "Создатель")]
    public string Creator
    {
        get => Entity.Creator;
        set
        {
            if (Entity.Creator == value) return;
            Entity.Creator = value;
            RaisePropertyChanged();
        }
    }

    [Display(Name = "Дата последнего входа")]
    public DateTime LastOpen
    {
        get => Entity.LastOpen;
        set
        {
            if (Entity.LastOpen == value) return;
            Entity.LastOpen = value;
            RaisePropertyChanged();
        }
    }

    public override decimal DocCode => Entity.DocDC ?? 0;

    [Display(Name = "IsAccess", AutoGenerateField = false)]
    public bool IsAccessRight { get; set; }

    [Display(Name = "Entity", AutoGenerateField = false)]
    public LastDocument Entity
    {
        get => myEntity;
        set
        {
            if (myEntity == value) return;
            myEntity = value;
            RaisePropertyChanged();
        }
    }
    [Display(Name = "Удален", AutoGenerateField = true)]
    public bool IsDeleted { set; get; }

    public LastDocument DefaultValue()
    {
        return new LastDocument
        {
            Id = Guid.NewGuid()
        };
    }

    public List<LastDocument> LoadList()
    {
        return null;
    }
}

public class LastDocument_FluentAPI : DataAnnotationForFluentApiBase, IMetadataProvider<LastDocumentViewModel>
{
    void IMetadataProvider<LastDocumentViewModel>.BuildMetadata(
        MetadataBuilder<LastDocumentViewModel> builder)
    {
        SetNotAutoGenerated(builder);
        builder.Property(_ => _.Description).AutoGenerated().DisplayName("Описание").ReadOnly();
        builder.Property(_ => _.DocumentType).AutoGenerated().DisplayName("Тип документа").ReadOnly();
        builder.Property(_ => _.Creator).AutoGenerated().DisplayName("Создатель").ReadOnly();
        builder.Property(_ => _.LastOpen).AutoGenerated().DisplayName("Последний вход").ReadOnly();
        builder.Property(_ => _.IsDeleted).AutoGenerated().DisplayName("Удален").ReadOnly();
    }
}

[MetadataType(typeof(LastUsersDocument_FluentAPI))]
public class LastUsersDocumentViewModel : LastDocumentViewModel
{
    private KursUser myUser;

    public LastUsersDocumentViewModel(LastDocument entity) : base(entity)
    {
        User = new KursUser(entity.Users);
    }

    public KursUser User
    {
        get => myUser;
        set
        {
            if (myUser == value) return;
            myUser = value;
            RaisePropertyChanged();
        }
    }

    public string UserName => User?.FullName;
}

public class LastUsersDocument_FluentAPI : DataAnnotationForFluentApiBase, IMetadataProvider<LastUsersDocumentViewModel>
{
    void IMetadataProvider<LastUsersDocumentViewModel>.BuildMetadata(
        MetadataBuilder<LastUsersDocumentViewModel> builder)
    {
        SetNotAutoGenerated(builder);
        builder.Property(_ => _.Description).AutoGenerated().DisplayName("Описание").ReadOnly();
        builder.Property(_ => _.DocumentType).AutoGenerated().DisplayName("Тип документа").ReadOnly();
        builder.Property(_ => _.Creator).AutoGenerated().DisplayName("Создатель").ReadOnly();
        builder.Property(_ => _.LastOpen).AutoGenerated().DisplayName("Последний вход").ReadOnly();
        builder.Property(_ => _.User).AutoGenerated().DisplayName("Пользователь").ReadOnly();
        builder.Property(_ => _.UserName).AutoGenerated().DisplayName("Полное имя").ReadOnly();
    }
}
