using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Core.Helper;
using Core.ViewModel.Base;
using Data;
using DevExpress.Mvvm.DataAnnotations;

namespace Core.EntityViewModel.CommonReferences
{
    /// <summary>
    ///     Счет доходов и расходов
    /// </summary>
    // ReSharper disable once InconsistentNaming
    [MetadataType(typeof(DataAnnotationsSDRSchet))]
    public class SDRSchet : RSViewModelBase, IEntity<SD_303>
    {
        private SD_303 myEntity;


        private string mySHPZ_SHIRF;

        public SDRSchet()
        {
            Entity = DefaultValue();
        }

        public SD_303 DefaultValue()
        {
            return new SD_303 {DOC_CODE = -1};
        }

        public SDRSchet(SD_303 entity)
        {
            Entity = entity ?? new SD_303 {DOC_CODE = -1};
        }

        public SD_303 Entity
        {
            get => myEntity;
            set
            {
                if (myEntity == value) return;
                myEntity = value;
                RaisePropertyChanged();
            }
        }

        public new string Name
        {
            get => Entity.SHPZ_NAME;
            set
            {
                if (Entity.SHPZ_NAME == value) return;
                Entity.SHPZ_NAME = value;
                RaisePropertyChanged();
            }
        }

        public string SHPZ_SHIRF
        {
            get => mySHPZ_SHIRF;
            set
            {
                if (mySHPZ_SHIRF == value) return;
                mySHPZ_SHIRF = value;
                RaisePropertyChanged();
            }
        }

        public override decimal DocCode
        {
            get => Entity.DOC_CODE;
            set
            {
                if (Entity.DOC_CODE == value) return;
                Entity.DOC_CODE = value;
                RaisePropertyChanged();
            }
        }

        public decimal? SHPZ_STATIA_DC
        {
            get => Entity.SHPZ_STATIA_DC;
            set
            {
                if (Entity.SHPZ_STATIA_DC == value) return;
                Entity.SHPZ_STATIA_DC = value;
                RaisePropertyChanged();
            }
        }

        public bool IsAccessRight { get; set; }

        public List<SD_303> LoadList()
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            return Name;
        }
    }

    public class DataAnnotationsSDRSchet : DataAnnotationForFluentApiBase, IMetadataProvider<SDRSchet>
    {
        void IMetadataProvider<SDRSchet>.BuildMetadata(MetadataBuilder<SDRSchet> builder)
        {
            SetNotAutoGenerated(builder);

            //builder.Property(_ => _.Entity).NotAutoGenerated();
            builder.Property(_ => _.Name).AutoGenerated().DisplayName("Наименование").Required();
            builder.Property(_ => _.SHPZ_SHIRF).AutoGenerated().DisplayName("Шифр").Required();
        }
    }
}