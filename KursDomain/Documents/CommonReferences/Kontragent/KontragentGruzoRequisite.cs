using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Core.Helper;
using Core.ViewModel.Base;
using Data;
using DevExpress.Mvvm.DataAnnotations;

// ReSharper disable InconsistentNaming
namespace KursDomain.Documents.CommonReferences.Kontragent;

public class DataAnnotationsKontragentGruzoRequisite : DataAnnotationForFluentApiBase,
    IMetadataProvider<KontragentGruzoRequisite>
{
    void IMetadataProvider<KontragentGruzoRequisite>.BuildMetadata(MetadataBuilder<KontragentGruzoRequisite> builder)
    {
        //SetNotAutoGenerated(builder);
        builder.Property(_ => _.Name).NotAutoGenerated();
        builder.Property(_ => _.Note).NotAutoGenerated();
        //builder.Property(_ => _.Note).AutoGenerated();
    }
}

[MetadataType(typeof(DataAnnotationsKontragentGruzoRequisite))]
public class KontragentGruzoRequisite : RSViewModelBase, IEntity<SD_43_GRUZO>
{
    private SD_43_GRUZO myEntity;

    public KontragentGruzoRequisite()
    {
        Entity = new SD_43_GRUZO { Id = Guid.NewGuid() };
    }

    public KontragentGruzoRequisite(SD_43_GRUZO entity)
    {
        Entity = entity ?? new SD_43_GRUZO { Id = Guid.NewGuid() };
    }

    public override Guid Id
    {
        get => Entity.Id;
        set
        {
            if (Entity.Id == value) return;
            Entity.Id = value;
            RaisePropertyChanged();
        }
    }

    [Display(AutoGenerateField = false)]
    public override decimal DocCode
    {
        get => Entity.doc_code;
        set
        {
            if (Entity.doc_code == value) return;
            Entity.doc_code = value;
            RaisePropertyChanged();
        }
    }

    [Display(AutoGenerateField = true, Name = "По умолчанию")]
    public bool? IsDefault
    {
        get => Entity.IsDefault;
        set
        {
            if (Entity.IsDefault == value) return;
            Entity.IsDefault = value;
            RaisePropertyChanged();
        }
    }

    [Display(AutoGenerateField = true, Name = "Для счетов")]
    public string GRUZO_TEXT_SF
    {
        get => Entity.GRUZO_TEXT_SF;
        set
        {
            if (Entity.GRUZO_TEXT_SF == value) return;
            Entity.GRUZO_TEXT_SF = value;
            RaisePropertyChanged();
        }
    }

    [Display(AutoGenerateField = true, Name = "ОКПО")]
    public string OKPO
    {
        get => Entity.OKPO;
        set
        {
            if (Entity.OKPO == value) return;
            Entity.OKPO = value;
            RaisePropertyChanged();
        }
    }

    [Display(AutoGenerateField = false)]
    public DateTime? CHANGED_DATE
    {
        get => Entity.CHANGED_DATE;
        set
        {
            if (Entity.CHANGED_DATE == value) return;
            Entity.CHANGED_DATE = value;
            RaisePropertyChanged();
        }
    }

    [Display(AutoGenerateField = true, Name = "Для накладных")]
    public string GRUZO_TEXT_NAKLAD
    {
        get => Entity.GRUZO_TEXT_NAKLAD;
        set
        {
            if (Entity.GRUZO_TEXT_NAKLAD == value) return;
            Entity.GRUZO_TEXT_NAKLAD = value;
            RaisePropertyChanged();
        }
    }

    [Display(AutoGenerateField = false)]
    public SD_43 SD_43
    {
        get => Entity.SD_43;
        set
        {
            if (Entity.SD_43 == value) return;
            Entity.SD_43 = value;
            RaisePropertyChanged();
        }
    }

    [Display(AutoGenerateField = false)] public EntityLoadCodition LoadCondition { get; set; }

    [Display(AutoGenerateField = false)] public bool IsAccessRight { get; set; }

    [Display(AutoGenerateField = false)]
    public SD_43_GRUZO Entity
    {
        get => myEntity;
        set
        {
            if (myEntity == value) return;
            myEntity = value;
            RaisePropertyChanged();
        }
    }

    public SD_43_GRUZO DefaultValue()
    {
        return new SD_43_GRUZO
        {
            Id = Guid.NewGuid(),
            doc_code = -1
        };
    }

    public List<SD_43_GRUZO> LoadList()
    {
        throw new NotImplementedException();
    }

    public virtual void Save(SD_43_GRUZO doc)
    {
        throw new NotImplementedException();
    }

    public void Save()
    {
        throw new NotImplementedException();
    }

    public void Delete()
    {
        throw new NotImplementedException();
    }

    public void Delete(Guid id)
    {
        throw new NotImplementedException();
    }

    public void Delete(decimal dc)
    {
        throw new NotImplementedException();
    }

    public void UpdateFrom(SD_43_GRUZO ent)
    {
        GRUZO_TEXT_SF = ent.GRUZO_TEXT_SF;
        OKPO = ent.OKPO;
        CHANGED_DATE = ent.CHANGED_DATE;
        GRUZO_TEXT_NAKLAD = ent.GRUZO_TEXT_NAKLAD;
        Id = ent.Id;
        SD_43 = ent.SD_43;
    }

    public void UpdateTo(SD_43_GRUZO ent)
    {
        ent.GRUZO_TEXT_SF = GRUZO_TEXT_SF;
        ent.OKPO = OKPO;
        ent.CHANGED_DATE = CHANGED_DATE;
        ent.GRUZO_TEXT_NAKLAD = GRUZO_TEXT_NAKLAD;
        ent.Id = Id;
        ent.SD_43 = SD_43;
    }

    // ReSharper disable once MethodOverloadWithOptionalParameter
    public SD_43_GRUZO Load(decimal dc, bool isShort = true)
    {
        throw new NotImplementedException();
    }

    // ReSharper disable once MethodOverloadWithOptionalParameter
    public SD_43_GRUZO Load(Guid id, bool isShort = true)
    {
        throw new NotImplementedException();
    }

    public virtual SD_43_GRUZO Load(decimal dc)
    {
        throw new NotImplementedException();
    }

    public virtual SD_43_GRUZO Load(Guid id)
    {
        throw new NotImplementedException();
    }
}
