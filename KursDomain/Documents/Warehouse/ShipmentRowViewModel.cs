using System;
using System.ComponentModel.DataAnnotations;
using Core.Helper;
using Data;
using DevExpress.Mvvm.DataAnnotations;
using KursDomain;
using KursDomain.Documents.NomenklManagement;
using KursDomain.References;

namespace Core.EntityViewModel;

[MetadataType(typeof(DataAnnotationsShipmentRowViewModel))]
public class ShipmentRowViewModel : TD_24ViewModel
{
#pragma warning disable 649
    private Waybill myWaybill;
#pragma warning restore 649

    public ShipmentRowViewModel()
    {
        Entity = DefaultValue();
    }

    public ShipmentRowViewModel(TD_24 entity, bool isParentInclude = false)
    {
        Entity = entity ?? DefaultValue();
        if (isParentInclude && Entity.SD_24 != null)
            Waybill = new Waybill(Entity.SD_24);
        myNomenkl = GlobalOptions.ReferencesCache.GetNomenkl(DDT_NOMENKL_DC) as Nomenkl;
    }

    private Nomenkl myNomenkl;


    public new Nomenkl Nomenkl
    {
        get => myNomenkl;// GlobalOptions.ReferencesCache.GetNomenkl(Entity.DDT_NOMENKL_DC) as Nomenkl;
        set
        {
            if (Entity.DDT_NOMENKL_DC == value.DocCode) return;
            myNomenkl = value;
            Entity.DDT_NOMENKL_DC = value.DocCode;
            RaisePropertyChanged();
        }
    }

    public DateTime? DocDate => Entity.SD_24?.DD_DATE;
    public int? DocInNum => Entity.SD_24?.DD_IN_NUM;
    public string DocExtNum => Entity.SD_24?.DD_EXT_NUM;

    public Warehouse Warehouse => GlobalOptions.ReferencesCache.GetWarehouse(Entity?.SD_24?.DD_SKLAD_OTPR_DC) as Warehouse;

    public Waybill Waybill
    {
        get => myWaybill;
        set
        {
            if (myWaybill == value) return;
            RaisePropertyChanged();
        }
    }

    public string NomenklNom => Nomenkl?.NomenklNumber;
    public override Unit Unit => (Unit)Nomenkl?.Unit;
}

public class DataAnnotationsShipmentRowViewModel : DataAnnotationForFluentApiBase,
    IMetadataProvider<ShipmentRowViewModel>
{
    void IMetadataProvider<ShipmentRowViewModel>.BuildMetadata(MetadataBuilder<ShipmentRowViewModel> builder)
    {
        SetNotAutoGenerated(builder);
        builder.Property(_ => _.InvoiceProvider).NotAutoGenerated();
        builder.Property(_ => _.Waybill).NotAutoGenerated();
        builder.Property(_ => _.InvoiceClientViewModel).NotAutoGenerated();
        builder.Property(_ => _.InvoiceProviderRow).NotAutoGenerated();
        builder.Property(_ => _.Currency).NotAutoGenerated();
        builder.Property(_ => _.Diler).NotAutoGenerated();
        builder.Property(_ => _.SDRSchet).NotAutoGenerated();
        builder.Property(_ => _.DocInNum).AutoGenerated().DisplayName("Внутр.№").LocatedAt(1).ReadOnly();
        builder.Property(_ => _.DocExtNum).AutoGenerated().DisplayName("Внешн.№").LocatedAt(2).ReadOnly();
        builder.Property(_ => _.DocDate).AutoGenerated().DisplayName("Дата").LocatedAt(3).ReadOnly();
        builder.Property(_ => _.Warehouse).AutoGenerated().DisplayName("Склад").LocatedAt(4).ReadOnly();
        builder.Property(_ => _.NomenklNom).AutoGenerated().DisplayName("Ном.№").LocatedAt(5).ReadOnly();
        builder.Property(_ => _.Nomenkl).AutoGenerated().DisplayName("Наименование").LocatedAt(6).ReadOnly();
        builder.Property(_ => _.DDT_KOL_RASHOD).AutoGenerated().DisplayName("Кол-во").LocatedAt(7).ReadOnly();
        builder.Property(_ => _.Unit).AutoGenerated().DisplayName("Ед.изм.").LocatedAt(8).ReadOnly();
    }
}
