using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Core.Helper;
using Core.ViewModel.Base;
using Data;
using DevExpress.Mvvm.DataAnnotations;

namespace Core.EntityViewModel.Periods
{
    [MetadataType(typeof(DataAnnotationsPERIOD_CLOSEDViewModel))]
    public class PERIOD_CLOSEDViewModel : RSViewModelBase, IEntity<PERIOD_CLOSED>
    {
        private PERIOD_CLOSED myEntity;

        public PERIOD_CLOSEDViewModel()
        {
            Entity = new PERIOD_CLOSED();
        }

        public PERIOD_CLOSEDViewModel(PERIOD_CLOSED entity)
        {
            Entity = entity ?? new PERIOD_CLOSED();
        }

        public override string Name => Entity.CLOSED_DOC_TYPE.NAME;

        public override Guid Id
        {
            get => Entity.ID;
            set
            {
                if (Entity.ID == value) return;
                Entity.ID = value;
                RaisePropertyChanged();
            }
        }

        public Guid TYPE_ID
        {
            get => Entity.TYPE_ID;
            set
            {
                if (Entity.TYPE_ID == value) return;
                Entity.TYPE_ID = value;
                RaisePropertyChanged();
            }
        }

        public DateTime DateClosed
        {
            get => Entity.DateClosed;
            set
            {
                if (Entity.DateClosed == value) return;
                Entity.DateClosed = value;
                RaisePropertyChanged();
            }
        }

        public PERIOD_CLOSED Entity
        {
            get => myEntity;
            set
            {
                if (myEntity == value) return;
                myEntity = value;
                RaisePropertyChanged();
            }
        }

        public EntityLoadCodition LoadCondition { get; set; }

        public List<PERIOD_CLOSED> LoadList()
        {
            throw new NotImplementedException();
        }

        public bool IsAccessRight { get; set; }

        public virtual PERIOD_CLOSED Load(decimal dc)
        {
            throw new NotImplementedException();
        }

        public virtual PERIOD_CLOSED Load(Guid id)
        {
            throw new NotImplementedException();
        }

        public virtual void Save(PERIOD_CLOSED doc)
        {
            throw new NotImplementedException();
        }

        public void Save()
        {
            throw new NotImplementedException();
        }

        public void Delete()
        {
            throw new NotImplementedException();
        }

        public void Delete(Guid id)
        {
            throw new NotImplementedException();
        }

        public void Delete(decimal dc)
        {
            throw new NotImplementedException();
        }

        public void UpdateFrom(PERIOD_CLOSED ent)
        {
            Id = ent.ID;
            TYPE_ID = ent.TYPE_ID;
            DateClosed = ent.DateClosed;
            Name = ent.CLOSED_DOC_TYPE.NAME;
            //CLOSED_DOC_TYPE = ent.CLOSED_DOC_TYPE;
            //PERIOD_CLOSED_EXCLUDE = ent.PERIOD_CLOSED_EXCLUDE;
        }

        public void UpdateTo(PERIOD_CLOSED ent)
        {
            ent.ID = Id;
            ent.TYPE_ID = TYPE_ID;
            ent.DateClosed = DateClosed;
            ent.CLOSED_DOC_TYPE.NAME = Name;
            //ent.CLOSED_DOC_TYPE = CLOSED_DOC_TYPE;
            //ent.PERIOD_CLOSED_EXCLUDE = PERIOD_CLOSED_EXCLUDE;
        }

        public PERIOD_CLOSED DefaultValue()
        {
            throw new NotImplementedException();
        }
    }

    public class DataAnnotationsPERIOD_CLOSEDViewModel : DataAnnotationForFluentApiBase,
        IMetadataProvider<PERIOD_CLOSEDViewModel>
    {
        void IMetadataProvider<PERIOD_CLOSEDViewModel>.BuildMetadata(MetadataBuilder<PERIOD_CLOSEDViewModel> builder)
        {
            SetNotAutoGenerated(builder);
            builder.Property(_ => _.Name).AutoGenerated().ReadOnly().DisplayName("Операции");
            builder.Property(_ => _.DateClosed).AutoGenerated().DisplayName("Дата закрытия");
        }
    }
}