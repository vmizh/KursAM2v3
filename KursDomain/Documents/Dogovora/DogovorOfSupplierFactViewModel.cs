using System.ComponentModel.DataAnnotations;
using Core.EntityViewModel.NomenklManagement;
using Core.Helper;
using Core.ViewModel.Base;
using DevExpress.Mvvm.DataAnnotations;

namespace Core.EntityViewModel.Dogovora
{
    public class DogovorOfSupplierFactViewModel_FluentAPI : DataAnnotationForFluentApiBase,
        IMetadataProvider<DogovorOfSupplierFactViewModel>
    {
        void IMetadataProvider<DogovorOfSupplierFactViewModel>.BuildMetadata(
            MetadataBuilder<DogovorOfSupplierFactViewModel> builder)
        {
            SetNotAutoGenerated(builder);
            builder.Property(_ => _.Summa).AutoGenerated().DisplayName("Сумма").DisplayFormatString("n2");
            builder.Property(_ => _.Quantity).AutoGenerated().DisplayName("Кол-во").DisplayFormatString("n4");
            builder.Property(_ => _.Nomenkl).AutoGenerated().DisplayName("Номенклатура").ReadOnly();
            builder.Property(_ => _.NomenklNumber).AutoGenerated().DisplayName("Ном.№").ReadOnly();
            builder.Property(_ => _.Unit).AutoGenerated().DisplayName("Ев.изм.").ReadOnly();
            builder.Property(_ => _.Price).AutoGenerated().DisplayName("Цена").DisplayFormatString("n2");
            builder.Property(_ => _.Note).AutoGenerated().DisplayName("Примечание");
            builder.Property(_ => _.SPostInfo).AutoGenerated().DisplayName("Счет-фактура");
            builder.Property(_ => _.SFactNote).AutoGenerated().DisplayName("Примечание(с-ф");
            builder.Property(_ => _.OrderInInfo).AutoGenerated().DisplayName("Приходный ордер");
            builder.Property(_ => _.OrderInNote).AutoGenerated().DisplayName("Примечание(прих. орд.)");

        }
    }
    [MetadataType(typeof(DogovorOfSupplierFactViewModel_FluentAPI))]
    public class DogovorOfSupplierFactViewModel : RSViewModelBase
    {
        #region Fields

        private decimal myQuantity;
        private decimal myPrice;
        private decimal mySumma;
        private string mySPostInfo;
        private string myOrderInInfo;
        private string mySFactNote;
        private string myOrderInNote;
        private decimal mySPostDC;
        private Nomenkl myNomenkl;
        private decimal myOrderInDC;

        #endregion

        #region Constructors

        #endregion

        #region Properties

        public Nomenkl Nomenkl
        {
            get => myNomenkl;
            set
            {
                if (myNomenkl == value) return;
                myNomenkl = value;
                RaisePropertyChanged();
            }
        }

        public string NomenklNumber => Nomenkl?.NomenklNumber;
        public Unit Unit => Nomenkl?.Unit;

        public decimal Quantity
        {
            get => myQuantity;
            set
            {
                if (myQuantity == value) return;
                myQuantity = value;
                RaisePropertyChanged();
            }
        }

        public decimal Price
        {
            get => myPrice;
            set
            {
                if (myPrice == value) return;
                myPrice = value;
                RaisePropertyChanged();
            }
        }

        public decimal Summa
        {
            get => mySumma;
            set
            {
                if (mySumma == value) return;
                mySumma = value;
                RaisePropertyChanged();
            }
        }

        public decimal SPostDC
        {
            get => mySPostDC;
            set
            {
                if (mySPostDC == value) return;
                mySPostDC = value;
                RaisePropertyChanged();
            }
        }

        public string SPostInfo
        {
            get => mySPostInfo;
            set
            {
                if (mySPostInfo == value) return;
                mySPostInfo = value;
                RaisePropertyChanged();
            }
        }

        public string SFactNote
        {
            get => mySFactNote;
            set
            {
                if (mySFactNote == value) return;
                mySFactNote = value;
                RaisePropertyChanged();
            }
        }

        public decimal OrderInDC
        {
            get => myOrderInDC;
            set
            {
                if (myOrderInDC == value) return;
                myOrderInDC = value;
                RaisePropertyChanged();
            }
        }

        public string OrderInInfo
        {
            get => myOrderInInfo;
            set
            {
                if (myOrderInInfo == value) return;
                myOrderInInfo = value;
                RaisePropertyChanged();
            }
        }

        public string OrderInNote
        {
            get => myOrderInNote;
            set
            {
                if (myOrderInNote == value) return;
                myOrderInNote = value;
                RaisePropertyChanged();
            }
        }

        #endregion

        #region Methods

        #endregion

        #region Commands

        #endregion
    }
}