using System;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Windows.Controls;
using Core.Helper;
using Data;
using DevExpress.Mvvm.DataAnnotations;
using KursDomain.ICommon;
using KursDomain.Managers;

namespace KursDomain.Documents.NomenklManagement;

/// <summary>
///     Расходный складской ордер
/// </summary>
[MetadataType(typeof(DataAnnotationsWarehouseStorageOrderOut))]
public sealed class WarehouseOrderOut : SD_24ViewModel
{
    //public string Receiver => KontragentReceiver != null ? KontragentReceiver.Name : WarehouseIn?.Name;
    private WarehouseSenderType myWarehouseSenderType;
    private NomenklManager2 nomenklManager = new NomenklManager2(GlobalOptions.GetEntities());

    public WarehouseOrderOut()
    {
        Entity.DD_DATE = DateTime.Today;
        Entity.DD_TYPE_DC = 2010000003;
        Id = Guid.NewGuid();
        State = RowStatus.NewRow;
        CREATOR = GlobalOptions.UserInfo.NickName;
    }


    public WarehouseOrderOut(SD_24 entity) : base(entity)
    {
        Entity = entity ?? DefaultValue();
        var data = Entity.TD_24;
        if (data != null && data.Count != 0)
            foreach (var item in data)
            {
                var r = new WarehouseOrderOutRow(item) { Parent = this };
                Rows.Add(r);
            }

        myState = RowStatus.NotEdited;
        foreach (var r in Rows) r.myState = RowStatus.NotEdited;
        Rows.CollectionChanged += (o, args) => State = RowStatus.Edited;
    }


    public override DateTime Date
    {
        get => Entity.DD_DATE;
        set
        {
            if (Entity.DD_DATE == value) return;
            UpdateMaxQuantity();
            Entity.DD_DATE = value;
            RaisePropertyChanged();
        }
    }

    public void UpdateMaxQuantity()
    {
        using (var ctx = GlobalOptions.GetEntities())
        {
            DateTime dateOld = ctx.SD_24.FirstOrDefault(_ => _.DOC_CODE == DocCode)?.DD_DATE ?? Date;
            foreach (var r in Rows)
            {
                decimal oldQuan = 0;
                var nq = nomenklManager.GetNomenklQuantity(WarehouseOut.DocCode, r.Nomenkl.DocCode,
                    Entity.DD_DATE, Entity.DD_DATE);

                if (State != RowStatus.NewRow && Entity.DD_DATE > dateOld)
                {


                    var d = ctx.TD_24.FirstOrDefault(_ => _.DOC_CODE == r.DocCode && _.CODE == r.Code);
                    oldQuan = d?.DDT_KOL_RASHOD ?? 0;
                }


                r.MaxQuantity = nq.Count > 0 ? nq.First().OstatokQuantity + oldQuan : 0;
                if (r.Quantity > r.MaxQuantity)
                    r.Quantity = r.MaxQuantity;
            }
        }
    }

    public ObservableCollection<WarehouseOrderOutRow> Rows { set; get; } =
        new ObservableCollection<WarehouseOrderOutRow>();

    public ObservableCollection<WarehouseOrderOutRow> DeletedRows { get; set; } =
        new ObservableCollection<WarehouseOrderOutRow>();

    // ReSharper disable once CollectionNeverUpdated.Global
    public ObservableCollection<WarehouseOrderOutRow> SelectedRows { get; set; } =
        new ObservableCollection<WarehouseOrderOutRow>();

    public WarehouseSenderType WarehouseSenderType
    {
        get => myWarehouseSenderType;
        set
        {
            if (myWarehouseSenderType == value) return;
            myWarehouseSenderType = value;
            RaisePropertyChanged();
        }
    }

    public override string ToString()
    {
        return
            $"Расходный складской ордер №{DD_IN_NUM}/{DD_EXT_NUM} от {Date.ToShortDateString()} склад:{WarehouseOut}";
    }
}

public class DataAnnotationsWarehouseStorageOrderOut : DataAnnotationForFluentApiBase,
    IMetadataProvider<WarehouseOrderOut>
{
    void IMetadataProvider<WarehouseOrderOut>.BuildMetadata(
        MetadataBuilder<WarehouseOrderOut> builder)
    {
        SetNotAutoGenerated(builder);
        //builder.Property(_ => _.OutOnWarehouse).NotAutoGenerated();
        //builder.Property(_ => _.InFromWarehouse).NotAutoGenerated();
        builder.Property(_ => _.KontragentSender).NotAutoGenerated();
        builder.Property(_ => _.WarehouseSenderType).NotAutoGenerated();
        builder.Property(_ => _.DocumentType).NotAutoGenerated();
        builder.Property(_ => _.KontragentViewModelReceiver).NotAutoGenerated();
        builder.Property(_ => _.Period).NotAutoGenerated();
        builder.Property(_ => _.InvoiceProvider).NotAutoGenerated();
        builder.Property(_ => _.InvoiceClientViewModel).NotAutoGenerated();
        builder.Property(_ => _.DD_IN_NUM).AutoGenerated().DisplayName("Номер").LocatedAt(1);
        builder.Property(_ => _.Date).AutoGenerated().DisplayName("Дата").LocatedAt(0);
        builder.Property(_ => _.Kladovshik).AutoGenerated().DisplayName("Кладовщик").LocatedAt(4);
        builder.Property(_ => _.CREATOR).AutoGenerated().DisplayName("Создатель").LocatedAt(6);
        builder.Property(_ => _.WarehouseOut).AutoGenerated().DisplayName("Склад-отправитель").LocatedAt(2);
        builder.Property(_ => _.WarehouseIn).AutoGenerated().DisplayName("Склад-получатель").LocatedAt(3);
        builder.Property(_ => _.DD_OT_KOGO_POLUCHENO).AutoGenerated().DisplayName("Через кого").LocatedAt(5);
        builder.Property(_ => _.State).AutoGenerated().DisplayName("Статус").ReadOnly();

        #region Form Layout

            // @formatter:off
            builder.DataFormLayout()
                .Group("1", Orientation.Horizontal)
                    .ContainsProperty(_ => _.DD_IN_NUM)
                    .ContainsProperty(_ => _.Date)
                    .ContainsProperty(_ => _.CREATOR)
                    .ContainsProperty(_ => _.State)
                .EndGroup()
                .Group("g2")
                    .ContainsProperty(_ => _.WarehouseOut)
                    .ContainsProperty(_ => _.WarehouseIn)
                .EndGroup()
                .ContainsProperty(_ => _.DD_OT_KOGO_POLUCHENO)
                .ContainsProperty(_ => _.Note);
        // @formatter:on

        #endregion

        #region Table Layout

            // @formatter:off
            //builder.TableLayout().Group("Main")
            //    .ContainsProperty(_ => _.DD_IN_NUM)
            //    .ContainsProperty(_ => _.DD_DATE)
            //    .ContainsProperty(_ => _.WarehouseOut)
            //    .ContainsProperty(_ => _.WarehouseIn)
            //    .ContainsProperty(_ => _.DD_OT_KOGO_POLUCHENO)
            //    .ContainsProperty(x => x.State)
            //    .ContainsProperty(x => x.CREATOR);
        // @formatter:on

        #endregion
    }
}
