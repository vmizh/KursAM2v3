using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Windows.Controls;
using Core.Helper;
using Core.ViewModel.Base;
using Data;
using DevExpress.Mvvm.DataAnnotations;
using Helper;
using KursDomain.Documents.Invoices;
using KursDomain.ICommon;
using KursDomain.References;
using Newtonsoft.Json;

namespace KursDomain.Documents.NomenklManagement;

public class WaybillShort_FluentAPI : DataAnnotationForFluentApiBase, IMetadataProvider<WayBillShort>
{
    void IMetadataProvider<WayBillShort>.BuildMetadata(
        MetadataBuilder<WayBillShort> builder)
    {
        SetNotAutoGenerated(builder);
        builder.Property(x => x.Entity).NotAutoGenerated();

        builder.Property(x => x.InvoiceClient).AutoGenerated().DisplayName("Счет").LocatedAt(4);
        builder.Property(x => x.DD_IN_NUM).AutoGenerated()
            .DisplayName("№").LocatedAt(1);
        builder.Property(x => x.Date).AutoGenerated()
            .DisplayName("Дата").LocatedAt(0);
        builder.Property(x => x.CREATOR).AutoGenerated()
            .DisplayName("Создатель").LocatedAt(7);
        builder.Property(x => x.WarehouseOut).AutoGenerated().DisplayName("Со склада").LocatedAt(3);
        builder.Property(x => x.Client).AutoGenerated().DisplayName("Контрагент").LocatedAt(2);
        //builder.Property(x => x.State).AutoGenerated().DisplayName("Статус");
        builder.Property(x => x.Note).AutoGenerated().DisplayName("Примечания").LocatedAt(5);
        builder.Property(x => x.DD_KOMU_PEREDANO).AutoGenerated().DisplayName("Через кого").LocatedAt(6);
    }
}

[MetadataType(typeof(WaybillShort_FluentAPI))]
public class WayBillShort : RSViewModelBase, IEntity<SD_24>
{
    public WayBillShort(SD_24 entity)
    {
        Entity = entity ?? DefaultValue();
    }

    public string InvoiceClient { set; get; }

    public int DD_IN_NUM => Entity.DD_IN_NUM;
    public DateTime Date => Entity.DD_DATE;
    public string CREATOR => Entity.CREATOR;

    public References.Warehouse WarehouseOut =>
        GlobalOptions.ReferencesCache.GetWarehouse(Entity.DD_SKLAD_OTPR_DC) as References.Warehouse;

    public Kontragent Client => GlobalOptions.ReferencesCache.GetKontragent(Entity.DD_KONTR_POL_DC) as Kontragent;
    public override string Note => Entity.DD_NOTES;
    public string DD_KOMU_PEREDANO => Entity.DD_KOMU_PEREDANO;

    public SD_24 Entity { get; set; }

    public SD_24 DefaultValue()
    {
        return new SD_24
        {
            DOC_CODE = -1,
            Id = Guid.NewGuid()
        };
    }
}

/// <summary>
///     Расходная накладная
/// </summary>
[MetadataType(typeof(Waybill_FluentAPI))]
public class Waybill : SD_24ViewModel, IDocument<Waybill>
{
    private Kontragent myClient;

    private References.Warehouse myStore;

    public Waybill()
    {
        Rows = new ObservableCollection<WaybillRow>();
        Rows.CollectionChanged += (o, args) => State = RowStatus.Edited;
        DeletedRows = new List<WaybillRow>();
    }

    public Waybill(SD_24 entity) : base(entity)
    {
        if (Entity.DD_TYPE_DC == 0)
            Entity.DD_TYPE_DC = 2010000012;
        Rows = new ObservableCollection<WaybillRow>();
        Rows.CollectionChanged += (o, args) => State = RowStatus.Edited;
        DeletedRows = new List<WaybillRow>();
        if (entity == null) return;
        InvoiceClientViewModel = entity.SD_84 != null ? new InvoiceClientViewModel(entity.SD_84) : null;
        Client = GlobalOptions.ReferencesCache.GetKontragent(Entity.DD_KONTR_POL_DC) as Kontragent;
        Store = GlobalOptions.ReferencesCache.GetWarehouse(entity.DD_SKLAD_OTPR_DC) as References.Warehouse;
        if (entity.TD_24.Count <= 0) return;
        foreach (var row in entity.TD_24)
            Rows.Add(new WaybillRow(row));
    }

    public References.Currency DocCurrency =>
        GlobalOptions.ReferencesCache.GetKontragent(Entity.DD_KONTR_POL_DC)?.Currency as References.Currency;
    public override string Description =>
        $"Расходная накладная №{DD_IN_NUM}/{DD_EXT_NUM} от {Date.ToShortDateString()} " +
        $"со склада {WarehouseOut} контрагенту {Client} {Note}";

    public References.Warehouse Store
    {
        get => myStore;
        set
        {
            if (myStore != null && myStore.Equals(value)) return;
            myStore = value;
            Entity.DD_SKLAD_OTPR_DC = myStore?.DocCode;
            Entity.DD_OTRPAV_NAME = myStore?.Name;
            RaisePropertyChanged();
        }
    }

    public Kontragent Client
    {
        get => myClient;
        set
        {
            if (myClient == value) return;
            myClient = value;
            Entity.DD_KONTR_POL_DC = myClient?.DocCode;
            Entity.DD_POLUCH_NAME = myClient?.Name;
            RaisePropertyChanged();
        }
    }

    public ObservableCollection<WaybillRow> Rows { set; get; }
    public List<WaybillRow> DeletedRows { set; get; }

    public override decimal DocCode
    {
        get => Entity.DOC_CODE;
        set
        {
            if (Entity.DOC_CODE == value) return;
            Entity.DOC_CODE = value;
            RaisePropertyChanged();
        }
    }

    public override string Name =>
        $"№{Entity.DD_IN_NUM}/{Entity.DD_EXT_NUM} от {Entity.DD_DATE.ToShortDateString()} Склад-{WarehouseOut?.Name} Получатель-{KontragentViewModelReceiver?.Name}";

    public void RefreshData()
    {
        throw new NotImplementedException();
    }

    public new void Save()
    {
        throw new NotImplementedException();
    }

    public bool IsCanSave { get; set; }

    public bool Check()
    {
        throw new NotImplementedException();
    }

    public Waybill NewDocument()
    {
        throw new NotImplementedException();
    }

    public Waybill CopyDocument()
    {
        throw new NotImplementedException();
    }

    public Waybill CopyRequisite()
    {
        throw new NotImplementedException();
    }

    public void UnDeleteRows()
    {
        throw new NotImplementedException();
    }

    public Waybill Document { get; set; }

    public override object ToJson()
    {
        var res = new
        {
            Статус = CustomFormat.GetEnumName(State),
            DocCode,
            Номер = DD_IN_NUM.ToString(),
            Дата = Date.ToShortDateString(),
            Склад = WarehouseOut?.Name,
            Контрагент = Client.Name,
            Счет = InvoiceClientViewModel?.ToString(),
            Создатель = CREATOR,
            Примечание = Note,
            Позиции = Rows.Select(_ => _.ToJson())
        };
        return JsonConvert.SerializeObject(res);
    }
}

public class Waybill_FluentAPI : DataAnnotationForFluentApiBase, IMetadataProvider<Waybill>
{
    void IMetadataProvider<Waybill>.BuildMetadata(
        MetadataBuilder<Waybill> builder)
    {
        SetNotAutoGenerated(builder);
        builder.Property(x => x.DocumentType).NotAutoGenerated();
        builder.Property(x => x.Document).NotAutoGenerated();
        builder.Property(x => x.KontragentSender).NotAutoGenerated();
        builder.Property(x => x.KontragentViewModelReceiver).NotAutoGenerated();
        //builder.Property(x => x.OutOnWarehouse).NotAutoGenerated();
        //builder.Property(x => x.InFromWarehouse).NotAutoGenerated();
        builder.Property(x => x.WarehouseIn).NotAutoGenerated();
        builder.Property(x => x.Period).NotAutoGenerated();
        builder.Property(x => x.InvoiceProvider).NotAutoGenerated();
        builder.Property(x => x.Store).NotAutoGenerated();
        builder.Property(x => x.Kladovshik).NotAutoGenerated();

        builder.Property(x => x.InvoiceClientViewModel).AutoGenerated().DisplayName("Счет").LocatedAt(2);
        builder.Property(x => x.DD_IN_NUM).AutoGenerated()
            .DisplayName("№").LocatedAt(1);
        builder.Property(x => x.Date).AutoGenerated()
            .DisplayName("Дата").LocatedAt(0);
        builder.Property(x => x.CREATOR).AutoGenerated()
            .DisplayName("Создатель").LocatedAt(7);
        builder.Property(x => x.WarehouseOut).AutoGenerated().DisplayName("Со склада").LocatedAt(4);
        builder.Property(x => x.Client).AutoGenerated().DisplayName("Контрагент").LocatedAt(3);
        builder.Property(x => x.Receiver).NotAutoGenerated();
        // builder.Property(x => x.State).AutoGenerated().DisplayName("Статус");
        builder.Property(x => x.Note).AutoGenerated().DisplayName("Примечания").LocatedAt(5);
        builder.Property(x => x.DD_KOMU_PEREDANO).AutoGenerated().DisplayName("Через кого").LocatedAt(6);

        #region Form Layout

            // @formatter:off
            builder.DataFormLayout()
                .Group("1",Orientation.Horizontal)
                    .ContainsProperty(_ => _.DD_IN_NUM)
                    .ContainsProperty(_ => _.Date)
                    .ContainsProperty(_ => _.CREATOR)
                    .ContainsProperty(_ => _.State)
                .EndGroup()
                .Group("2",Orientation.Vertical)
                    .ContainsProperty(_ => _.WarehouseOut)
                    .ContainsProperty(_ => _.Client)
                    .ContainsProperty(_ => _.Receiver)
                .EndGroup()
                .ContainsProperty(_ => _.DD_SCHET)
                .Group("3",Orientation.Vertical)
                    .ContainsProperty(_ => _.DD_KOMU_PEREDANO)
                    .ContainsProperty(_ => _.Note)
                .EndGroup();
        // @formatter:on

        #endregion
    }
}
