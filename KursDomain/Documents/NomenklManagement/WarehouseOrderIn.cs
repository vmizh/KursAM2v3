using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Windows.Controls;
using Core.Helper;
using Data;
using DevExpress.Mvvm.DataAnnotations;
using KursDomain.Documents.Invoices;
using Newtonsoft.Json;

namespace KursDomain.Documents.NomenklManagement;

/// <summary>
///     Приходный складской ордер - заголовок
/// </summary>
[MetadataType(typeof(DataAnnotationsWarehouseStorageOrder))]
[SuppressMessage("ReSharper", "UnusedAutoPropertyAccessor.Global")]
public class WarehouseOrderIn : SD_24ViewModel
{
    private WarehouseSenderType myWarehouseSenderType;

    public WarehouseOrderIn()
    {
    }

    public WarehouseOrderIn(SD_24 entity) : base(entity)
    {
        biling = new ObservableCollection<InvoiceProviderRow>();
        var rtemp = new List<WarehouseOrderInRow>();
        if (Entity.TD_24 != null && Entity.TD_24.Count != 0)
            foreach (var item in Entity.TD_24)
                rtemp.Add(new WarehouseOrderInRow(item) { Parent = this });
        Rows = new ObservableCollection<WarehouseOrderInRow>(rtemp);
    }

    public ObservableCollection<WarehouseOrderInRow> Rows { set; get; } =
        new ObservableCollection<WarehouseOrderInRow>();

    public ObservableCollection<InvoiceProviderRow> biling { set; get; } =
        new ObservableCollection<InvoiceProviderRow>();

    // ReSharper disable once CollectionNeverUpdated.Global
    public ObservableCollection<WarehouseOrderInRow> SelectedRows { set; get; } =
        new ObservableCollection<WarehouseOrderInRow>();

    public ObservableCollection<WarehouseOrderInRow> DeletedRows { set; get; } =
        new ObservableCollection<WarehouseOrderInRow>();


    public override string Note
    {
        get => Entity.DD_NOTES;
        set
        {
            if (Entity.DD_NOTES == value) return;
            Entity.DD_NOTES = value;
            RaisePropertyChanged();
        }
    }

    public override string Description =>
        $"Приходный складской ордер №{DD_IN_NUM}/{DD_EXT_NUM} от {Date.ToShortDateString()} " +
        $"на склад {WarehouseOut} от {KontragentSender} {Note}";

    public WarehouseSenderType WarehouseSenderType
    {
        get => myWarehouseSenderType;
        set
        {
            if (myWarehouseSenderType == value) return;
            myWarehouseSenderType = value;
            RaisePropertyChanged();
        }
    }

    public override object ToJson()
    {
        var res = new
        {
            DocCode,
            Номер = DD_IN_NUM + "/" + DD_EXT_NUM,
            Дата = Date.ToShortDateString(),
            Возврат = IsVozvrat ? "Да" : "Нет",
            Склад = WarehouseIn.Name,
            Отправитель = Sender,
            Счет = InvoiceProvider?.ToString(),
            Позиции = Rows.Select(_ => _.ToJson())
        };
        return JsonConvert.SerializeObject(res);
    }

    public override string ToString()
    {
        return
            $"Приходный складcкой ордер №{DD_IN_NUM}/{DD_EXT_NUM} от {Date} отправит.:{Sender} склад:{WarehouseIn}";
    }
}

public class DataAnnotationsWarehouseStorageOrder : DataAnnotationForFluentApiBase,
    IMetadataProvider<WarehouseOrderIn>
{
    void IMetadataProvider<WarehouseOrderIn>.BuildMetadata(
        MetadataBuilder<WarehouseOrderIn> builder)
    {
        SetNotAutoGenerated(builder);
        builder.Property(_ => _.DocumentType).NotAutoGenerated();
        builder.Property(_ => _.WarehouseOut).NotAutoGenerated();
        builder.Property(_ => _.KontragentSender).NotAutoGenerated();
        builder.Property(_ => _.KontragentViewModelReceiver).NotAutoGenerated();
        builder.Property(_ => _.DocumentType).NotAutoGenerated();
        builder.Property(_ => _.Kladovshik).NotAutoGenerated();
        //builder.Property(_ => _.OutOnWarehouse).NotAutoGenerated();
        //builder.Property(_ => _.InFromWarehouse).NotAutoGenerated();
        builder.Property(_ => _.Period).NotAutoGenerated();
        builder.Property(_ => _.InvoiceProvider).NotAutoGenerated().DisplayName("Счет/фактура");
        builder.Property(_ => _.InvoiceClientViewModel).NotAutoGenerated();
        builder.Property(_ => _.DD_IN_NUM).AutoGenerated().DisplayName("Номер").LocatedAt(2);
        builder.Property(_ => _.DD_EXT_NUM).AutoGenerated().DisplayName("Внешний номер").LocatedAt(3);
        builder.Property(_ => _.Date).AutoGenerated().DisplayName("Дата").LocatedAt(1);
        builder.Property(_ => _.IsVozvrat).AutoGenerated().DisplayName("Возврат").LocatedAt(8);
        builder.Property(_ => _.WarehouseSenderType).AutoGenerated().DisplayName("Тип отправителя").LocatedAt(5);
        builder.Property(_ => _.Sender).AutoGenerated().DisplayName("Отправитель").LocatedAt(6);
        builder.Property(_ => _.WarehouseIn).AutoGenerated().DisplayName("Склад").LocatedAt(4);
        builder.Property(_ => _.DD_SCHET).NotAutoGenerated().DisplayName("Счет").MaxLength(50);
        builder.Property(_ => _.DD_OT_KOGO_POLUCHENO).NotAutoGenerated().DisplayName("Через кого");
        builder.Property(x => x.State).AutoGenerated()
            .DisplayName("Статус").LocatedAt(9);
        builder.Property(x => x.CREATOR).AutoGenerated()
            .DisplayName("Создатель").LocatedAt(7);
        builder.Property(_ => _.Note).AutoGenerated().DisplayName("Примечание");

        #region Form Layout

            // @formatter:off
            builder.DataFormLayout()
                .Group("1",Orientation.Horizontal)
                    .ContainsProperty(_ => _.DD_IN_NUM)
                    .ContainsProperty(_ => _.Date)
                    .ContainsProperty(_ => _.DD_EXT_NUM)
                    .ContainsProperty(_ => _.CREATOR)
                    .ContainsProperty(_ => _.State)
                .EndGroup()
                .Group("2",Orientation.Horizontal)
                    .ContainsProperty(_ => _.WarehouseSenderType)
                    .ContainsProperty(_ => _.Sender)
                .EndGroup()
                .Group("3",Orientation.Horizontal)
                    .ContainsProperty(_ => _.WarehouseIn)
                    .ContainsProperty(_ => _.IsVozvrat)
                .EndGroup()
                .ContainsProperty(_ => _.DD_SCHET)
                .ContainsProperty(_ => _.DD_OT_KOGO_POLUCHENO)
                .ContainsProperty(_ => _.Note);
        // @formatter:on

        #endregion

        #region Table Layout

            // @formatter:off
            //builder..TableLayout().Group("Основные данные")
            //    .ContainsProperty(_ => _.DD_IN_NUM)
            //    .ContainsProperty(_ => _.DD_EXT_NUM)
            //    .ContainsProperty(_ => _.DD_DATE)
            //    .ContainsProperty(_ => _.IsVozvrat)
            //    .ContainsProperty(_ => _.WarehouseSenderType)
            //    .ContainsProperty(_ => _.Sender)
            //    .ContainsProperty(_ => _.WarehouseIn)
            //    .ContainsProperty(_ => _.DD_SCHET)
            //    .ContainsProperty(_ => _.DD_OT_KOGO_POLUCHENO)
            //    .ContainsProperty(x => x.State)
            //    .ContainsProperty(x => x.CREATOR);
        // @formatter:on

        #endregion
    }
}
