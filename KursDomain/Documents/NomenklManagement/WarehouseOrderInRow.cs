using System;
using System.ComponentModel.DataAnnotations;
using Core.Helper;
using Data;
using DevExpress.Mvvm.DataAnnotations;
using KursDomain.Documents.Invoices;

namespace KursDomain.Documents.NomenklManagement;

/// <summary>
///     Приходный складской ордер - строка
/// </summary>
[MetadataType(typeof(DataAnnotationsWarehouseStorageOrderInRow))]
public class WarehouseOrderInRow : TD_24ViewModel
{
    private InvoiceProviderRow myLinkInvoice;
    private WarehouseOrderOutRow myLinkOrder;

    public WarehouseOrderInRow()
    {
    }

    // ReSharper disable once UnusedParameter.Local
    public WarehouseOrderInRow(TD_24 entity, bool isLoadSPost = true) : base(entity)
    {
        if (entity.DDT_SPOST_DC != null)
            LinkInvoice = new InvoiceProviderRow(entity.TD_26);

        if (entity.TD_242 != null)
            //var rash = entity.TD_242.FirstOrDefault(_ =>
            //    _.DDT_RASH_ORD_DC == entity.DDT_RASH_ORD_DC && _.DDT_RASH_ORD_CODE == entity.DDT_RASH_ORD_CODE);
            //if (rash != null)
            LinkOrder = new WarehouseOrderOutRow(entity.TD_242);
    }

    public string NomNomenkl => Nomenkl.NomenklNumber;
    public bool Taksirovka => DDT_TAX_EXECUTED == 1;
    public bool Factur => DDT_FACT_EXECUTED == 1;
    public string LinkDocument => LinkInvoice?.ToString() ?? LinkOrder?.ToString();
    public string LinkInvoiceDoc => LinkInvoice?.ToString();
    public string LinkOrderDoc => LinkOrder?.ToString();

    public WarehouseOrderInRow Document => this;

    public InvoiceProviderRow LinkInvoice
    {
        get => myLinkInvoice;
        set
        {
            if (myLinkInvoice != null && myLinkInvoice.Equals(value)) return;
            myLinkInvoice = value;
            RaisePropertyChanged();
        }
    }

    public WarehouseOrderOutRow LinkOrder
    {
        get => myLinkOrder;
        set
        {
            if (myLinkOrder != null && myLinkOrder.Equals(value)) return;
            myLinkOrder = value;
            RaisePropertyChanged();
        }
    }

    public override int Code
    {
        get => Entity.CODE;
        set
        {
            if (Entity.CODE == value) return;
            Entity.CODE = value;
            RaisePropertyChanged();
        }
    }


    public override string Name
    {
        get
        {
            if (Parent is WarehouseOrderIn p)
                return
                    $"Приходный складской ордер {p.DD_IN_NUM}/{p.DD_EXT_NUM} от {p.Date.ToShortDateString()} {p.Note}";
            return myName;
        }
    }

    public string LinkName
    {
        get
        {
            if (LinkInvoice != null) return LinkInvoice.ToString();
            if (LinkOrder != null) return LinkOrder.ToString();
            return null;
        }
    }

    public int? DocInNum => Entity.SD_24?.DD_IN_NUM;
    public string DocExtNum => Entity.SD_24?.DD_EXT_NUM;

    public DateTime? DocDate => Entity.SD_24?.DD_DATE;

    public References.Warehouse Warehouse => GlobalOptions.ReferencesCache.GetWarehouse(Entity.SD_24?.DD_SKLAD_POL_DC) as References.Warehouse;


    public override object ToJson()
    {
        return new
        {
            DocCode,
            Code,
            Номенклатурный_номер = NomNomenkl,
            Номенклатура = Nomenkl.Name,
            Количество = DDT_KOL_PRIHOD.ToString("n2"),
            Единица_измерения = Unit.Name,
            Связанный_документ = LinkInvoice?.ToString() ?? LinkOrder?.ToString(),
            Счет_доходов_расходов = SDRSchet?.Name
        };
    }
}

public class DataAnnotationsWarehouseStorageOrderInRow : DataAnnotationForFluentApiBase,
    IMetadataProvider<WarehouseOrderInRow>
{
    void IMetadataProvider<WarehouseOrderInRow>.BuildMetadata(
        MetadataBuilder<WarehouseOrderInRow> builder)
    {
        SetNotAutoGenerated(builder);
        builder.Property(_ => _.InvoiceProviderRow).NotAutoGenerated();
        builder.Property(_ => _.InvoiceClientViewModel).NotAutoGenerated();
        builder.Property(_ => _.Currency).NotAutoGenerated();
        builder.Property(_ => _.Diler).NotAutoGenerated();
        builder.Property(_ => _.Parent).NotAutoGenerated();
        builder.Property(_ => _.InvoiceProvider).NotAutoGenerated();
        builder.Property(_ => _.Document).NotAutoGenerated().DisplayName("Приходный ордер");
        builder.Property(_ => _.Taksirovka).NotAutoGenerated().DisplayName("Таксировка выполнена");
        builder.Property(_ => _.Factur).NotAutoGenerated().DisplayName("Фактурирование выполнено");

        builder.Property(_ => _.DocInNum).AutoGenerated().LocatedAt(2).DisplayName("Внутр.№").ReadOnly();
        builder.Property(_ => _.DocExtNum).AutoGenerated().LocatedAt(3).DisplayName("Внешн.№").ReadOnly();
        builder.Property(_ => _.DocDate).AutoGenerated().LocatedAt(1).DisplayName("Дата").ReadOnly();
        builder.Property(_ => _.Warehouse).AutoGenerated().LocatedAt(4).DisplayName("Склад").ReadOnly();
        builder.Property(_ => _.NomNomenkl).AutoGenerated().LocatedAt(5).DisplayName("Номенклатурный номер").ReadOnly();
        builder.Property(_ => _.Nomenkl).AutoGenerated().LocatedAt(6).DisplayName("Наименование материала").ReadOnly();
        builder.Property(_ => _.DDT_KOL_PRIHOD).AutoGenerated().LocatedAt(7).DisplayName("Кол-во").DisplayFormatString("n2").ReadOnly();
        builder.Property(_ => _.Unit).AutoGenerated().LocatedAt(8).DisplayName("Ед.изм").ReadOnly();
        builder.Property(_ => _.LinkInvoice).LocatedAt(9).AutoGenerated().DisplayName("Связанный с/ф");
        builder.Property(_ => _.LinkOrder).NotAutoGenerated().LocatedAt(10).DisplayName("Связанный ордер");
        builder.Property(_ => _.SDRSchet).AutoGenerated().LocatedAt(11).DisplayName("Счет дох./расх.").ReadOnly();
    }
}
