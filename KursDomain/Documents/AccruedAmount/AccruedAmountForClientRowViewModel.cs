using System;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data.Entity;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using Core.Helper;
using Core.ViewModel.Base;
using Data;
using DevExpress.Mvvm.DataAnnotations;
using KursDomain.Documents.Bank;
using KursDomain.Documents.Cash;
using KursDomain.References;

namespace KursDomain.Documents.AccruedAmount;

public class AccruedAmountForClientRowViewModel_FluentAPI : DataAnnotationForFluentApiBase,
    IMetadataProvider<AccruedAmountForClientRowViewModel>
{
    void IMetadataProvider<AccruedAmountForClientRowViewModel>.BuildMetadata(
        MetadataBuilder<AccruedAmountForClientRowViewModel> builder)
    {
        SetNotAutoGenerated(builder);
        builder.Property(_ => _.Entity).NotAutoGenerated();
        builder.Property(_ => _.Error).NotAutoGenerated();
        builder.Property(_ => _.Name).NotAutoGenerated();
        builder.Property(_ => _.Nomenkl).AutoGenerated().DisplayName("Начисление").ReadOnly();
        builder.Property(_ => _.Summa).AutoGenerated().DisplayName("Сумма").DisplayFormatString("n2");
        builder.Property(_ => _.PaySumma).AutoGenerated().DisplayName("Сумма оплачено").DisplayFormatString("n2");
        builder.Property(_ => _.Note).AutoGenerated().DisplayName("Примечание");
        builder.Property(_ => _.CashDoc).AutoGenerated().DisplayName("Приходный касс.ордер");
        builder.Property(_ => _.BankDoc).AutoGenerated().DisplayName("Банковская транзакция");
        builder.Property(_ => _.SDRSchet).AutoGenerated().DisplayName("Счет дох/расх");
    }
}

[MetadataType(typeof(AccruedAmountForClientRowViewModel_FluentAPI))]
[SuppressMessage("ReSharper", "RedundantArgumentDefaultValue")]
public sealed class AccruedAmountForClientRowViewModel : RSViewModelBase, IDataErrorInfo
{
    #region Constructors

    public AccruedAmountForClientRowViewModel(AccuredAmountForClientRow entity,
        AccruedAmountForClientViewModel parent = null)
    {
        Entity = entity ?? DefaultValue();
        if (parent != null)
        {
            Parent = parent;
            Entity.DocId = parent.Id;
        }

        if (Entity.CashDC != null)
            CashDoc = new CashInViewModel(Entity.SD_33);
        if (Entity.SHPZ_DC != null)
            SDRSchet = GlobalOptions.ReferencesCache.GetSDRSchet(Entity.SHPZ_DC.Value) as SDRSchet;
        if (Entity.BankCode != null)
        {
            var td101 = GlobalOptions.GetEntities().TD_101
                .Include(_ => _.SD_101).FirstOrDefault(_ => _.CODE == Entity.BankCode.Value);
            if (td101 != null)
                BankDoc = new BankOperationsViewModel(td101)
                {
                    Parent = new SD_101ViewModel(td101.SD_101)
                };
        }
    }

    #endregion

    #region Methods

    private AccuredAmountForClientRow DefaultValue()
    {
        return new AccuredAmountForClientRow
        {
            Id = Guid.NewGuid(),
            Summa = 0
        };
    }

    #endregion

    #region Fields

    private AccuredAmountForClientRow myEntity;
    private CashInViewModel myCashDoc;
    private BankOperationsViewModel myBankDoc;
    private SDRSchet mySDRSchet;

    #endregion

    #region Properties

    public AccuredAmountForClientRow Entity
    {
        get => myEntity;
        set
        {
            if (myEntity == value) return;
            myEntity = value;
            RaisePropertyChanged();
        }
    }

    public override Guid Id
    {
        get => Entity.Id;
        set
        {
            if (Entity.Id == value) return;
            Entity.Id = value;
            RaisePropertyChanged();
        }
    }

    public Guid DocId
    {
        get => Entity.DocId;
        set
        {
            if (Entity.DocId == value) return;
            Entity.DocId = value;
            RaisePropertyChanged();
        }
    }

    public Nomenkl Nomenkl
    {
        get => GlobalOptions.ReferencesCache.GetNomenkl(Entity.NomenklDC) as Nomenkl;
        set
        {
            if (GlobalOptions.ReferencesCache.GetNomenkl(Entity.NomenklDC) == value) return;
            if (value != null)
            {
                Entity.NomenklDC = value.DocCode;
                RaisePropertyChanged();
            }
        }
    }

    public decimal Summa
    {
        get => Entity.Summa;
        set
        {
            if (Entity.Summa == value) return;
            Entity.Summa = value;
            RaisePropertyChanged();
            if (Parent is RSViewModelBase p)
            {
                // ReSharper disable once UseNameofExpression
                p.RaisePropertyChanged("Summa");
                // ReSharper disable once UseNameofExpression
                p.RaisePropertyChanged("PaySumma");
            }
        }
    }

    public decimal PaySumma => CashDoc?.SUMM_ORD ?? 0 + BankDoc?.VVT_VAL_PRIHOD ?? 0;

    public override string Note
    {
        get => Entity.Note;
        set
        {
            if (Entity.Note == value) return;
            Entity.Note = value;
            RaisePropertyChanged();
        }
    }

    public CashInViewModel CashDoc
    {
        get => myCashDoc;
        set
        {
            if (myCashDoc == value) return;
            myCashDoc = value;
            Entity.CashDC = value?.DocCode;
            RaisePropertyChanged();
            RaisePropertyChanged(nameof(PaySumma));
        }
    }

    public BankOperationsViewModel BankDoc
    {
        get => myBankDoc;
        set
        {
            if (myBankDoc == value) return;
            myBankDoc = value;
            Entity.BankCode = value?.Code;
            RaisePropertyChanged();
            RaisePropertyChanged(nameof(PaySumma));
        }
    }

    public SDRSchet SDRSchet
    {
        get => mySDRSchet;
        set
        {
            if (mySDRSchet == value) return;
            mySDRSchet = value;
            Entity.SHPZ_DC = value?.DocCode;
            RaisePropertyChanged();
        }
    }

    #endregion

    #region IDataErrorInfo

    public string this[string columnName]
    {
        get
        {
            switch (columnName)
            {
                //case nameof(Kontragent):
                //    return Kontragent == null ? "Контрагент должен быть обязательно выбран" : null;
                default:
                    return null;
            }
        }
    }

    public string Error => null;

    #endregion
}
