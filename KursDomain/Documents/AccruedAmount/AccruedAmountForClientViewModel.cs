using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using Core;
using Core.Helper;
using Core.ViewModel.Base;
using Data;
using DevExpress.Mvvm.DataAnnotations;
using KursDomain.References;

namespace KursDomain.Documents.AccruedAmount;

public class AccruedAmountForClientViewModel_FluentAPI : DataAnnotationForFluentApiBase,
    IMetadataProvider<AccruedAmountForClientViewModel>
{
    void IMetadataProvider<AccruedAmountForClientViewModel>.BuildMetadata(
        MetadataBuilder<AccruedAmountForClientViewModel> builder)
    {
        SetNotAutoGenerated(builder);
        builder.Property(_ => _.Entity).NotAutoGenerated();
        builder.Property(_ => _.Error).NotAutoGenerated();
        builder.Property(_ => _.Name).NotAutoGenerated();
        builder.Property(_ => _.DocDate).AutoGenerated().DisplayName("Дата");
        builder.Property(_ => _.Creator).AutoGenerated().DisplayName("Создатель").ReadOnly();
        builder.Property(_ => _.DocInNum).AutoGenerated().DisplayName("№").ReadOnly();
        builder.Property(_ => _.DocExtNum).AutoGenerated().DisplayName("Внеш.№");
        builder.Property(_ => _.Kontragent).AutoGenerated().DisplayName("Контрагент");
        builder.Property(_ => _.CentrResponsibility).AutoGenerated().DisplayName("Центр ответственности");
        builder.Property(_ => _.Summa).AutoGenerated().DisplayName("Сумма").DisplayFormatString("n2").ReadOnly();
        builder.Property(_ => _.PaySumma).AutoGenerated().DisplayName("Оплачено").DisplayFormatString("n2").ReadOnly();
        builder.Property(_ => _.Currency).AutoGenerated().DisplayName("Валюта").ReadOnly();
        builder.Property(_ => _.Project).AutoGenerated().DisplayName("Проект");
        builder.Property(_ => _.Note).AutoGenerated().DisplayName("Примечание");
    }
}

[MetadataType(typeof(AccruedAmountForClientViewModel_FluentAPI))]
public class AccruedAmountForClientViewModel : RSViewModelBase, IDataErrorInfo
{
    #region Methods

    private AccruedAmountForClient DefaultValue()
    {
        return new AccruedAmountForClient
        {
            Id = Guid.NewGuid(),
            Creator = GlobalOptions.UserInfo.NickName,
            DocDate = DateTime.Today
        };
    }

    #endregion

    #region Fields

    private AccruedAmountForClient myEntity;
    private AccruedAmountForClientRowViewModel myCurrentRow;
    private Kontragent myKontragent;
    private CentrResponsibility myCO;
    private Project myProject;

    #endregion

    #region Properties

    // ReSharper disable once CollectionNeverUpdated.Global
    public ObservableCollection<AccruedAmountForClientRowViewModel> Rows { set; get; } = new();

    public override string ToString()
    {
        return $"Прямая услуга для клиентов №{DocInNum}/{DocExtNum} " +
               $"от {DocDate.ToShortDateString()} Контрагент: {Kontragent} на сумму {Summa} " +
               $"{Currency}";
    }

    [Display(AutoGenerateField = false)]
    public AccruedAmountForClientRowViewModel CurrentRow
    {
        get => myCurrentRow;
        set
        {
            if (myCurrentRow == value) return;
            myCurrentRow = value;
            RaisePropertyChanged();
        }
    }

    [Display(AutoGenerateField = false)]
    public AccruedAmountForClient Entity
    {
        get => myEntity;
        set
        {
            if (myEntity == value) return;
            myEntity = value;
            RaisePropertyChanged();
        }
    }

    [Display(AutoGenerateField = false)]
    public override Guid Id
    {
        get => Entity.Id;
        set
        {
            if (Entity.Id == value) return;
            Entity.Id = value;
            RaisePropertyChanged();
        }
    }

    public decimal Summa => Rows.Sum(_ => _.Summa);
    public decimal PaySumma => Rows.Sum(_ => _.PaySumma);
    public References.Currency Currency => Kontragent?.Currency as References.Currency;

    public DateTime DocDate
    {
        get => Entity.DocDate;
        set
        {
            if (Entity.DocDate == value) return;
            Entity.DocDate = value;
            RaisePropertyChanged();
        }
    }

    public Project Project  
    {
        get => myProject;
        set
        {
            if (Equals(value, myProject)) return;
            myProject = value;
            Entity.ProjectId = myProject?.Id;
            RaisePropertyChanged();
        }
    }

    public int DocInNum
    {
        get => Entity.DocInNum;
        set
        {
            if (Entity.DocInNum == value) return;
            Entity.DocInNum = value;
            RaisePropertyChanged();
        }
    }

    public string DocExtNum
    {
        get => Entity.DocExtNum;
        set
        {
            if (Entity.DocExtNum == value) return;
            Entity.DocExtNum = value;
            RaisePropertyChanged();
        }
    }

    public Kontragent Kontragent
    {
        get => myKontragent;
        set
        {
            if (Kontragent == value) return;
            if (value != null)
            {
                Entity.KontrDC = value.DocCode;
                myKontragent = GlobalOptions.ReferencesCache.GetKontragent(Entity.KontrDC) as Kontragent;
                RaisePropertyChanged();
                RaisePropertyChanged(nameof(Currency));
            }
        }
    }

    public CentrResponsibility CentrResponsibility
    {
        get => myCO; 
        set
        {
            if (myCO == value) return;
            if (value != null)
            {
                Entity.CentrResponsibleDC = value.DocCode;
                myCO = GlobalOptions.ReferencesCache.GetCentrResponsibility(Entity.CentrResponsibleDC) as CentrResponsibility;
                RaisePropertyChanged();
            }
        }
    }

    public override string Note
    {
        get => Entity.Note;
        set
        {
            if (Entity.Note == value) return;
            Entity.Note = value;
            RaisePropertyChanged();
        }
    }

    public string Creator
    {
        get => Entity.Creator;
        set
        {
            if (Entity.Creator == value) return;
            Entity.Creator = value;
            RaisePropertyChanged();
        }
    }

    #endregion

    #region Constructors

    public AccruedAmountForClientViewModel()
    {
        Entity = DefaultValue();
    }

    public AccruedAmountForClientViewModel(AccruedAmountForClient entity)
    {
        Entity = entity ?? DefaultValue();
        if (Entity.CentrResponsibleDC is not null)
            CentrResponsibility =
                GlobalOptions.ReferencesCache.GetCentrResponsibility(Entity.CentrResponsibleDC) as CentrResponsibility;
        if (Entity.KontrDC != 0)
            Kontragent =
                (Kontragent)GlobalOptions.ReferencesCache.GetKontragent(Entity.KontrDC);
        Project = GlobalOptions.ReferencesCache.GetProject(Entity.ProjectId) as Project;
        foreach (var r in Entity.AccuredAmountForClientRow)
        {
            var newRow = new AccruedAmountForClientRowViewModel(r, this);
            if (r.NomenklDC != 0)
                newRow.Nomenkl = GlobalOptions.ReferencesCache.GetNomenkl(r.NomenklDC) as Nomenkl;
            if (r.SHPZ_DC is not null)
                newRow.SDRSchet = GlobalOptions.ReferencesCache.GetSDRSchet(r.SHPZ_DC) as SDRSchet;
            Rows.Add(newRow);
        }
    }

    #endregion

    #region IDataErrorInfo

    public string this[string columnName]
    {
        get
        {
            switch (columnName)
            {
                case nameof(Kontragent):
                    return Kontragent == null ? "Контрагент должен быть обязательно выбран" : null;
                default:
                    return null;
            }
        }
    }

    public string Error => GetError();

    private string GetError()
    {
        if (Kontragent == null)
            return "Контрагент должен быть обязательно выбран";
        if (Rows.Any(_ => string.IsNullOrWhiteSpace(_.Nomenkl?.Name)))
            return "Должен быть выбран тип начисления";
        return null;
    }

    #endregion
}
