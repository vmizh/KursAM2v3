using System;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Core.Helper;
using Core.ViewModel.Base;
using Data;
using DevExpress.Mvvm.DataAnnotations;

namespace KursDomain.Documents.StockHolder;

public class StockHolderAccrualTypeViewModel_FluentAPI : DataAnnotationForFluentApiBase,
    IMetadataProvider<StockHolderAccrualTypeViewModel>
{
    void IMetadataProvider<StockHolderAccrualTypeViewModel>.BuildMetadata(
        MetadataBuilder<StockHolderAccrualTypeViewModel> builder)
    {
        SetNotAutoGenerated(builder);
        builder.Property(_ => _.Entity).NotAutoGenerated();
        builder.Property(_ => _.Error).NotAutoGenerated();
        builder.Property(_ => _.Name).AutoGenerated().DisplayName("Наименование");
        builder.Property(_ => _.Note).AutoGenerated().DisplayName("Примечание");
    }
}

[MetadataType(typeof(StockHolderAccrualTypeViewModel_FluentAPI))]
public class StockHolderAccrualTypeViewModel : RSViewModelBase, IDataErrorInfo, IEntity<StockHolderAccrualType>
{
    #region Constructors

    public StockHolderAccrualTypeViewModel(StockHolderAccrualType entity)
    {
        Entity = entity ?? DefaultValue();
    }

    #endregion

    #region Methods

    public StockHolderAccrualType DefaultValue()
    {
        return new StockHolderAccrualType { Id = Guid.NewGuid() };
    }

    #endregion

    #region Fields

    #endregion

    #region Properties

    public StockHolderAccrualType Entity { get; set; }

    public override Guid Id
    {
        get => Entity.Id;
        set
        {
            if (Entity.Id == value) return;
            Entity.Id = value;
            RaisePropertyChanged();
        }
    }

    public override string Name
    {
        get => Entity.Name;
        set
        {
            if (Entity.Name == value) return;
            Entity.Name = value;
            RaisePropertyChanged();
        }
    }

    public override string Note
    {
        get => Entity.Note;
        set
        {
            if (Entity.Note == value) return;
            Entity.Note = value;
            RaisePropertyChanged();
        }
    }

    #endregion

    #region Commands

    #endregion

    #region IDataErrorInfo

    public string this[string columnName]
    {
        get
        {
            switch (columnName)
            {
                case nameof(Name):
                    return Name == null ? "Наименование не может быть пустым" : null;
                default:
                    return null;
            }
        }
    }

    public string Error => null;

    #endregion
}
