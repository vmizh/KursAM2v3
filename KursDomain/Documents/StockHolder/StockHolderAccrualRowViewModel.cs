using System;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Core;
using Core.Helper;
using Core.ViewModel.Base;
using Data;
using DevExpress.Mvvm.DataAnnotations;

namespace KursDomain.Documents.StockHolder;

public class StockHolderAccrualRowViewModel_FluentAPI : DataAnnotationForFluentApiBase,
    IMetadataProvider<StockHolderAccrualRowViewModel>
{
    void IMetadataProvider<StockHolderAccrualRowViewModel>.BuildMetadata(
        MetadataBuilder<StockHolderAccrualRowViewModel> builder)
    {
        SetNotAutoGenerated(builder);
        builder.Property(_ => _.Entity).NotAutoGenerated();
        builder.Property(_ => _.Parent).NotAutoGenerated();
        builder.Property(_ => _.StockHolder).AutoGenerated().DisplayName("Акционер").ReadOnly();
        builder.Property(_ => _.AccrualType).AutoGenerated().DisplayName("Тип начисления");
        builder.Property(_ => _.Summa).AutoGenerated().DisplayName("Сумма").DisplayFormatString("n2");
        builder.Property(_ => _.Currency).DisplayName("Валюта");
        builder.Property(_ => _.Note).DisplayName("Примечания");
    }
}

[MetadataType(typeof(StockHolderAccrualRowViewModel_FluentAPI))]
public class StockHolderAccrualRowViewModel : RSViewModelBase, IDataErrorInfo,
    IEntity<StockHolderAccrualRows>
{
    #region Constructors

    public StockHolderAccrualRowViewModel(StockHolderAccrualRows entity)
    {
        Entity = entity ?? DefaultValue();
        LoadRefernces();
    }

    #endregion

    #region Fields

    private StockHolderAccrualTypeViewModel myAccrualType;
    private StockHolderViewModel myStockHolder;
    private Guid myDocId;

    #endregion

    #region Properties

    public StockHolderAccrualRows Entity { get; set; }

    public override Guid Id
    {
        get => Entity.Id;
        set
        {
            if (Entity.Id == value) return;
            Entity.Id = value;
            RaisePropertyChanged();
        }
    }

    public Guid DocId
    {
        get => myDocId;
        set
        {
            if (myDocId == value) return;
            myDocId = value;
            RaisePropertyChanged();
        }
    }

    public new StockHolderAccrualViewModel Parent
    {
        get => (StockHolderAccrualViewModel)myParent;
        set
        {
            if (myParent == value) return;
            myParent = value;
            if (myParent is StockHolderAccrualViewModel p) Entity.DocId = p.Id;
            RaisePropertyChanged();
        }
    }

    public StockHolderViewModel StockHolder
    {
        get => myStockHolder;
        set
        {
            if (myStockHolder == value) return;
            myStockHolder = value;
            if (myStockHolder != null)
                Entity.StockHolderId = myStockHolder.Id;
            RaisePropertyChanged();
        }
    }

    public StockHolderAccrualTypeViewModel AccrualType
    {
        get => myAccrualType;
        set
        {
            if (myAccrualType == value) return;
            myAccrualType = value;
            if (myAccrualType != null)
                Entity.AcrrualTypeId = myAccrualType.Id;
            RaisePropertyChanged();
        }
    }

    public References.Currency Currency
    {
        get => GlobalOptions.ReferencesCache.GetCurrency(Entity.CurrencyDC) as References.Currency;
        set
        {
            if (GlobalOptions.ReferencesCache.GetCurrency(Entity.CurrencyDC) as References.Currency == value) return;
            Entity.CurrencyDC = value?.DocCode;
            RaisePropertyChanged();
        }
    }

    public override string Note
    {
        get => Entity.Note;
        set
        {
            if (Entity.Note == value) return;
            Entity.Note = value;
            RaisePropertyChanged();
        }
    }

    public decimal Summa
    {
        get => Entity.Summa ?? 0;
        set
        {
            if (Entity.Summa == value) return;
            Entity.Summa = value;
            RaisePropertyChanged();
        }
    }

    #endregion

    #region Methods

    public StockHolderAccrualRows DefaultValue()
    {
        return new StockHolderAccrualRows
        {
            Id = Guid.NewGuid(),
            Summa = 0
        };
    }

    private void LoadRefernces()
    {
        if (Entity.StockHolderAccrualType != null)
            AccrualType = new StockHolderAccrualTypeViewModel(Entity.StockHolderAccrualType);
        if (Entity.StockHolders != null)
            StockHolder = new StockHolderViewModel(Entity.StockHolders);
        DocId = Entity.DocId;
    }

    #endregion

    #region IDataErrorInfo

    public string this[string columnName]
    {
        get
        {
            switch (columnName)
            {
                //case nameof(Note):
                //    return Name == null ? "Примечание не может быть пустым" : null;
                default:
                    return null;
            }
        }
    }

    public string Error => null;

    #endregion
}
