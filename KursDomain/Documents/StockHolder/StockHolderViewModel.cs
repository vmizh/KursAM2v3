using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Core.EntityViewModel.CommonReferences.Kontragent;
using Core.EntityViewModel.Systems;
using Core.Helper;
using Core.ViewModel.Base;
using Data;
using DevExpress.Mvvm.DataAnnotations;
using KursDomain.Documents.CommonReferences.Kontragent;

namespace Core.EntityViewModel.StockHolder
{
    public class StockHolderViewModell_FluentAPI : DataAnnotationForFluentApiBase,
        IMetadataProvider<StockHolderViewModel>
    {
        void IMetadataProvider<StockHolderViewModel>.BuildMetadata(MetadataBuilder<StockHolderViewModel> builder)
        {
            SetNotAutoGenerated(builder);
            builder.Property(_ => _.Entity).NotAutoGenerated();
            builder.Property(_ => _.Error).NotAutoGenerated();
            builder.Property(_ => _.Name).AutoGenerated().DisplayName("Наименование");
            builder.Property(_ => _.Employee).AutoGenerated().DisplayName("Сотрудник");
            builder.Property(_ => _.Kontragent).AutoGenerated().DisplayName("Контрагент");
            builder.Property(_ => _.Note).AutoGenerated().DisplayName("Примечание");
        }
    }
    [MetadataType(typeof(StockHolderViewModell_FluentAPI))]
    public class StockHolderViewModel : RSViewModelBase, IDataErrorInfo, IEntity<StockHolders>
    {
        #region Constructors

        public StockHolderViewModel(StockHolders entity)
        {
            Entity = entity ?? DefaultValue();
        }

        #endregion

        #region Methods

        public StockHolders DefaultValue()
        {
            return new StockHolders
            {
                Id = Guid.NewGuid()
            };
        }

        #endregion

        #region Properties

        public StockHolders Entity { get; set; }
        public ObservableCollection<UserRights> UserRights { set; get; } = new ObservableCollection<UserRights>();

        public override Guid Id
        {
            get => Entity.Id;
            set
            {
                if (Entity.Id == value) return;
                Entity.Id = value;
                RaisePropertyChanged();
            }
        }

        public override string Name
        {
            get => Entity.Name;
            set
            {
                if (Entity.Name == value) return;
                Entity.Name = value;
                RaisePropertyChanged();
            }
        }

        public Employee.Employee Employee
        {
            get => MainReferences.GetEmployee(Entity.EmployeeDC);
            set
            {
                if (MainReferences.GetEmployee(Entity.EmployeeDC) == value) return;
                Entity.EmployeeDC = value?.DocCode;
                RaisePropertyChanged();
            }
        }

        public Kontragent Kontragent
        {
            get => MainReferences.GetKontragent(Entity.KontrDC);
            set
            {
                if (MainReferences.GetKontragent(Entity.KontrDC) == value) return;
                Entity.KontrDC = value?.DocCode;
                RaisePropertyChanged();
            }
        }

        public override string Note
        {
            get => Entity.Note;
            set
            {
                if (Entity.Note == value) return;
                Entity.Note = value;
                RaisePropertyChanged();
            }
        }

        #endregion

        #region Fields

        #endregion

        #region Commands

        #endregion

        #region IDataErrorInfo

        public string this[string columnName]
        {
            get
            {
                switch (columnName)
                {
                    case nameof(Name):
                        return Name == null ? "Наименование не может быть пустым" : null;
                    default:
                        return null;
                }
            }
        }

        public string Error => null;

        #endregion
    }

    public class UserRights_FluentAPI : DataAnnotationForFluentApiBase,
        IMetadataProvider<UserRights>
    {
        void IMetadataProvider<UserRights>.BuildMetadata(MetadataBuilder<UserRights> builder)
        {
            SetNotAutoGenerated(builder);
            builder.Property(_ => _.User).AutoGenerated().DisplayName("Пользователь").ReadOnly();
            builder.Property(_ => _.IsSelected).AutoGenerated().DisplayName("Выбор");
        }
    }
    [MetadataType(typeof(UserRights_FluentAPI))]
    public class UserRights : RSViewModelBase
    {

        private KursUser myUser;
        private bool myIsSelected;
        
        public KursUser User
        {
            get => myUser;
            set
            {
                if (myUser == value) return;
                myUser = value;
                RaisePropertyChanged();
            }
        }


       
        public bool IsSelected
        {
            get => myIsSelected;
            set
            {
                if (myIsSelected == value) return;
                myIsSelected = value;
                if (Parent is RSViewModelBase p)
                {
                    p.myState = RowStatus.Edited;
                }
                RaisePropertyChanged();
            }
        }
    }
}
